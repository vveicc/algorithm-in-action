{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"/]+|(?!\\b)(?=[A-Z][a-z])|\\.(?!\\d)|&[lg]t;","pipeline":["stemmer"]},"docs":[{"location":"","title":"\u7b80\u4ecb","text":""},{"location":"#\u6b22\u8fce\u6765\u5230-algorithm-in-action-","title":"\u6b22\u8fce\u6765\u5230 Algorithm in Action !","text":"<p>\u672c\u7ad9\u7684\u4e3b\u8981\u76ee\u6807\u662f\u6301\u7eed\u5206\u7c7b\u6574\u7406\u7b14\u8005\u5728\u5b66\u4e60\u7b97\u6cd5\u8fc7\u7a0b\u4e2d\u9047\u5230\u7684\u9898\u76ee\u3002</p> <p>\u672c\u7ad9\u4ec5\u8fdb\u884c\u9898\u76ee\u6574\u7406\uff0c\u4e0d\u4f1a\u7ed9\u51fa\u6bcf\u79cd\u7b97\u6cd5\u7684\u8be6\u7ec6\u8bb2\u89e3\uff0c\u5982\u679c\u9700\u8981\u5b66\u4e60\u6bcf\u79cd\u7b97\u6cd5\u7684\u8be6\u7ec6\u539f\u7406\uff0c\u8bf7\u81ea\u884c\u67e5\u627e\u76f8\u5173\u8d44\u6599\u5b66\u4e60\u3002</p> <p>\u672c\u9879\u76ee\u53c2\u8003 OI Wiki \u7684\u7b97\u6cd5\u5206\u7c7b\u5bf9\u9898\u76ee\u8fdb\u884c\u5206\u7c7b\u6574\u7406\u3002OI Wiki \u662f\u4e00\u4e2a\u975e\u5e38\u4f18\u79c0\u7684\u7f16\u7a0b\u7ade\u8d5b\u77e5\u8bc6\u6574\u5408\u7ad9\u70b9\uff0c\u5bf9\u4e8e\u7b97\u6cd5\u5b66\u4e60\u5e2e\u52a9\u5f88\u5927\uff0c\u5728\u6b64\u6df1\u8868\u611f\u8c22\u3002</p>"},{"location":"array/subarray/","title":"\u5b50\u6570\u7ec4\u8fd0\u7b97\u6a21\u677f","text":"<p>\u9002\u7528\u573a\u666f \u5bf9\u5b50\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u8fdb\u884c\u67d0\u79cd\u8fd0\u7b97\uff0c\u8ba1\u7b97</p> <ol> <li>\u6570\u7ec4\u4e2d\u6240\u6709\u5b50\u6570\u7ec4\u7684\u8fd0\u7b97\u7ed3\u679c\u6709\u591a\u5c11\u79cd\uff1b</li> <li>\u8fd0\u7b97\u7ed3\u679c\u7b49\u4e8e\u6307\u5b9a\u503c\u7684\u5b50\u6570\u7ec4\u6709\u591a\u5c11\u4e2a\uff1b</li> <li>\u8fd0\u7b97\u7ed3\u679c\u7b49\u4e8e\u6307\u5b9a\u503c\u7684\u5b50\u6570\u7ec4\u7684\u6700\u5c0f\u957f\u5ea6\u6216\u6700\u5927\u957f\u5ea6\u3002</li> </ol> <p>\u8fdb\u884c\u7684\u8fd0\u7b97\u53ef\u4ee5\u662f\u4ee5\u4e0b\u51e0\u7c7b\uff1a</p> <ol> <li>\u6309\u4f4d\u4e0e\u3001\u6309\u4f4d\u6216\uff1b</li> <li>\u6700\u5927\u516c\u7ea6\u6570GCD\uff08Greatest Common Divisor\uff09\uff1b</li> <li>\u6700\u5c0f\u516c\u500d\u6570LCM\uff08Least Common Multiple\uff09\u3002</li> </ol> <p>\u6a21\u677f\u539f\u7406 \u679a\u4e3e\u5b50\u6570\u7ec4\u53f3\u7aef\u70b9\uff08\u6216\u5de6\u7aef\u70b9\uff09\uff0c\u6bcf\u4e2a\u8fd0\u7b97\u7ed3\u679c\u5bf9\u5e94\u4e00\u6bb5\u8fde\u7eed\u7684\u5de6\u7aef\u70b9\uff08\u6216\u53f3\u7aef\u70b9\uff09\uff0c\u8ba1\u7b97\u65f6\u53ea\u9700\u8981\u8bb0\u5f55\u5e76\u5904\u7406\u6bcf\u4e2a\u8fde\u7eed\u6bb5\u7684\u4fe1\u606f\u3002</p>"},{"location":"array/subarray/#lc2447-gcd-\u4e3a-k-\u7684\u5b50\u6570\u7ec4\u6570\u76ee","title":"LC2447. GCD \u4e3a K \u7684\u5b50\u6570\u7ec4\u6570\u76ee","text":"\u95ee\u9898\u63cf\u8ff0 <p>\u7ed9\u4f60\u4e00\u4e2a\u957f\u5ea6\u4e3a <code>1\u2264n\u22641e3</code> \u7684\u6574\u6570\u6570\u7ec4 <code>nums</code> \u548c\u4e00\u4e2a\u6574\u6570 <code>k</code> \uff0c<code>1\u2264nums[i],k\u22641e9</code> \u3002 \u8bf7\u4f60\u7edf\u8ba1\u5e76\u8fd4\u56de <code>nums</code> \u7684\u5b50\u6570\u7ec4\u4e2d\u5143\u7d20\u7684\u6700\u5927\u516c\u56e0\u6570\u7b49\u4e8e <code>k</code> \u7684\u5b50\u6570\u7ec4\u6570\u76ee\u3002</p> <p>\u5728 LeetCode\u4e3b\u7ad9 \u6216 \u529b\u6263\u4e2d\u6587\u793e\u533a \u67e5\u770b\u8be5\u9898\u3002</p> \u89e3\u9898\u601d\u8def <p>\u65b9\u6cd5\u4e00\uff1a\u66b4\u529b\u679a\u4e3e</p> Go <pre><code>package main\n\nfunc subarrayGCD(nums []int, k int) (ans int) {\n    for i, x := range nums {\n        for _, y := range nums[i:] {\n            if x = gcd(x, y); x == k {\n                ans++\n            }\n        }\n    }\n    return\n}\n\nfunc gcd(x, y int) int {\n    for y != 0 {\n        x, y = y, x%y\n    }\n    return x\n}\n</code></pre> <p>\u65b9\u6cd5\u4e8c\uff1a\u5b50\u6570\u7ec4\u8fd0\u7b97\u6a21\u677f</p> Go <pre><code>package main\n\nfunc subarrayGCD(nums []int, k int) (ans int) {\n    // \u6bcf\u4e2a\u8fde\u7eed\u6bb5\u7684GCD\u53ca\u8fde\u7eed\u6bb5\u7684\u53f3\u7aef\u70b9\n    type info struct{ g, i int }\n    var a []info\n    i0 := -1 // \u6700\u5de6\u4e00\u4e2a\u8fde\u7eed\u6bb5\u7684\u5de6\u7aef\u70b9\uff08\u4e0d\u5305\u542b\uff09\n    for i, x := range nums {\n        // \u4fdd\u8bc1\u8ba1\u7b97\u7684GCD\u90fd\u662fK\u7684\u500d\u6570\n        if x%k != 0 {\n            i0, a = i, nil\n            continue\n        }\n        // \u8ba1\u7b97\u6bcf\u4e2a\u8fde\u7eed\u6bb5\u7684GCD\n        for j, y := range a {\n            a[j].g = gcd(x, y.g)\n        }\n        // \u589e\u52a0\u65b0\u7684\u8fde\u7eed\u6bb5\n        a = append(a, info{x, i})\n        // \u539f\u5730\u53bb\u91cd\n        j := 0\n        for _, y := range a[1:] {\n            if y.g == a[j].g {\n                a[j].i = y.i\n            } else {\n                j++\n                a[j] = y\n            }\n        }\n        a = a[:j+1]\n        // \u7edf\u8ba1\u4ee5nums[i]\u4e3a\u53f3\u7aef\u70b9\u7684GCD\u4e3aK\u7684\u5b50\u6570\u7ec4\u7684\u6570\u76ee\n        if a[0].g == k {\n            ans += a[0].i - i0\n        }\n    }\n    return\n}\n\nfunc gcd(x, y int) int {\n    for y != 0 {\n        x, y = y, x%y\n    }\n    return x\n}\n</code></pre>"},{"location":"array/subarray/#lc2470-lcm-\u4e3a-k-\u7684\u5b50\u6570\u7ec4\u6570\u76ee","title":"LC2470. LCM \u4e3a K \u7684\u5b50\u6570\u7ec4\u6570\u76ee","text":"\u95ee\u9898\u63cf\u8ff0 <p>\u7ed9\u4f60\u4e00\u4e2a\u957f\u5ea6\u4e3a <code>1\u2264n\u22641e3</code> \u7684\u6574\u6570\u6570\u7ec4 <code>nums</code> \u548c\u4e00\u4e2a\u6574\u6570 <code>k</code> \uff0c<code>1\u2264nums[i],k\u22641e3</code> \u3002 \u8bf7\u4f60\u7edf\u8ba1\u5e76\u8fd4\u56de <code>nums</code> \u7684\u5b50\u6570\u7ec4\u4e2d\u5143\u7d20\u7684\u6700\u5c0f\u516c\u500d\u6570\u7b49\u4e8e <code>k</code> \u7684\u5b50\u6570\u7ec4\u6570\u76ee\u3002</p> <p>\u5728 LeetCode\u4e3b\u7ad9 \u6216 \u529b\u6263\u4e2d\u6587\u793e\u533a \u67e5\u770b\u8be5\u9898\u3002</p> \u89e3\u9898\u601d\u8def <p>\u65b9\u6cd5\u4e00\uff1a\u66b4\u529b\u679a\u4e3e</p> Go <pre><code>package main\n\nfunc subarrayLCM(nums []int, k int) (ans int) {\n    for i := range nums {\n        lcm := 1\n        for _, x := range nums[i:] {\n            if lcm *= x / gcd(lcm, x); lcm == k {\n                ans++\n            } else if k%lcm != 0 {\n                break\n            }\n        }\n    }\n    return\n}\n\nfunc gcd(x, y int) int {\n    for y != 0 {\n        x, y = y, x%y\n    }\n    return x\n}\n</code></pre> <p>\u65b9\u6cd5\u4e8c\uff1a\u5b50\u6570\u7ec4\u8fd0\u7b97\u6a21\u677f</p> Go <pre><code>package main\n\nfunc subarrayLCM(nums []int, k int) (ans int) {\n    // \u6bcf\u4e2a\u8fde\u7eed\u6bb5\u7684LCM\u53ca\u8fde\u7eed\u6bb5\u7684\u53f3\u7aef\u70b9\n    type info struct{ lcm, i int }\n    var a []info\n    i0 := -1 // \u6700\u5de6\u4e00\u4e2a\u8fde\u7eed\u6bb5\u7684\u5de6\u7aef\u70b9\uff08\u4e0d\u5305\u542b\uff09\n    for i, x := range nums {\n        // \u4fdd\u8bc1\u8ba1\u7b97\u7684LCM\u90fd\u662fK\u7684\u56e0\u5b50\n        if k%x != 0 {\n            i0, a = i, nil\n            continue\n        }\n        // \u8ba1\u7b97\u6bcf\u4e2a\u8fde\u7eed\u6bb5\u7684LCM\n        for j, y := range a {\n            a[j].lcm *= x / gcd(y.lcm, x)\n        }\n        // \u589e\u52a0\u65b0\u7684\u8fde\u7eed\u6bb5\n        a = append(a, info{x, i})\n        // \u539f\u5730\u53bb\u91cd\n        j := 0\n        for _, y := range a[1:] {\n            if y.lcm == a[j].lcm {\n                a[j].i = y.i\n            } else {\n                j++\n                a[j] = y\n            }\n        }\n        a = a[:j+1]\n        // \u7edf\u8ba1\u4ee5nums[i]\u4e3a\u53f3\u7aef\u70b9\u7684LCM\u4e3aK\u7684\u5b50\u6570\u7ec4\u7684\u6570\u76ee\n        if a[0].lcm == k {\n            ans += a[0].i - i0\n        }\n    }\n    return\n}\n\nfunc gcd(x, y int) int {\n    for y != 0 {\n        x, y = y, x%y\n    }\n    return x\n}\n</code></pre>"},{"location":"array/subarray/#lc898-\u5b50\u6570\u7ec4\u6309\u4f4d\u6216\u7684\u7ed3\u679c\u79cd\u6570","title":"LC898. \u5b50\u6570\u7ec4\u6309\u4f4d\u6216\u7684\u7ed3\u679c\u79cd\u6570","text":"\u95ee\u9898\u63cf\u8ff0 <p>\u7ed9\u4f60\u4e00\u4e2a\u957f\u5ea6\u4e3a <code>1\u2264n\u22645e4</code> \u7684\u6574\u6570\u6570\u7ec4 <code>arr</code> \uff0c<code>0\u2264arr[i]\u22641e9</code> \u3002 \u8bf7\u4f60\u7edf\u8ba1\u5e76\u8fd4\u56de <code>arr</code> \u7684\u6240\u6709\u5b50\u6570\u7ec4\u4e2d\u5143\u7d20\u7684\u6309\u4f4d\u6216\u7684\u7ed3\u679c\u79cd\u6570\u3002\u591a\u6b21\u51fa\u73b0\u7684\u7ed3\u679c\u4ec5\u8ba1\u7b97\u4e00\u6b21\u3002</p> <p>\u5728 LeetCode\u4e3b\u7ad9 \u6216 \u529b\u6263\u4e2d\u6587\u793e\u533a \u67e5\u770b\u8be5\u9898\u3002</p> \u89e3\u9898\u601d\u8def <p>\u65b9\u6cd5\u4e00\uff1a\u5b50\u6570\u7ec4\u8fd0\u7b97\u6a21\u677f</p> Go <pre><code>package main\n\nfunc subarrayBitwiseORs(arr []int) int {\n    set := make(map[int]struct{})\n    var ors []int // \u6bcf\u4e2a\u8fde\u7eed\u6bb5\u7684\u6309\u4f4d\u6216\u503c\n    for _, x := range arr {\n        // \u8ba1\u7b97\u6bcf\u4e2a\u8fde\u7eed\u6bb5\u7684\u6309\u4f4d\u6216\u503c\n        for j := range ors {\n            ors[j] |= x\n        }\n        // \u589e\u52a0\u65b0\u7684\u8fde\u7eed\u6bb5\n        ors = append(ors, x)\n        // \u539f\u5730\u53bb\u91cd\n        j := 0\n        set[ors[0]] = struct{}{}\n        for _, or := range ors[1:] {\n            if or != ors[j] {\n                j++\n                ors[j] = or\n                set[or] = struct{}{}\n            }\n        }\n        ors = ors[:j+1]\n    }\n    return len(set)\n}\n</code></pre>"},{"location":"array/subarray/#lc2411-\u6309\u4f4d\u6216\u6700\u5927\u7684\u5b50\u6570\u7ec4\u7684\u6700\u5c0f\u957f\u5ea6","title":"LC2411. \u6309\u4f4d\u6216\u6700\u5927\u7684\u5b50\u6570\u7ec4\u7684\u6700\u5c0f\u957f\u5ea6","text":"\u95ee\u9898\u63cf\u8ff0 <p>\u7ed9\u4f60\u4e00\u4e2a\u957f\u5ea6\u4e3a <code>1\u2264n\u22641e5</code> \u7684\u6574\u6570\u6570\u7ec4 <code>nums</code> \uff0c<code>0\u2264nums[i]\u22641e9</code> \u3002 \u8bf7\u4f60\u8fd4\u56de\u4e00\u4e2a\u5927\u5c0f\u4e3a <code>n</code> \u7684\u6574\u6570\u6570\u7ec4 <code>answer</code>\uff0c\u5176\u4e2d <code>answer[i]</code> \u662f\u5f00\u59cb\u4f4d\u7f6e\u4e3a <code>i</code> \uff0c\u6309\u4f4d\u6216\u8fd0\u7b97\u7ed3\u679c\u6700\u5927\uff0c\u4e14\u957f\u5ea6\u6700\u77ed\u7684\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\u3002</p> <p>\u5728 LeetCode\u4e3b\u7ad9 \u6216 \u529b\u6263\u4e2d\u6587\u793e\u533a \u67e5\u770b\u8be5\u9898\u3002</p> \u89e3\u9898\u601d\u8def <p>\u65b9\u6cd5\u4e00\uff1a\u5229\u7528\u6216\u8fd0\u7b97\u7684\u6027\u8d28</p> Go <pre><code>package main\n\nfunc smallestSubarrays(nums []int) []int {\n    n := len(nums)\n    ans := make([]int, n)\n    for i, x := range nums {\n        ans[i] = 1\n        for j := i - 1; j &gt;= 0 &amp;&amp; nums[j]|x != nums[j]; j-- {\n            nums[j] |= x\n            ans[j] = i - j + 1\n        }\n    }\n    return ans\n}\n</code></pre> <p>\u65b9\u6cd5\u4e8c\uff1a\u5b50\u6570\u7ec4\u8fd0\u7b97\u6a21\u677f</p> Go <pre><code>package main\n\nfunc smallestSubarrays(nums []int) []int {\n    n := len(nums)\n    ans := make([]int, n)\n    // \u6bcf\u4e2a\u8fde\u7eed\u6bb5\u7684\u6309\u4f4d\u6216\u503c\u53ca\u8fde\u7eed\u6bb5\u7684\u5de6\u7aef\u70b9\n    type info struct{ or, i int }\n    a := make([]info, n)\n    for i := n - 1; i &gt;= 0; i-- { // \u679a\u4e3e\u5de6\u7aef\u70b9\uff0c\u65b9\u4fbf\u5904\u7406\u53f3\u7aef\u70b9\n        x := nums[i]\n        // \u8ba1\u7b97\u6bcf\u4e2a\u8fde\u7eed\u6bb5\u7684\u6309\u4f4d\u6216\u503c\n        for j := range a {\n            a[j].or |= x\n        }\n        // \u589e\u52a0\u65b0\u7684\u8fde\u7eed\u6bb5\n        a = append(a, info{x, i})\n        // \u539f\u5730\u53bb\u91cd\n        j := 0\n        for _, y := range a[1:] {\n            if y.or == a[j].or {\n                a[j].i = y.i\n            } else {\n                j++\n                a[j] = y\n            }\n        }\n        a = a[:j+1]\n        // \u8ba1\u7b97\u4ee5nums[i]\u4e3a\u5de6\u7aef\u70b9\u7684\u6309\u4f4d\u6216\u503c\u6700\u5927\u4e14\u957f\u5ea6\u6700\u5c0f\u7684\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\n        ans[i] = a[0].i - i + 1\n    }\n    return ans\n}\n</code></pre>"},{"location":"array/subarray/#lc1521-\u6700\u63a5\u8fd1\u76ee\u6807\u503c\u7684\u6309\u4f4d\u4e0e\u7ed3\u679c","title":"LC1521. \u6700\u63a5\u8fd1\u76ee\u6807\u503c\u7684\u6309\u4f4d\u4e0e\u7ed3\u679c","text":"\u95ee\u9898\u63cf\u8ff0 <p>\u7ed9\u4f60\u4e00\u4e2a\u957f\u5ea6\u4e3a <code>1\u2264n\u22641e5</code> \u7684\u6574\u6570\u6570\u7ec4 <code>arr</code> \u548c\u4e00\u4e2a\u6574\u6570 <code>0\u2264target\u22641e7</code>\uff0c<code>1\u2264arr[i]\u22641e6</code> \u3002 \u8bf7\u4f60\u8fd4\u56de <code>arr</code> \u7684\u6240\u6709\u975e\u7a7a\u5b50\u6570\u7ec4\u5bf9\u5e94\u7684 <code>|x - target|</code> \u7684\u6700\u5c0f\u503c\uff0c\u5176\u4e2d <code>x</code> \u662f\u5b50\u6570\u7ec4\u5143\u7d20\u7684\u6309\u4f4d\u4e0e\u7ed3\u679c\u3002</p> <p>\u5728 LeetCode\u4e3b\u7ad9 \u6216 \u529b\u6263\u4e2d\u6587\u793e\u533a \u67e5\u770b\u8be5\u9898\u3002</p> \u89e3\u9898\u601d\u8def <p>\u65b9\u6cd5\u4e00\uff1a\u5b50\u6570\u7ec4\u8fd0\u7b97\u6a21\u677f</p> Go <pre><code>package main\n\nimport \"math\"\n\nfunc closestToTarget(arr []int, target int) int {\n    ans := math.MaxInt\n    var a []int // \u8bb0\u5f55\u6bcf\u4e2a\u8fde\u7eed\u6bb5\u7684\u6309\u4f4d\u4e0e\u503c\n    for _, x := range arr {\n        // \u8ba1\u7b97\u6bcf\u4e2a\u8fde\u7eed\u6bb5\u7684\u6309\u4f4d\u4e0e\u503c\n        for j := range a {\n            a[j] &amp;= x\n        }\n        // \u589e\u52a0\u65b0\u7684\u8fde\u7eed\u6bb5\n        a = append(a, x)\n        // \u539f\u5730\u53bb\u91cd\n        j := 0\n        ans = min(ans, abs(a[0]-target))\n        for _, y := range a[1:] {\n            if y != a[j] {\n                j++\n                a[j] = y\n                ans = min(ans, abs(y-target))\n            }\n        }\n        a = a[:j+1]\n    }\n    return ans\n}\n\nfunc abs(x int) int {\n    if x &lt; 0 {\n        return -x\n    }\n    return x\n}\n\nfunc min(x, y int) int {\n    if x &lt; y {\n        return x\n    }\n    return y\n}\n</code></pre>"},{"location":"basic/binary/","title":"\u4e8c\u5206","text":""},{"location":"basic/binary/#\u4e8c\u5206\u6cd5","title":"\u4e8c\u5206\u6cd5","text":""},{"location":"basic/binary/#cf1379c-choosing-flowers","title":"CF1379C. Choosing flowers","text":"\u95ee\u9898\u63cf\u8ff0 <p>\u7b2c\u4e00\u884c\u8f93\u5165 \\(t(1\u2264t\u22641e4)\\) \u8868\u793a \\(t\\) \u7ec4\u7531\u7a7a\u884c\u5206\u9694\u7684\u6570\u636e\u3002\u6240\u6709 \\(t\\) \u7ec4\u6570\u636e\u7684 \\(m\\) \u4e4b\u548c \\(\u22641e5\\)\u3002 \u5bf9\u4e8e\u6bcf\u7ec4\u6570\u636e\uff1a \u7b2c\u4e00\u884c\u8f93\u5165 \\(n(1\u2264n\u22641e9)\\) \u548c \\(m(1\u2264m\u22641e5)\\) \u8868\u793a\u6709 \\(m\\) \u79cd\u7269\u54c1\uff0c\u6bcf\u79cd\u7269\u54c1\u6709\u65e0\u9650\u4e2a\uff0c\u4f60\u9700\u8981\u9009\u62e9 \\(n\\) \u4e2a\u3002 \u7136\u540e\u8f93\u5165 \\(m\\) \u884c\uff0c\u6bcf\u884c\u4e24\u4e2a\u6570\u5b57 \\(a[i]\\) \u548c \\(b[i]\\)\uff0c\u8303\u56f4\u5728 \\([0,1e9]\\)\u3002 \u5982\u679c\u7b2c \\(i\\) \u79cd\u7269\u54c1\u9009 \\(x(x&gt;0)\\) \u4e2a\uff0c\u6536\u76ca\u4e3a \\(a[i]+(x-1)*b[i]\\)\u3002 \u8f93\u51fa\u6700\u5927\u6536\u76ca\u3002</p> <p>\u5728 Codeforces \u6216 \u6d1b\u8c37 \u67e5\u770b\u8be5\u9898\u3002</p> \u89e3\u9898\u601d\u8def GoJava <pre><code>package main\n\nimport (\n    \"bufio\"\n    . \"fmt\"\n    \"os\"\n    \"sort\"\n)\n\nfunc main() {\n    in := bufio.NewReader(os.Stdin)\n    out := bufio.NewWriter(os.Stdout)\n    defer out.Flush()\n\n    var t, n, m, a, b int\n    for Fscan(in, &amp;t); t &gt; 0; t-- {\n        Fscan(in, &amp;n, &amp;m)\n        abs := make([][2]int, m)\n        for i := 0; i &lt; m; i++ {\n            Fscan(in, &amp;a, &amp;b)\n            abs[i] = [2]int{a, b}\n        }\n\n        // \u6309\u7167a\u964d\u5e8f\u6392\u5e8f\n        sort.Slice(abs, func(i, j int) bool { return abs[i][0] &gt; abs[j][0] })\n        // \u524d\u7f00\u548c\n        s := make([]int64, m+1)\n        for i, ab := range abs {\n            s[i+1] = s[i] + int64(ab[0])\n        }\n        var ans int64\n        for _, ab := range abs {\n            a, b = ab[0], ab[1]\n            // \u524di\u4e2a\u7269\u54c1\u7684a\u5927\u4e8e\u5f53\u524d\u7269\u54c1\u7684b\uff0c\u5982\u679c\u5f53\u524d\u7269\u54c1\u53d6\u591a\u4e2a\uff08\u591a\u4e8e1\u4e2a\uff09\uff0c\u5219\u524di\u4e2a\u7269\u54c1\u9700\u8981\u6bcf\u4e2a\u53d61\u4e2a\n            i := sort.Search(m, func(i int) bool { return abs[i][0] &lt;= b })\n            if i &gt;= n {\n                ans = max(ans, s[n])\n            } else if a &gt; b { // \u524di\u4e2a\u7269\u54c1\u5305\u542b\u5f53\u524d\u7269\u54c1\n                ans = max(ans, s[i]+int64(b)*int64(n-i))\n            } else { // \u524di\u4e2a\u7269\u54c1\u4e0d\u5305\u542b\u5f53\u524d\u7269\u54c1\n                ans = max(ans, s[i]+int64(a)+int64(b)*int64(n-i-1))\n            }\n        }\n        Fprintln(out, ans)\n    }\n}\n\nfunc max(x, y int64) int64 {\n    if x &gt; y {\n        return x\n    } else {\n        return y\n    }\n}\n</code></pre> <pre><code>import java.io.*;\nimport java.util.*;\n\npublic class Main {\n\n    static BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n    static PrintWriter out = new PrintWriter(System.out);\n\n    public static void main(String[] args) throws Exception {\n        int t = Integer.parseInt(in.readLine());\n        for (; t &gt; 0; t--) {\n            StringTokenizer nm = new StringTokenizer(in.readLine());\n            int n = Integer.parseInt(nm.nextToken());\n            int m = Integer.parseInt(nm.nextToken());\n            Integer[] as = new Integer[m];\n            int[][] abs = new int[m][2];\n            for (int i = 0; i &lt; m; i++) {\n                StringTokenizer tokenizer = new StringTokenizer(in.readLine());\n                abs[i][0] = Integer.parseInt(tokenizer.nextToken());\n                abs[i][1] = Integer.parseInt(tokenizer.nextToken());\n                as[i] = abs[i][0];\n            }\n\n            // \u6309\u7167a\u964d\u5e8f\u6392\u5e8f\n            Arrays.sort(as, (o1, o2) -&gt; Integer.compare(o2, o1));\n            // \u524d\u7f00\u548c\n            long[] s = new long[m + 1];\n            for (int i = 0; i &lt; m; i++) {\n                s[i + 1] = s[i] + as[i];\n            }\n            long ans = 0;\n            for (int[] ab : abs) {\n                int a = ab[0];\n                int b = ab[1];\n                // \u524di\u4e2a\u7269\u54c1\u7684a\u5927\u4e8e\u5f53\u524d\u7269\u54c1\u7684b\uff0c\u5982\u679c\u5f53\u524d\u7269\u54c1\u53d6\u591a\u4e2a\uff08\u591a\u4e8e1\u4e2a\uff09\uff0c\u5219\u524di\u4e2a\u7269\u54c1\u9700\u8981\u6bcf\u4e2a\u53d61\u4e2a\n                int i = Arrays.binarySearch(as, b, (o1, o2) -&gt; Integer.compare(o2, o1));\n                if (i &lt; 0) {\n                    i = -i - 1;\n                }\n                if (i &gt;= n) {\n                    ans = Math.max(ans, s[n]);\n                } else if (a &gt; b) { // \u524di\u4e2a\u7269\u54c1\u5305\u542b\u5f53\u524d\u7269\u54c1\n                    ans = Math.max(ans, s[i] + ((long) b) * (n - i));\n                } else { // \u524di\u4e2a\u7269\u54c1\u4e0d\u5305\u542b\u5f53\u524d\u7269\u54c1\n                    ans = Math.max(ans, s[i] + a + ((long) b) * (n - i - 1));\n                }\n            }\n            out.println(ans);\n            if (t &gt; 1) {\n                in.readLine(); // \u6bcf\u7ec4\u6570\u636e\u7531\u7a7a\u884c\u5206\u9694\n            }\n        }\n        out.flush();\n        out.close();\n        in.close();\n    }\n}\n</code></pre>"},{"location":"basic/binary/#\u4e09\u5206\u6cd5","title":"\u4e09\u5206\u6cd5","text":""},{"location":"basic/construction/","title":"\u6784\u9020","text":""},{"location":"basic/construction/#cf1325d-ehab-the-xorcist","title":"CF1325D. Ehab the Xorcist","text":"\u95ee\u9898\u63cf\u8ff0 <p>\u8f93\u5165 \\(u\\) \u548c \\(v\\) \u4e24\u4e2a\u6574\u6570\uff0c\u8303\u56f4\u5747\u5728 \\([0,1e18]\\) \u3002 \u6784\u9020\u4e00\u4e2a\u957f\u5ea6\u6700\u77ed\u7684\u6570\u7ec4\uff08\u5141\u8bb8\u4e3a\u7a7a\uff09\uff0c\u6ee1\u8db3\u5f02\u6216\u548c\u7b49\u4e8e \\(u\\) \uff0c\u548c\u7b49\u4e8e \\(v\\) \u3002 \u5982\u679c\u65e0\u6cd5\u6784\u9020\uff0c\u8f93\u51fa \\(-1\\) \uff1b\u5426\u5219\u7b2c\u4e00\u884c\u8f93\u51fa\u6570\u7ec4\u957f\u5ea6\uff0c\u7b2c\u4e8c\u884c\u8f93\u51fa\u4efb\u610f\u6ee1\u8db3\u8981\u6c42\u7684\u6570\u7ec4\uff08\u7a7a\u6570\u7ec4\u65e0\u9700\u8f93\u51fa\uff09\u3002</p> <p>\u5728 Codeforces \u6216 \u6d1b\u8c37 \u67e5\u770b\u8be5\u9898\u3002</p> \u89e3\u9898\u601d\u8def GoJava <pre><code>package main\n\nimport (\n    \"bufio\"\n    . \"fmt\"\n    \"os\"\n)\n\nfunc main() {\n    in := bufio.NewReader(os.Stdin)\n    out := bufio.NewWriter(os.Stdout)\n    defer out.Flush()\n\n    var u, v int\n    Fscan(in, &amp;u, &amp;v)\n    if u &gt; v {\n        Fprintln(out, -1)\n    } else if u == v {\n        if u == 0 {\n            Fprintln(out, 0)\n        } else {\n            Fprintln(out, 1)\n            Fprintln(out, u)\n        }\n    } else {\n        if d := v - u; d&amp;1 == 1 {\n            Fprintln(out, -1)\n        } else if d &gt;&gt;= 1; d&amp;u == 0 {\n            Fprintln(out, 2)\n            Fprintln(out, u|d, d)\n        } else {\n            Fprintln(out, 3)\n            Fprintln(out, u, d, d)\n        }\n    }\n}\n</code></pre> <pre><code>import java.io.*;\nimport java.util.*;\n\npublic class Main {\n\n    static BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n    static PrintWriter out = new PrintWriter(System.out);\n\n    public static void main(String[] args) throws Exception {\n        StringTokenizer uv = new StringTokenizer(in.readLine());\n        long u = Long.parseLong(uv.nextToken());\n        long v = Long.parseLong(uv.nextToken());\n        if (u &gt; v) {\n            out.println(-1);\n        } else if (u == v) {\n            if (u == 0) {\n                out.println(0);\n            } else {\n                out.println(1);\n                out.println(u);\n            }\n        } else {\n            long d = v - u;\n            if ((d &amp; 1) == 1) {\n                out.println(-1);\n            } else {\n                d &gt;&gt;= 1;\n                if ((d &amp; u) == 0) {\n                    out.println(2);\n                    out.printf(\"%d %d\", u | d, d);\n                } else {\n                    out.println(3);\n                    out.printf(\"%d %d %d\", u, d, d);\n                }\n            }\n        }\n        out.flush();\n        out.close();\n        in.close();\n    }\n}\n</code></pre>"},{"location":"basic/construction/#cf1554c-mikasa","title":"CF1554C. Mikasa","text":"\u95ee\u9898\u63cf\u8ff0 <p>\u8f93\u5165 \\(t(1\u2264t\u22643e4)\\) \u8868\u793a \\(t\\) \u7ec4\u6570\u636e\uff0c\u6bcf\u7ec4\u6570\u636e\u8f93\u5165\u4e24\u4e2a\u6574\u6570 \\(n\\) \u548c \\(m\\)\uff0c\u5747\u5728 \\([0,1e9]\\) \u8303\u56f4\u5185\u3002 \u5b9a\u4e49\u6570\u7ec4 \\(a = [n \\oplus 0, n \\oplus 1, n \\oplus 2, ..., n \\oplus m]\\)\u3002 \u8f93\u51fa\u4e0d\u5728 \\(a\\) \u4e2d\u7684\u6700\u5c0f\u975e\u8d1f\u6574\u6570\u3002</p> <p>\u5728 Codeforces \u6216 \u6d1b\u8c37 \u67e5\u770b\u8be5\u9898\u3002</p> \u89e3\u9898\u601d\u8def <p>\u65b9\u6cd5\u4e00\uff1a\u4ece\u9ad8\u5230\u4f4e\u6309\u4f4d\u6784\u9020</p> <p>\u6839\u636e\u9898\u610f\uff0c\u9700\u8981\u627e\u5230\u6700\u5c0f\u7684 \\(x\\) \uff0c\u4f7f\u5f97 \\(n \\oplus x &gt; m\\) \u3002 \u663e\u7136\uff0c\u5f53 \\(n &gt; m\\) \u65f6\uff0c\u7b54\u6848\u4e3a 0 \u3002 \u4ee4 \\(k = m+1\\) \uff0c\u5219 \\(x\\) \u9700\u8981\u6ee1\u8db3 \\(n \\oplus x \u2265 k\\)\u3002 \u5206\u522b\u4f7f\u7528 \\(n_i, k_i, x_i\\) \u8868\u793a \\(n, k, x\\) \u7684\u4e8c\u8fdb\u5236\u7b2c \\(i\\) \u4f4d\u3002 \u4ece\u9ad8\u4f4d\u5230\u4f4e\u4f4d\u6309\u4f4d\u6784\u9020\uff0c\u5bf9\u4e8e\u7b2c \\(i\\) \u4f4d\uff0c\u6709\u4ee5\u4e0b\u56db\u79cd\u60c5\u51b5\uff1a</p> \\(n_i\\) \\(k_i\\) \u5982\u4f55\u5904\u7406\u80fd\u591f\u4fdd\u8bc1 \\(n \\oplus x \u2265 k\\) \u4e14 \\(x\\) \u6700\u5c0f\uff1f 0 0 \u5c06 \\(x_i\\) \u8d4b\u4e3a 0 1 1 \u5c06 \\(x_i\\) \u8d4b\u4e3a 0 0 1 \u5c06 \\(x_i\\) \u8d4b\u4e3a 1 \uff0c\u5982\u679c\u8d4b\u4e3a 0 \u5c06\u4f1a\u5bfc\u81f4 \\(n \\oplus x &lt; k\\) 1 0 \u5c06 \\(x_i\\) \u8d4b\u4e3a 0 \uff0c\u6b64\u65f6\u5df2\u7ecf\u80fd\u4fdd\u8bc1 \\(n \\oplus x \u2265 k\\)\uff0c\u4e3a\u4e86\u4f7f \\(x\\) \u6700\u5c0f\uff0c\u9700\u8981\u5c06\u5269\u4f59\u7684\u4e8c\u8fdb\u5236\u4f4d\u5168\u90e8\u8d4b\u4e3a 0 GoJava <pre><code>package main\n\nimport (\n    \"bufio\"\n    . \"fmt\"\n    \"os\"\n)\n\nfunc main() {\n    in := bufio.NewReader(os.Stdin)\n    out := bufio.NewWriter(os.Stdout)\n    defer out.Flush()\n\n    var T, n, m int\n    for Fscan(in, &amp;T); T &gt; 0; T-- {\n        if Fscan(in, &amp;n, &amp;m); n &gt; m {\n            Fprintln(out, 0)\n        } else {\n            i, x := 1, 0\n            for m++; m&gt;&gt;i != 0; i++ {\n            }\n            for ; i &gt;= 0; i-- {\n                if n&gt;&gt;i&amp;1 == 0 &amp;&amp; m&gt;&gt;i&amp;1 == 1 {\n                    x |= 1 &lt;&lt; i\n                } else if n&gt;&gt;i&amp;1 == 1 &amp;&amp; m&gt;&gt;i&amp;1 == 0 {\n                    break\n                }\n            }\n            Fprintln(out, x)\n        }\n    }\n}\n</code></pre> <pre><code>import java.io.*;\nimport java.util.*;\n\npublic class Main {\n\n    static BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n    static PrintWriter out = new PrintWriter(System.out);\n\n    public static void main(String[] args) throws Exception {\n        int t = Integer.parseInt(in.readLine());\n        for (; t &gt; 0; t--) {\n            StringTokenizer tokenizer = new StringTokenizer(in.readLine());\n            int n = Integer.parseInt(tokenizer.nextToken());\n            int k = Integer.parseInt(tokenizer.nextToken()) + 1;\n            if (n &gt;= k) {\n                out.println(0);\n            } else {\n                int x = 0;\n                int i = 1;\n                for (; k &gt;&gt; i != 0; i++) {\n                }\n                for (; i &gt;= 0; i--) {\n                    int ni = (n &gt;&gt; i) &amp; 1;\n                    int ki = (k &gt;&gt; i) &amp; 1;\n                    if (ni == 0 &amp;&amp; ki == 1) {\n                        x |= 1 &lt;&lt; i;\n                    } else if (ni == 1 &amp;&amp; ki == 0) {\n                        break;\n                    }\n                }\n                out.println(x);\n            }\n        }\n        out.flush();\n        out.close();\n        in.close();\n    }\n}\n</code></pre> <p>\u65b9\u6cd5\u4e8c\uff1a\u57fa\u4e8e \\(n \\oplus m\\) \u6784\u9020</p> <p>\u6839\u636e\u9898\u610f\uff0c\u9700\u8981\u627e\u5230\u6700\u5c0f\u7684 \\(x\\) \uff0c\u4f7f\u5f97 \\(n \\oplus x &gt; m\\) \u3002 \u663e\u7136\uff0c\u5f53 \\(n &gt; m\\) \u65f6\uff0c\u7b54\u6848\u4e3a 0 \u3002 \u4ee4 \\(x = n \\oplus m\\) \uff0c\u6b64\u65f6 \\(x\\) \u4e0d\u6ee1\u8db3 \\(n \\oplus x &gt; m\\) \uff0c\u8003\u8651\u5982\u4f55\u4fee\u6539 \\(x\\) \u80fd\u591f\u6ee1\u8db3\u6761\u4ef6\u3002 \u5206\u522b\u4f7f\u7528 \\(n_i, m_i, x_i\\) \u8868\u793a \\(n, m, x\\) \u7684\u4e8c\u8fdb\u5236\u7b2c \\(i\\) \u4f4d\u3002 \u5bf9\u4e8e \\(x\\) \u7684\u6bcf\u4e00\u4e2a\u4e8c\u8fdb\u5236\u4f4d\uff0c\u6709\u4ee5\u4e0b\u56db\u79cd\u60c5\u51b5\uff1a</p> \\(n_i\\) \\(m_i\\) \u5982\u4f55\u4fee\u6539 \\(x\\) \u80fd\u591f\u589e\u5927 \\(n \\oplus x\\) \u4e14\u4fdd\u8bc1 \\(x\\) \u6700\u5c0f\uff1f 0 1 \u4e0d\u80fd\u4fee\u6539 \\(x_i\\) \uff0c\u5c06 \\(x_i\\) \u6539\u4e3a 0 \u4f1a\u5bfc\u81f4 \\(n \\oplus x\\) \u51cf\u5c0f 1 1 \u4e0d\u80fd\u4fee\u6539 \\(x_i\\) \uff0c\u5c06 \\(x_i\\) \u6539\u4e3a 1 \u4f1a\u5bfc\u81f4 \\(n \\oplus x\\) \u51cf\u5c0f 1 0 \u5c06 \\(x_i\\) \u6539\u4e3a 0 \u80fd\u591f\u589e\u5927 \\(n \\oplus x\\) \uff0c\u540c\u65f6\u5bfc\u81f4 \\(x\\) \u51cf\u5c0f\uff0c\u4e3a\u4e86\u4f7f \\(x\\) \u6700\u5c0f\uff0c\u9700\u8981\u4fee\u6539\u8be5\u60c5\u51b5\u7684\u6700\u9ad8\u4f4d\uff0c\u5e76\u5c06\u5176\u540e\u4f4e\u4f4d\u5168\u90e8\u7f6e 0 0 0 \u5c06 \\(x_i\\) \u6539\u4e3a 1 \u80fd\u591f\u589e\u5927 \\(n \\oplus x\\) \uff0c\u540c\u65f6\u5bfc\u81f4 \\(x\\) \u589e\u5927\uff0c\u4e3a\u4e86\u4f7f \\(x\\) \u6700\u5c0f\uff0c\u9700\u8981\u4fee\u6539\u8be5\u60c5\u51b5\u7684\u6700\u4f4e\u4f4d\uff0c\u5e76\u5c06\u5176\u540e\u4f4e\u4f4d\u5168\u90e8\u7f6e 0 <p>\u6ce8\u610f\uff0c\u7b2c\u4e09\u79cd\u60c5\u51b5\u662f\u6700\u4f18\u7684\uff0c\u4f46\u53ef\u80fd\u4e0d\u5b58\u5728\u8fd9\u79cd\u60c5\u51b5\uff0c\u6b64\u65f6\u9700\u8981\u901a\u8fc7\u7b2c\u56db\u79cd\u60c5\u51b5\u4fee\u6539 \\(x\\) \u3002</p> GoJava <pre><code>package main\n\nimport (\n    \"bufio\"\n    . \"fmt\"\n    \"os\"\n)\n\nfunc main() {\n    in := bufio.NewReader(os.Stdin)\n    out := bufio.NewWriter(os.Stdout)\n    defer out.Flush()\n\n    var T, n, m int\n    for Fscan(in, &amp;T); T &gt; 0; T-- {\n        if Fscan(in, &amp;n, &amp;m); n &gt; m {\n            Fprintln(out, 0)\n        } else {\n            x := n ^ m\n            if i := 0; n&amp;x == 0 {\n                for y := n | x; y&gt;&gt;i&amp;1 == 1; i++ {\n                }\n                Fprintln(out, (x&gt;&gt;i|1)&lt;&lt;i) // \u901a\u8fc7\u7b2c\u56db\u79cd\u60c5\u51b5\u4fee\u6539x\n            } else {\n                for y := n &amp; x; y&gt;&gt;i != 0; i++ {\n                }\n                Fprintln(out, x&gt;&gt;i&lt;&lt;i) // \u901a\u8fc7\u7b2c\u4e09\u79cd\u60c5\u51b5\u4fee\u6539x\n            }\n        }\n    }\n}\n</code></pre> <pre><code>import java.io.*;\nimport java.util.*;\n\npublic class Main {\n\n    static BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n    static PrintWriter out = new PrintWriter(System.out);\n\n    public static void main(String[] args) throws Exception {\n        int t = Integer.parseInt(in.readLine());\n        for (; t &gt; 0; t--) {\n            StringTokenizer tokenizer = new StringTokenizer(in.readLine());\n            int n = Integer.parseInt(tokenizer.nextToken());\n            int m = Integer.parseInt(tokenizer.nextToken());\n            if (n &gt; m) {\n                out.println(0);\n            } else {\n                int i = 0;\n                int x = n ^ m;\n                if ((n &amp; x) == 0) {\n                    for (int y = n | x; (y &gt;&gt; i &amp; 1) == 1; i++) {\n                    }\n                    out.println((x &gt;&gt; i | 1) &lt;&lt; i); // \u901a\u8fc7\u7b2c\u56db\u79cd\u60c5\u51b5\u4fee\u6539x\n                } else {\n                    for (int y = n &amp; x; (y &gt;&gt; i) != 0; i++) {\n                    }\n                    out.println(x &gt;&gt; i &lt;&lt; i); // \u901a\u8fc7\u7b2c\u4e09\u79cd\u60c5\u51b5\u4fee\u6539x\n                }\n            }\n        }\n        out.flush();\n        out.close();\n        in.close();\n    }\n}\n</code></pre>"},{"location":"basic/construction/#lc2375-\u6839\u636e\u6a21\u5f0f\u4e32\u6784\u9020\u6700\u5c0f\u6570\u5b57","title":"LC2375. \u6839\u636e\u6a21\u5f0f\u4e32\u6784\u9020\u6700\u5c0f\u6570\u5b57","text":"\u95ee\u9898\u63cf\u8ff0 <p>\u7ed9\u4f60\u4e0b\u6807\u4ece <code>0</code> \u5f00\u59cb\u3001\u957f\u5ea6\u4e3a <code>n(1\u2264n\u22648)</code> \u7684\u5b57\u7b26\u4e32 <code>pattern</code> \uff0c\u53ea\u5305\u542b <code>'I'</code> \u548c <code>'D'</code> \u3002 \u4f60\u9700\u8981\u6784\u9020\u4e00\u4e2a\u4e0b\u6807\u4ece <code>0</code> \u5f00\u59cb\u957f\u5ea6\u4e3a <code>n + 1</code> \u7684\u5b57\u7b26\u4e32\uff0c\u4e14\u5b83\u8981\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\uff1a</p> <ul> <li><code>num</code> \u5305\u542b\u6570\u5b57 <code>'1'</code> \u5230 <code>'9'</code> \uff0c\u5176\u4e2d\u6bcf\u4e2a\u6570\u5b57 \u81f3\u591a \u4f7f\u7528\u4e00\u6b21\u3002</li> <li>\u5982\u679c <code>pattern[i] == 'I'</code> \uff0c\u90a3\u4e48 <code>num[i] &lt; num[i + 1]</code> \u3002</li> <li>\u5982\u679c <code>pattern[i] == 'D'</code> \uff0c\u90a3\u4e48 <code>num[i] &gt; num[i + 1]</code> \u3002</li> </ul> <p>\u8bf7\u4f60\u8fd4\u56de\u6ee1\u8db3\u4e0a\u8ff0\u6761\u4ef6\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u5b57\u7b26\u4e32 <code>num</code> \u3002</p> <p>\u5728 LeetCode\u4e3b\u7ad9 \u6216 \u529b\u6263\u4e2d\u6587\u793e\u533a \u67e5\u770b\u8be5\u9898\u3002</p> \u89e3\u9898\u601d\u8def Go <pre><code>package main\n\nfunc smallestNumber(pattern string) string {\n    n := len(pattern)\n    bytes := make([]byte, n+1)\n    for i := range bytes {\n        bytes[i] = byte(i) + '1' // \u8981\u6c42\u5b57\u5178\u5e8f\u6700\u5c0f\uff0c\u5148\u6784\u9020\u6210\u5347\u5e8f\u6392\u5217\n    }\n    for i := 0; i &lt; n; i++ {\n        if pattern[i] == 'D' {\n            l := i\n            for i++; i &lt; n &amp;&amp; pattern[i] == 'D'; i++ {\n            }\n            // \u7ffb\u8f6c\u6570\u7ec4bytes\u4e2d\u7684\u8fde\u7eed'D'\u6bb5\n            for r := i; l &lt; r; r-- {\n                bytes[l], bytes[r] = bytes[r], bytes[l]\n                l++\n            }\n        }\n    }\n    return string(bytes)\n}\n</code></pre>"},{"location":"basic/construction/#cf1304d-shortest-and-longest-lis","title":"CF1304D. Shortest and Longest LIS","text":"\u95ee\u9898\u63cf\u8ff0 <p>\u8f93\u5165 \\(t(1\u2264t\u22641e4)\\) \u8868\u793a \\(t\\) \u7ec4\u6570\u636e\u3002\u6240\u6709\u6570\u636e\u7684 \\(n\\) \u4e4b\u548c \\(\u22642e5\\)\u3002 \u6bcf\u7ec4\u6570\u636e\u8f93\u5165 \\(n(2\u2264n\u22642e5)\\) \u548c\u957f\u4e3a \\(n-1\\) \u7684\u5b57\u7b26\u4e32 \\(s\\)\uff0c\u4ec5\u5305\u542b <code>'&lt;'</code> \u548c <code>'&gt;'</code>\u3002</p> <ul> <li><code>s[i] = '&lt;'</code> \u8868\u793a <code>a[i] &lt; a[i+1]</code> \uff1b</li> <li><code>s[i] = '&gt;'</code> \u8868\u793a <code>a[i] &gt; a[i+1]</code> \u3002</li> </ul> <p>\u8bf7\u6784\u9020\u4e24\u4e2a \\(1\\) ~ \\(n\\) \u7684\u6392\u5217\uff0c\u7b26\u5408\u5b57\u7b26\u4e32 \\(s\\)\uff0c\u4e14\u7b2c\u4e00\u4e2a\u6570\u7ec4\u7684 LIS \u6700\u77ed\uff0c\u7b2c\u4e8c\u4e2a\u6570\u7ec4\u7684 LIS \u6700\u957f\u3002 \u5982\u679c\u6709\u591a\u79cd\u6784\u9020\u65b9\u6848\uff0c\u8f93\u51fa\u4efb\u610f\u4e00\u79cd\u3002</p> <p>\u5728 Codeforces \u6216 \u6d1b\u8c37 \u67e5\u770b\u8be5\u9898\u3002</p> <p>\u5982\u679c\u89c9\u5f97\u8fd9\u9898\u6bd4\u8f83\u96be\uff0c\u53ef\u4ee5\u5148\u505a\u7b80\u5355\u7248\uff1aLC2375. \u6839\u636e\u6a21\u5f0f\u4e32\u6784\u9020\u6700\u5c0f\u6570\u5b57\u3002</p> \u89e3\u9898\u601d\u8def GoJava <pre><code>package main\n\nimport (\n    \"bufio\"\n    . \"fmt\"\n    \"os\"\n)\n\nfunc main() {\n    in := bufio.NewReader(os.Stdin)\n    out := bufio.NewWriter(os.Stdout)\n    defer out.Flush()\n\n    var t, n int\n    for Fscan(in, &amp;t); t &gt; 0; t-- {\n        var s string\n        Fscan(in, &amp;n, &amp;s)\n        a := make([]int, n)\n        b := make([]int, n)\n        for i := range a {\n            a[i] = n - i // \u6570\u7ec4a\u7684LIS\u6700\u77ed\uff0c\u5148\u6784\u9020\u6210\u964d\u5e8f\u6392\u5217\n            b[i] = i + 1 // \u6570\u7ec4b\u7684LIS\u6700\u957f\uff0c\u5148\u6784\u9020\u6210\u5347\u5e8f\u6392\u5217\n        }\n        reverse := func(arr []int, sign byte) {\n            for i := 0; i &lt; n-1; i++ {\n                if s[i] == sign {\n                    l := i\n                    for i++; i &lt; n-1 &amp;&amp; s[i] == sign; i++ {\n                    }\n                    for r := i; l &lt; r; r-- {\n                        arr[l], arr[r] = arr[r], arr[l]\n                        l++\n                    }\n                }\n            }\n        }\n        reverse(a, '&lt;') // \u7ffb\u8f6c\u6570\u7ec4a\u4e2d\u7684\u8fde\u7eed'&lt;'\u6bb5\n        reverse(b, '&gt;') // \u7ffb\u8f6c\u6570\u7ec4b\u4e2d\u7684\u8fde\u7eed'&gt;'\u6bb5\n        for _, x := range a {\n            Fprint(out, x, \" \")\n        }\n        Fprintln(out)\n        for _, x := range b {\n            Fprint(out, x, \" \")\n        }\n        Fprintln(out)\n    }\n}\n</code></pre> <pre><code>import java.io.*;\nimport java.util.*;\n\npublic class Main {\n\n    static BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n    static PrintWriter out = new PrintWriter(System.out);\n\n    static int n;\n    static String s;\n\n    public static void main(String[] args) throws Exception {\n        int t = Integer.parseInt(in.readLine());\n        for (; t &gt; 0; t--) {\n            StringTokenizer tokenizer = new StringTokenizer(in.readLine());\n            n = Integer.parseInt(tokenizer.nextToken());\n            s = tokenizer.nextToken();\n            int[] a = new int[n];\n            int[] b = new int[n];\n            for (int i = 0; i &lt; n; i++) {\n                a[i] = n - i; // \u6570\u7ec4a\u7684LIS\u6700\u77ed\uff0c\u5148\u6784\u9020\u6210\u964d\u5e8f\u6392\u5217\n                b[i] = i + 1; // \u6570\u7ec4b\u7684LIS\u6700\u957f\uff0c\u5148\u6784\u9020\u6210\u5347\u5e8f\u6392\u5217\n            }\n            reverse(a, '&lt;'); // \u7ffb\u8f6c\u6570\u7ec4a\u4e2d\u7684\u8fde\u7eed'&lt;'\u6bb5\n            reverse(b, '&gt;'); // \u7ffb\u8f6c\u6570\u7ec4b\u4e2d\u7684\u8fde\u7eed'&gt;'\u6bb5\n            for (int x : a) {\n                out.printf(\"%d \", x);\n            }\n            out.println();\n            for (int x : b) {\n                out.printf(\"%d \", x);\n            }\n            out.println();\n        }\n        out.flush();\n        out.close();\n        in.close();\n    }\n\n    public static void reverse(int[] arr, char sign) {\n        for (int i = 0; i &lt; n - 1; i++) {\n            if (s.charAt(i) == sign) {\n                int l = i;\n                for (i++; i &lt; n - 1 &amp;&amp; s.charAt(i) == sign; i++) {\n                }\n                for (int r = i; l &lt; r; r--) {\n                    int x = arr[l];\n                    arr[l] = arr[r];\n                    arr[r] = x;\n                    l++;\n                }\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"basic/construction/#cf1156b-ugly-pairs","title":"CF1156B. Ugly Pairs","text":"\u95ee\u9898\u63cf\u8ff0 <p>\u8f93\u5165 \\(t(1\u2264t\u2264100)\\) \u8868\u793a \\(t\\) \u7ec4\u6570\u636e\u3002\u6bcf\u7ec4\u6570\u636e\u8f93\u5165\u4e00\u4e2a\u957f\u5ea6\u8303\u56f4 \\([1,100]\\) \u7684\u5b57\u7b26\u4e32 \\(s\\)\uff0c\u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd\u3002 \u4f60\u9700\u8981\u91cd\u6392 \\(s\\) \u4e2d\u7684\u5b57\u6bcd\uff08\u6216\u8005\u4fdd\u6301 \\(s\\) \u4e0d\u53d8\uff09\uff0c\u4f7f\u5f97 \\(abs(s[i]-s[i+1]) \\neq 1\\)\uff0c\u5373\u4efb\u610f\u76f8\u90bb\u5b57\u6bcd\u5728\u5b57\u6bcd\u8868\u4e2d\u4e0d\u76f8\u90bb\u3002 \u8f93\u51fa\u4efb\u610f\u4e00\u4e2a\u7b26\u5408\u8981\u6c42\u7684\u7ed3\u679c\uff0c\u5982\u679c\u4e0d\u5b58\u5728\uff0c\u8f93\u51fa <code>No answer</code>\u3002</p> <p>\u5728 Codeforces \u6216 \u6d1b\u8c37 \u67e5\u770b\u8be5\u9898\u3002</p> \u89e3\u9898\u601d\u8def <p>\u5f53\u4e14\u4ec5\u5f53\u5b57\u7b26\u4e32 \\(s\\) \u4ec5\u7531 2 \u4e2a\u6216 3 \u4e2a\u76f8\u90bb\u5b57\u6bcd\u7ec4\u6210\u65f6\uff0c\u65e0\u6cd5\u5b8c\u6210\u6784\u9020\u3002</p> GoJava <pre><code>package main\n\nimport (\n    \"bufio\"\n    . \"fmt\"\n    \"os\"\n    \"sort\"\n)\n\nfunc main() {\n    in := bufio.NewReader(os.Stdin)\n    out := bufio.NewWriter(os.Stdout)\n    defer out.Flush()\n\n    var t int\n    var s []byte\n    for Fscan(in, &amp;t); t &gt; 0; t-- {\n        Fscan(in, &amp;s)\n        // \u6392\u5e8f\n        sort.Slice(s, func(i, j int) bool { return s[i] &lt; s[j] })\n        var a [2][]byte\n        for _, b := range s {\n            a[b&amp;1] = append(a[b&amp;1], b) // \u6309\u5e8f\u5947\u5076\u5206\u7ec4\n        }\n        x, y := a[0], a[1]\n        if m, n := len(x), len(y); m == 0 {\n            Fprintf(out, \"%s\\n\", y)\n        } else if n == 0 {\n            Fprintf(out, \"%s\\n\", x)\n        } else if abs(int(x[m-1])-int(y[0])) != 1 {\n            Fprintf(out, \"%s%s\\n\", x, y) // x+y\n        } else if abs(int(y[n-1])-int(x[0])) != 1 {\n            Fprintf(out, \"%s%s\\n\", y, x) // y+x\n        } else {\n            // \u5f53\u4e14\u4ec5\u5f53\u5b57\u7b26\u4e32s\u4ec5\u75312\u4e2a\u62163\u4e2a\u76f8\u90bb\u5b57\u6bcd\u7ec4\u6210\u65f6\uff0c\u65e0\u6cd5\u5b8c\u6210\u6784\u9020\n            Fprintln(out, \"No answer\")\n        }\n    }\n}\n\nfunc abs(x int) int {\n    if x &lt; 0 {\n        return -x\n    } else {\n        return x\n    }\n}\n</code></pre> <pre><code>import java.io.*;\nimport java.util.*;\n\npublic class Main {\n\n    static BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n    static PrintWriter out = new PrintWriter(System.out);\n\n    public static void main(String[] args) throws Exception {\n        int t = Integer.parseInt(in.readLine());\n        for (; t &gt; 0; t--) {\n            char[] s = in.readLine().toCharArray();\n            // \u6392\u5e8f\n            Arrays.sort(s);\n            int[] idx = new int[2];\n            char[][] a = new char[2][s.length];\n            for (char c : s) {\n                int j = c &amp; 1;\n                a[j][idx[j]] = c; // \u6309\u5e8f\u5947\u5076\u5206\u7ec4\n                idx[j]++;\n            }\n            int m = idx[0], n = idx[1];\n            String x = new String(a[0], 0, m);\n            String y = new String(a[1], 0, n);\n            if (m == 0) {\n                out.println(y);\n            } else if (n == 0) {\n                out.println(x);\n            } else if (Math.abs(a[0][m - 1] - a[1][0]) != 1) {\n                out.printf(\"%s%s%n\", x, y); // x+y\n            } else if (Math.abs(a[1][n - 1] - a[0][0]) != 1) {\n                out.printf(\"%s%s%n\", y, x); // y+x\n            } else {\n                // \u5f53\u4e14\u4ec5\u5f53\u5b57\u7b26\u4e32s\u4ec5\u75312\u4e2a\u62163\u4e2a\u76f8\u90bb\u5b57\u6bcd\u7ec4\u6210\u65f6\uff0c\u65e0\u6cd5\u5b8c\u6210\u6784\u9020\n                out.println(\"No answer\");\n            }\n        }\n        out.flush();\n        out.close();\n        in.close();\n    }\n}\n</code></pre>"},{"location":"basic/construction/#lc2573-\u627e\u51fa\u5bf9\u5e94-lcp-\u77e9\u9635\u7684\u5b57\u7b26\u4e32","title":"LC2573. \u627e\u51fa\u5bf9\u5e94 LCP \u77e9\u9635\u7684\u5b57\u7b26\u4e32","text":"\u95ee\u9898\u63cf\u8ff0 <p>\u5bf9\u4efb\u4e00\u7531 <code>1\u2264n\u22641e3</code> \u4e2a\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\u7ec4\u6210\u7684\u5b57\u7b26\u4e32 <code>word</code> \uff0c\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a <code>n x n</code> \u7684\u77e9\u9635\uff0c\u5e76\u6ee1\u8db3\uff1a</p> <ul> <li><code>lcp[i][j]</code> \u7b49\u4e8e\u5b50\u5b57\u7b26\u4e32 <code>word[i,...,n-1]</code> \u548c <code>word[j,...,n-1]</code> \u4e4b\u95f4\u7684\u6700\u957f\u516c\u5171\u524d\u7f00\u7684\u957f\u5ea6\u3002</li> </ul> <p>\u7ed9\u4f60\u4e00\u4e2a <code>n x n</code> \u7684\u77e9\u9635 <code>lcp</code> \u3002\u8fd4\u56de\u4e0e <code>lcp</code> \u5bf9\u5e94\u7684\u3001\u6309\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u5b57\u7b26\u4e32 <code>word</code> \u3002 \u5982\u679c\u4e0d\u5b58\u5728\u8fd9\u6837\u7684\u5b57\u7b26\u4e32\uff0c\u5219\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\u3002</p> <p>\u5728 LeetCode\u4e3b\u7ad9 \u6216 \u529b\u6263\u4e2d\u6587\u793e\u533a \u67e5\u770b\u8be5\u9898\u3002</p> \u89e3\u9898\u601d\u8def Go <pre><code>package main\n\nimport \"bytes\"\n\nfunc findTheString(lcp [][]int) string {\n    n := len(lcp)\n    // \u6784\u9020\n    s := make([]byte, n)\n    for c := byte('a'); c &lt;= 'z'; c++ {\n        if i := bytes.IndexByte(s, 0); i == -1 {\n            break // \u6784\u9020\u5b8c\u6210\n        } else {\n            for j := i; j &lt; n; j++ {\n                if lcp[i][j] != 0 {\n                    s[j] = c\n                }\n            }\n        }\n    }\n\n    if bytes.IndexByte(s, 0) != -1 {\n        return \"\" // \u65e0\u6cd5\u6784\u9020\u5b8c\u6210\n    }\n\n    // \u9a8c\u8bc1\n    // \u5982\u679cs[i] == s[j], lcp[i][j] = lcp[i+1][j+1] + 1; \u5982\u679cs[i] != s[j], lcp[i][j] = 0\n    for i := n - 1; i &gt;= 0; i-- {\n        for j := n - 1; j &gt;= 0; j-- {\n            expect := 0\n            if s[i] == s[j] {\n                expect = 1\n                if i+1 &lt; n &amp;&amp; j+1 &lt; n {\n                    expect += lcp[i+1][j+1]\n                }\n            }\n            if lcp[i][j] != expect {\n                return \"\" // \u51fa\u73b0\u51b2\u7a81\n            }\n        }\n    }\n\n    return string(s)\n}\n</code></pre>"},{"location":"basic/divide-and-conquer/","title":"\u9012\u5f52 &amp; \u5206\u6cbb","text":""},{"location":"basic/divide-and-conquer/#lc1096-\u82b1\u62ec\u53f7\u5c55\u5f00-ii","title":"LC1096. \u82b1\u62ec\u53f7\u5c55\u5f00 II","text":"\u95ee\u9898\u63cf\u8ff0 <p>\u82b1\u62ec\u53f7\u5c55\u5f00\u7684\u8868\u8fbe\u5f0f\u662f\u4e00\u4e2a\u7531\u82b1\u62ec\u53f7\u3001\u9017\u53f7\u548c\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\u7ec4\u6210\u7684\u5b57\u7b26\u4e32\u3002</p> \u8868\u8fbe\u5f0f\u7684\u8bed\u6cd5\u89c4\u5219 <ul> <li> <p>\u5982\u679c\u53ea\u7ed9\u51fa\u5355\u4e00\u7684\u5143\u7d20 x\uff0c\u90a3\u4e48\u8868\u8fbe\u5f0f\u8868\u793a\u7684\u5b57\u7b26\u4e32\u5c31\u53ea\u6709 \"x\"\u3002\\(R(x) = {x}\\)</p> <ul> <li>\u4f8b\u5982\uff0c\u8868\u8fbe\u5f0f \"a\" \u8868\u793a\u5b57\u7b26\u4e32 \"a\"\u3002</li> <li>\u800c\u8868\u8fbe\u5f0f \"w\" \u5c31\u8868\u793a\u5b57\u7b26\u4e32 \"w\"\u3002</li> </ul> </li> <li> <p>\u5f53\u4e24\u4e2a\u6216\u591a\u4e2a\u8868\u8fbe\u5f0f\u5e76\u5217\uff0c\u4ee5\u9017\u53f7\u5206\u9694\uff0c\u6211\u4eec\u53d6\u8fd9\u4e9b\u8868\u8fbe\u5f0f\u4e2d\u5143\u7d20\u7684\u5e76\u96c6\u3002\\(R({e_1,e_2,...}) = R(e_1) \u222a R(e_2) \u222a ...\\)</p> <ul> <li>\u4f8b\u5982\uff0c\u8868\u8fbe\u5f0f \"{a,b,c}\" \u8868\u793a\u5b57\u7b26\u4e32 \"a\",\"b\",\"c\"\u3002</li> <li>\u800c\u8868\u8fbe\u5f0f \"{{a,b},{b,c}}\" \u4e5f\u53ef\u4ee5\u8868\u793a\u5b57\u7b26\u4e32 \"a\",\"b\",\"c\"\u3002</li> </ul> </li> <li> <p>\u8981\u662f\u4e24\u4e2a\u6216\u591a\u4e2a\u8868\u8fbe\u5f0f\u76f8\u63a5\uff0c\u4e2d\u95f4\u6ca1\u6709\u9694\u5f00\u65f6\uff0c\u6211\u4eec\u4ece\u8fd9\u4e9b\u8868\u8fbe\u5f0f\u4e2d\u5404\u53d6\u4e00\u4e2a\u5143\u7d20\u4f9d\u6b21\u8fde\u63a5\u5f62\u6210\u5b57\u7b26\u4e32\u3002\\(R(e_1 + e_2) = {a + b\\ for (a, b)\\ in\\ R(e_1) \u00d7 R(e_2)}\\)</p> <ul> <li>\u4f8b\u5982\uff0c\u8868\u8fbe\u5f0f \"{a,b}{c,d}\" \u8868\u793a\u5b57\u7b26\u4e32 \"ac\",\"ad\",\"bc\",\"bd\"\u3002</li> </ul> </li> <li> <p>\u8868\u8fbe\u5f0f\u4e4b\u95f4\u5141\u8bb8\u5d4c\u5957\uff0c\u5355\u4e00\u5143\u7d20\u4e0e\u8868\u8fbe\u5f0f\u7684\u8fde\u63a5\u4e5f\u662f\u5141\u8bb8\u7684\u3002</p> <ul> <li>\u4f8b\u5982\uff0c\u8868\u8fbe\u5f0f \"a{b,c,d}\" \u8868\u793a\u5b57\u7b26\u4e32 \"ab\",\"ac\",\"ad\"\u200b\u200b\u200b\u200b\u200b\u200b\u3002</li> <li>\u4f8b\u5982\uff0c\u8868\u8fbe\u5f0f \"a{b,c}{d,e}f{g,h}\" \u53ef\u4ee5\u8868\u793a\u5b57\u7b26\u4e32 \"abdfg\", \"abdfh\", \"abefg\", \"abefh\", \"acdfg\", \"acdfh\", \"acefg\", \"acefh\"\u3002</li> </ul> </li> </ul> <p>\u7ed9\u4f60\u4e00\u4e2a\u957f\u5ea6\u4e3a \\(n(1\u2264n\u226460)\\) \u7684\u5408\u6cd5\u8868\u8fbe\u5f0f\uff0c\u8fd4\u56de\u5b83\u6240\u8868\u793a\u7684\u6240\u6709\u5b57\u7b26\u4e32\u7ec4\u6210\u7684\u6709\u5e8f\u5217\u8868\u3002</p> <p>\u5728 LeetCode\u4e3b\u7ad9 \u6216 \u529b\u6263\u4e2d\u6587\u793e\u533a \u67e5\u770b\u8be5\u9898\u3002</p> \u89e3\u9898\u601d\u8def <p>\u65b9\u6cd5\u4e00\uff1a\u81ea\u9876\u5411\u4e0b\u9012\u5f52</p> Go <pre><code>package main\n\nimport (\n    \"sort\"\n    \"unicode\"\n)\n\nfunc braceExpansionII(expression string) []string {\n    idx, n := 0, len(expression)\n\n    // expr: term[,term]   \u6bcf\u4e2a\u8868\u8fbe\u5f0f\u7531\u591a\u4e2aterm\u4ee5\u9017\u53f7\u5206\u9694\n    // term: item[item]    \u6bcf\u4e2aterm\u7531\u591a\u4e2aitem\u76f8\u63a5\uff0c\u65e0\u9017\u53f7\u5206\u9694\n    // item: letter|{expr} \u6bcf\u4e2aitem\u53ef\u4ee5\u662f\u5355\u4e2a\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\uff0c\u6216\u8005\u7531\u82b1\u62ec\u53f7\u5305\u88f9\u7684\u8868\u8fbe\u5f0f\n    var expr func() []string\n    var term func() []string\n    var item func() []string\n\n    expr = func() (ret []string) {\n        ret = append(ret, term()...)\n        for idx &lt; n &amp;&amp; expression[idx] == ',' {\n            idx++\n            ret = append(ret, term()...)\n        }\n        return\n    }\n\n    term = func() (ret []string) {\n        var tmp []string\n        ret = []string{\"\"}\n        for idx &lt; n &amp;&amp; (expression[idx] == '{' || unicode.IsLetter(rune(expression[idx]))) {\n            sub := item()\n            for _, s := range ret {\n                for _, t := range sub {\n                    tmp = append(tmp, s+t)\n                }\n            }\n            ret, tmp = tmp, nil\n        }\n        return\n    }\n\n    item = func() (ret []string) {\n        if expression[idx] == '{' {\n            idx++\n            ret = expr()\n        } else {\n            ret = []string{string(expression[idx])}\n        }\n        idx++\n        return\n    }\n\n    set := make(map[string]struct{})\n    for _, s := range expr() {\n        set[s] = struct{}{}\n    }\n    ans := make([]string, 0, len(set))\n    for s := range set {\n        ans = append(ans, s)\n    }\n    sort.Strings(ans)\n    return ans\n}\n</code></pre> <p>\u65b9\u6cd5\u4e8c\uff1a\u81ea\u5e95\u5411\u4e0a\u5c55\u5f00</p> Go <pre><code>package main\n\nimport (\n    \"sort\"\n    \"strings\"\n)\n\nfunc braceExpansionII(expression string) []string {\n    set := make(map[string]struct{})\n    var dfs func(expr string)\n    dfs = func(expr string) {\n        r := strings.IndexByte(expr, '}')\n        if r == -1 {\n            set[expr] = struct{}{}\n        } else {\n            l := r - 1\n            for ; expr[l] != '{'; l-- {\n            }\n            for _, s := range strings.Split(expr[l+1:r], \",\") {\n                dfs(expr[:l] + s + expr[r+1:])\n            }\n        }\n    }\n    dfs(expression)\n\n    ans := make([]string, 0, len(set))\n    for s := range set {\n        ans = append(ans, s)\n    }\n    sort.Strings(ans)\n    return ans\n}\n</code></pre>"},{"location":"basic/enumerate/","title":"\u679a\u4e3e","text":""},{"location":"basic/enumerate/#lc1615-\u6700\u5927\u7f51\u7edc\u79e9","title":"LC1615. \u6700\u5927\u7f51\u7edc\u79e9","text":"\u95ee\u9898\u63cf\u8ff0 <p>\u7ed9\u4f60 <code>n(2\u2264n\u2264100)</code> \u5ea7\u57ce\u5e02\uff0c\u7f16\u53f7\u4ece <code>0</code> \u5f00\u59cb\u3002 \u7ed9\u4f60\u4e00\u4e2a\u6570\u7ec4 <code>roads</code> \uff0c\u5176\u4e2d \\(roads[i] = [a_i, b_i]\\) \u90fd\u8868\u793a\u5728\u57ce\u5e02 \\(a_i\\) \u548c \\(b_i\\) \u4e4b\u95f4\u6709\u4e00\u6761\u53cc\u5411\u9053\u8def\u3002 \u9898\u76ee\u4fdd\u8bc1\u6bcf\u5bf9\u57ce\u5e02\u4e4b\u95f4\u6700\u591a\u53ea\u6709\u4e00\u6761\u9053\u8def\u76f8\u8fde\u3002 \u4efb\u610f\u4e24\u5ea7\u4e0d\u540c\u57ce\u5e02\u6784\u6210\u7684\u57ce\u5e02\u5bf9\u7684\u7f51\u7edc\u79e9\u5b9a\u4e49\u4e3a\uff1a\u4e0e\u8fd9\u4e24\u5ea7\u57ce\u5e02\u76f4\u63a5\u76f8\u8fde\u7684\u9053\u8def\u603b\u6570\u3002 \u5982\u679c\u5b58\u5728\u4e00\u6761\u9053\u8def\u76f4\u63a5\u8fde\u63a5\u8fd9\u4e24\u5ea7\u57ce\u5e02\uff0c\u5219\u8fd9\u6761\u9053\u8def\u53ea\u8ba1\u7b97\u4e00\u6b21\u3002 \u8bf7\u8fd4\u56de\u6240\u6709\u4e0d\u540c\u57ce\u5e02\u5bf9\u4e2d\u7684\u6700\u5927\u7f51\u7edc\u79e9\u3002</p> <p>\u5728 LeetCode\u4e3b\u7ad9 \u6216 \u529b\u6263\u4e2d\u6587\u793e\u533a \u67e5\u770b\u8be5\u9898\u3002</p> \u89e3\u9898\u601d\u8def Go <pre><code>package main\n\nfunc maximalNetworkRank(n int, roads [][]int) (ans int) {\n    degrees := make([]int, n)\n    connect := make([][]int, n)\n    for i := range connect {\n        connect[i] = make([]int, n)\n    }\n    for _, road := range roads {\n        x, y := road[0], road[1]\n        connect[x][y] = 1\n        connect[y][x] = 1\n        degrees[x]++\n        degrees[y]++\n    }\n    for i := 0; i &lt; n; i++ {\n        for j := i + 1; j &lt; n; j++ {\n            rank := degrees[i] + degrees[j] - connect[i][j]\n            ans = max(ans, rank)\n        }\n    }\n    return\n}\n\nfunc max(x, y int) int {\n    if x &gt; y {\n        return x\n    } else {\n        return y\n    }\n}\n</code></pre>"},{"location":"basic/enumerate/#lc829-\u8fde\u7eed\u6574\u6570\u6c42\u548c","title":"LC829. \u8fde\u7eed\u6574\u6570\u6c42\u548c","text":"\u95ee\u9898\u63cf\u8ff0 <p>\u7ed9\u5b9a\u4e00\u4e2a\u6b63\u6574\u6570 <code>n(1\u2264n\u22641e9)</code> \uff0c\u8fd4\u56de\u8fde\u7eed\u6b63\u6574\u6570\u6ee1\u8db3\u6240\u6709\u6570\u5b57\u4e4b\u548c\u4e3a <code>n</code> \u7684\u7ec4\u6570 \u3002</p> <p>\u5728 LeetCode\u4e3b\u7ad9 \u6216 \u529b\u6263\u4e2d\u6587\u793e\u533a \u67e5\u770b\u8be5\u9898\u3002</p> \u89e3\u9898\u601d\u8def <p>\u679a\u4e3e\u548c\u4e3a <code>n</code> \u7684\u8fde\u7eed\u6b63\u6574\u6570\u7684\u957f\u5ea6 <code>k</code> \u3002</p> Go <pre><code>package main\n\nfunc consecutiveNumbersSum(n int) (ans int) {\n    // k*(k+1) &lt;= n&lt;&lt;1\u4fdd\u8bc1k\u4e2a\u8fde\u7eed\u6b63\u6574\u6570\u7684\u6700\u5c0f\u548c\u4e0d\u8d85\u8fc7n\n    for k := 1; k*(k+1) &lt;= n&lt;&lt;1; k++ {\n        // \u5224\u65ad\u6b63\u6574\u6570n\u662f\u5426\u53ef\u4ee5\u8868\u793a\u6210k\u4e2a\u8fde\u7eed\u6b63\u6574\u6570\u4e4b\u548c\n        if k&amp;1 == 0 {\n            // \u5224\u65ad\u662f\u5426\u53ef\u4ee5\u8868\u793a\u6210\u5076\u6570\u4e2a\u8fde\u7eed\u6b63\u6574\u6570\u4e4b\u548c\n            if n%k != 0 &amp;&amp; (n&lt;&lt;1)%k == 0 {\n                ans++\n            }\n        } else {\n            // \u5224\u65ad\u662f\u5426\u53ef\u4ee5\u8868\u793a\u6210\u5947\u6570\u4e2a\u8fde\u7eed\u6b63\u6574\u6570\u4e4b\u548c\n            if n%k == 0 {\n                ans++\n            }\n        }\n    }\n    return\n}\n</code></pre>"},{"location":"basic/enumerate/#lc1638-\u7edf\u8ba1\u53ea\u5dee\u4e00\u4e2a\u5b57\u7b26\u7684\u5b50\u4e32\u6570\u76ee","title":"LC1638. \u7edf\u8ba1\u53ea\u5dee\u4e00\u4e2a\u5b57\u7b26\u7684\u5b50\u4e32\u6570\u76ee","text":"\u95ee\u9898\u63cf\u8ff0 <p>\u7ed9\u4f60\u4e24\u4e2a\u957f\u5ea6\u4e3a <code>n(1\u2264n\u2264100)</code> \u4e14\u4ec5\u5305\u542b\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\u7684\u5b57\u7b26\u4e32 <code>s</code> \u548c <code>t</code> \uff0c\u8bf7\u4f60\u627e\u51fa <code>s</code> \u4e2d\u7684\u975e\u7a7a\u5b50\u4e32\u7684\u6570\u76ee\uff0c\u8fd9\u4e9b\u5b50\u4e32\u6ee1\u8db3\u66ff\u6362 \u4e00\u4e2a\u4e0d\u540c\u5b57\u7b26 \u4ee5\u540e\uff0c\u662f <code>t</code> \u4e32\u7684\u5b50\u4e32\u3002\u6362\u8a00\u4e4b\uff0c\u8bf7\u4f60\u627e\u5230 <code>s</code> \u548c <code>t</code> \u4e32\u4e2d \u6070\u597d \u53ea\u6709\u4e00\u4e2a\u5b57\u7b26\u4e0d\u540c\u7684\u5b50\u5b57\u7b26\u4e32\u5bf9\u7684\u6570\u76ee\u3002</p> <p>\u5728 LeetCode\u4e3b\u7ad9 \u6216 \u529b\u6263\u4e2d\u6587\u793e\u533a \u67e5\u770b\u8be5\u9898\u3002</p> \u89e3\u9898\u601d\u8def <p>\u4e24\u4e2a\u5b50\u4e32\u957f\u5ea6\u76f8\u7b49\uff0c\u6070\u597d\u6709\u4e00\u4e2a\u5b57\u7b26\u4e0d\u540c\u3002</p> <p>\u65b9\u6cd5\u4e00\uff1a\u66b4\u529b\u679a\u4e3e</p> Go <pre><code>package main\n\nfunc countSubstrings(s string, t string) (ans int) {\n    m, n := len(s), len(t)\n    for i := 0; i &lt; m; i++ { // \u679a\u4e3es\u5b50\u4e32\u7684\u8d77\u59cb\u7d22\u5f15\n        for j := 0; j &lt; n; j++ { // \u679a\u4e3et\u5b50\u4e32\u7684\u8d77\u59cb\u7d22\u5f15\n            for k, d := 0, 0; i+k &lt; m &amp;&amp; j+k &lt; n &amp;&amp; d &lt; 2; k++ { // \u679a\u4e3e\u5b50\u4e32\u957f\u5ea6\n                if s[i+k] != t[j+k] {\n                    d++\n                }\n                if d == 1 {\n                    ans++\n                }\n            }\n        }\n    }\n    return\n}\n</code></pre> <p>\u65b9\u6cd5\u4e8c\uff1a\u52a8\u6001\u89c4\u5212 + \u679a\u4e3e</p> Go <pre><code>package main\n\nfunc countSubstrings(s string, t string) (ans int) {\n    m, n := len(s), len(t)\n    // l[i][j]\u8868\u793as[i]\u548ct[j]\u5de6\u4fa7\uff08\u4e0d\u5305\u542b\uff09\u8fde\u7eed\u76f8\u540c\u5b57\u7b26\u7684\u4e2a\u6570\n    l := make([][]int, m+1)\n    l[0] = make([]int, n+1)\n    for i, a := range s {\n        l[i+1] = make([]int, n+1)\n        for j, b := range t {\n            if a == b {\n                l[i+1][j+1] = l[i][j] + 1\n            }\n        }\n    }\n    // r[i][j]\u8868\u793as[i]\u548ct[j]\u53f3\u4fa7\uff08\u5305\u542b\uff09\u8fde\u7eed\u76f8\u540c\u5b57\u7b26\u7684\u4e2a\u6570\n    r := make([][]int, m+1)\n    r[m] = make([]int, n+1)\n    for i := m - 1; i &gt;= 0; i-- {\n        r[i] = make([]int, n+1)\n        for j := n - 1; j &gt;= 0; j-- {\n            if s[i] == t[j] {\n                r[i][j] = r[i+1][j+1] + 1\n            }\n        }\n    }\n    // \u679a\u4e3e\u4e0d\u540c\u5b57\u7b26\n    for i, a := range s {\n        for j, b := range t {\n            if a != b {\n                // \u7d2f\u52a0\u4ee5a\u548cb\u4e3a\u4e0d\u540c\u5b57\u7b26\u7684\u5b50\u4e32\u5bf9\u7684\u4e2a\u6570\n                ans += (l[i][j] + 1) * (r[i+1][j+1] + 1)\n            }\n        }\n    }\n    return\n}\n</code></pre> <p>\u65b9\u6cd5\u4e09\uff1a\u603b\u7ed3\u89c4\u5f8b + \u679a\u4e3e</p> Go <pre><code>package main\n\nfunc countSubstrings(s string, t string) (ans int) {\n    m, n := len(s), len(t)\n    // i\u8868\u793as\u5b50\u4e32\u7684\u7ed3\u675f\u7d22\u5f15\uff0cj\u8868\u793at\u5b50\u4e32\u7684\u7ed3\u675f\u7d22\u5f15\uff0ck\u8868\u793as\u5b50\u4e32\u7684\u8d77\u59cb\u7d22\u5f15\n    // \u679a\u4e3e d = i - j \uff0c\u5219 j = i - d\n    for d := 1 - n; d &lt; m; d++ {\n        i := max(d, 0)\n        // \u679a\u4e3es\u5b50\u4e32\u7684\u7ed3\u675f\u7d22\u5f15\n        // k0\u8868\u793as\u5b50\u4e32\u7ed3\u675f\u7d22\u5f15i\u5f80\u5de6\u7b2c\u4e8c\u4e2a\u4e0d\u540c\u5b57\u7b26\u7684\u7d22\u5f15\n        // k1\u8868\u793as\u5b50\u4e32\u7ed3\u675f\u7d22\u5f15i\u5f80\u5de6\u7b2c\u4e00\u4e2a\u4e0d\u540c\u5b57\u7b26\u7684\u7d22\u5f15\n        for k0, k1 := i-1, i-1; i &lt; m &amp;&amp; i-d &lt; n; i++ {\n            if s[i] != t[i-d] {\n                k0, k1 = k1, i\n            }\n            ans += k1 - k0 // (k0, k1]\u533a\u95f4\u5185\u7684k\u90fd\u53ef\u4ee5\u4f5c\u4e3as\u5b50\u4e32\u7684\u8d77\u59cb\u7d22\u5f15\n        }\n    }\n    return ans\n}\n\nfunc max(x, y int) int {\n    if x &gt; y {\n        return x\n    } else {\n        return y\n    }\n}\n</code></pre>"},{"location":"basic/enumerate/#cf118c-fancy-number","title":"CF118C. Fancy Number","text":"\u95ee\u9898\u63cf\u8ff0 <p>\u7b2c\u4e00\u884c\u8f93\u5165 \\(n\\) \u548c \\(k\\) \u4e24\u4e2a\u6574\u6570\uff0c\\((2\u2264k\u2264n\u22641e4)\\) \u3002 \u7b2c\u4e8c\u884c\u8f93\u5165\u957f\u5ea6\u4e3a \\(n\\) \u7684\u5b57\u7b26\u4e32 \\(s\\)\uff0c\u4ec5\u5305\u542b '0'~'9'\u3002 \u6bcf\u6b21\u64cd\u4f5c\u4f60\u53ef\u4ee5\u628a\u4e00\u4e2a s[i] \u4fee\u6539\u6210\u4efb\u610f '0'~'9'\uff0c\u5047\u8bbe\u4fee\u6539\u6210 \\(b\\) \uff0c\u5219\u82b1\u8d39\u4e3a \\(abs(s[i]-b)\\) \u3002 \u8981\u4f7f \\(s\\) \u4e2d\u81f3\u5c11\u6709 \\(k\\) \u4e2a\u76f8\u540c\u5b57\u7b26\uff0c\u4e14\u5728\u603b\u82b1\u8d39\u6700\u5c0f\u7684\u524d\u63d0\u4e0b\uff0c\u8ba9\u4fee\u6539\u540e\u7684 \\(s\\) \u7684\u5b57\u5178\u5e8f\u5c3d\u91cf\u5c0f\u3002 \u8f93\u51fa\u6700\u5c0f\u603b\u82b1\u8d39\u4ee5\u53ca\u4fee\u6539\u540e\u7684 \\(s\\) \u3002</p> <p>\u5728 Codeforces \u6216 \u6d1b\u8c37 \u67e5\u770b\u8be5\u9898\u3002</p> \u89e3\u9898\u601d\u8def <p>\u679a\u4e3e\u8981\u4fee\u6539\u51fa \\(k\\) \u4e2a\u7684\u5b57\u7b26 \\(b\\) \u3002</p> GoJava <pre><code>package main\n\nimport (\n    \"bufio\"\n    \"bytes\"\n    . \"fmt\"\n    \"os\"\n)\n\nfunc main() {\n    in := bufio.NewReader(os.Stdin)\n    out := bufio.NewWriter(os.Stdout)\n    defer out.Flush()\n\n    var n, k int\n    s := make([]byte, n)\n    Fscan(in, &amp;n, &amp;k, &amp;s)\n    var indexes [10][]int\n    for i, c := range s {\n        indexes[c&amp;15] = append(indexes[c&amp;15], i)\n    }\n    var mt []byte\n    var mc int = 1e5\n    for i, pos := range indexes {\n        // \u66ff\u6362\u51fak\u4e2ab\n        b := byte(i + '0')\n        cnt, cost := len(pos), 0\n        t := make([]byte, n)\n        copy(t, s)\n        for d := 1; cnt &lt; k; d++ {\n            // i+d =&gt; i \u5b57\u5178\u5e8f\u964d\u4f4e\uff0c\u4ece\u524d\u5f80\u540e\u66ff\u6362\n            if i+d &lt; 10 {\n                p := indexes[i+d]\n                for j, m := 0, len(p); j &lt; m &amp;&amp; cnt &lt; k; j++ {\n                    t[p[j]] = b\n                    cost += d\n                    cnt++\n                }\n            }\n            // i-d =&gt; i \u5b57\u5178\u5e8f\u5347\u9ad8\uff0c\u4ece\u540e\u5f80\u524d\u66ff\u6362\n            if i-d &gt;= 0 {\n                p := indexes[i-d]\n                for j := len(p) - 1; j &gt;= 0 &amp;&amp; cnt &lt; k; j-- {\n                    t[p[j]] = b\n                    cost += d\n                    cnt++\n                }\n            }\n        }\n        if cost &lt; mc {\n            mc, mt = cost, t\n        } else if cost == mc &amp;&amp; bytes.Compare(mt, t) == 1 {\n            mt = t\n        }\n    }\n    Fprintf(out, \"%d\\n%s\", mc, mt)\n}\n</code></pre> <pre><code>import java.io.*;\nimport java.util.*;\n\npublic class Main {\n\n    static BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n    static PrintWriter out = new PrintWriter(System.out);\n\n    public static void main(String[] args) throws Exception {\n        StringTokenizer nk = new StringTokenizer(in.readLine());\n        int n = Integer.parseInt(nk.nextToken());\n        int k = Integer.parseInt(nk.nextToken());\n        String s = in.readLine();\n        List&lt;Integer&gt;[] indexes = new List[10];\n        for (int i = 0; i &lt; 10; i++) {\n            indexes[i] = new ArrayList&lt;&gt;();\n        }\n        for (int i = 0; i &lt; n; i++) {\n            indexes[s.charAt(i) &amp; 15].add(i);\n        }\n        String mt = \"\";\n        int mc = (int) 1e5;\n        for (char b = '0'; b &lt;= '9'; b++) {\n            // \u66ff\u6362\u51fak\u4e2ab\n            int cnt = indexes[b &amp; 15].size();\n            int cost = 0;\n            char[] t = s.toCharArray();\n            for (char d = 1; cnt &lt; k; d++) {\n                if (b + d &lt;= '9') { // i+d =&gt; i \u5b57\u5178\u5e8f\u964d\u4f4e\uff0c\u4ece\u524d\u5f80\u540e\u66ff\u6362\n                    List&lt;Integer&gt; p = indexes[(b + d) &amp; 15];\n                    for (int i = 0, m = p.size(); i &lt; m &amp;&amp; cnt &lt; k; i++) {\n                        t[p.get(i)] = b;\n                        cost += d;\n                        cnt++;\n                    }\n                }\n                if (b - d &gt;= '0') { // i-d =&gt; i \u5b57\u5178\u5e8f\u5347\u9ad8\uff0c\u4ece\u540e\u5f80\u524d\u66ff\u6362\n                    List&lt;Integer&gt; p = indexes[(b - d) &amp; 15];\n                    for (int i = p.size() - 1; i &gt;= 0 &amp;&amp; cnt &lt; k; i--) {\n                        t[p.get(i)] = b;\n                        cost += d;\n                        cnt++;\n                    }\n                }\n            }\n            String str = new String(t);\n            if (mc &gt; cost) {\n                mc = cost;\n                mt = str;\n            } else if (mc == cost &amp;&amp; mt.compareTo(str) &gt; 0) {\n                mt = str;\n            }\n        }\n        out.println(mc);\n        out.println(mt);\n        out.flush();\n        out.close();\n        in.close();\n    }\n}\n</code></pre>"},{"location":"basic/enumerate/#lc1625-\u64cd\u4f5c\u540e\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u5b57\u7b26\u4e32","title":"LC1625. \u64cd\u4f5c\u540e\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u5b57\u7b26\u4e32","text":"\u95ee\u9898\u63cf\u8ff0 <p>\u7ed9\u4f60\u4e00\u4e2a\u957f\u5ea6\u4e3a <code>n(2\u2264n\u2264100)</code> \u7684\u5b57\u7b26\u4e32 <code>s</code> \u4ee5\u53ca\u4e24\u4e2a\u6574\u6570 <code>a(0\u2264a\u22649)</code> \u548c <code>b(1\u2264b&lt;n)</code> \u3002 \u5176\u4e2d\uff0c<code>n</code> \u4e3a\u5076\u6570\uff0c\u4e14\u5b57\u7b26\u4e32 <code>s</code> \u4ec5\u7531\u6570\u5b57 <code>0</code> \u5230 <code>9</code> \u7ec4\u6210\u3002\u4f60\u53ef\u4ee5\u5728 <code>s</code> \u4e0a\u6309\u4efb\u610f\u987a\u5e8f\u591a\u6b21\u6267\u884c\u4e0b\u9762\u4e24\u4e2a\u64cd\u4f5c\u4e4b\u4e00\uff1a</p> <ul> <li>\u7d2f\u52a0\uff1a\u5c06 <code>a</code> \u52a0\u5230 <code>s</code> \u4e2d\u6240\u6709\u4e0b\u6807\u4e3a\u5947\u6570\u7684\u5143\u7d20\u4e0a\uff08\u4e0b\u6807\u4ece <code>0</code> \u5f00\u59cb\uff09\u3002\u6570\u5b57\u4e00\u65e6\u8d85\u8fc7 <code>9</code> \u5c31\u4f1a\u53d8\u6210 <code>0</code>\uff0c\u5982\u6b64\u5faa\u73af\u5f80\u590d\u3002\u4f8b\u5982\uff0c<code>s = \"3456\"</code> \u4e14 <code>a = 5</code>\uff0c\u5219\u6267\u884c\u6b64\u64cd\u4f5c\u540e <code>s</code> \u53d8\u6210 <code>\"3951\"</code>\u3002</li> <li>\u8f6e\u8f6c\uff1a\u5c06 <code>s</code> \u5411\u53f3\u8f6e\u8f6c <code>b</code> \u4f4d\u3002\u4f8b\u5982\uff0c<code>s = \"3456\"</code> \u4e14 <code>b = 1</code>\uff0c\u5219\u6267\u884c\u6b64\u64cd\u4f5c\u540e <code>s</code> \u53d8\u6210 <code>\"6345\"</code>\u3002</li> </ul> <p>\u8bf7\u4f60\u8fd4\u56de\u5728 <code>s</code> \u4e0a\u6267\u884c\u4e0a\u8ff0\u64cd\u4f5c\u4efb\u610f\u6b21\u540e\u53ef\u4ee5\u5f97\u5230\u7684\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u5b57\u7b26\u4e32\u3002</p> <p>\u5728 LeetCode\u4e3b\u7ad9 \u6216 \u529b\u6263\u4e2d\u6587\u793e\u533a \u67e5\u770b\u8be5\u9898\u3002</p> \u89e3\u9898\u601d\u8def <p>\u7d2f\u52a0\u64cd\u4f5c\u6267\u884c <code>10 / GCD(10, a)</code> \u6b21\u540e\u590d\u539f\u3002 \u8f6e\u8f6c\u64cd\u4f5c\u6267\u884c <code>n / GCD(n, b)</code> \u6b21\u540e\u590d\u539f\u3002 <code>b</code> \u4e3a\u5076\u6570\u65f6\uff0c\u53ea\u6709\u5947\u6570\u7d22\u5f15\u4f4d\u7f6e\u53ef\u4ee5\u6267\u884c\u7d2f\u52a0\u64cd\u4f5c\uff1b <code>b</code> \u4e3a\u5947\u6570\u65f6\uff0c\u5947\u6570\u7d22\u5f15\u4f4d\u7f6e\u548c\u5076\u6570\u7d22\u5f15\u4f4d\u7f6e\u53ef\u4ee5\u72ec\u7acb\u6267\u884c\u7d2f\u52a0\u64cd\u4f5c\u3002</p> Go <pre><code>package main\n\nimport \"bytes\"\n\nfunc findLexSmallestString(s string, a int, b int) string {\n    n := len(s)\n    c1 := 10 / gcd(10, a) // \u7d2f\u52a0c1\u6b21\u540e\u590d\u539f\n    c2 := n / gcd(n, b)   // \u8f6e\u8f6cc2\u6b21\u540e\u590d\u539f\n    ans := []byte(s)\n    tmp := []byte(s + s) // \u65b9\u4fbf\u622a\u53d6\u8f6e\u8f6c\u540e\u7684\u5b57\u7b26\u4e32\n    rotate := func() {\n        for i := 0; i &lt; c2; i++ {\n            l := ((n-i*b)%n + n) % n // \u8f6e\u8f6ci\u6b21\u540e\u7684\u8d77\u59cb\u4f4d\u7f6e\n            if bytes.Compare(ans, tmp[l:l+n]) == 1 {\n                copy(ans, tmp[l:l+n])\n            }\n        }\n    }\n    for i := 0; i &lt; c1; i++ {\n        // \u7d2f\u52a0\u5947\u6570\u7d22\u5f15\u4f4d\u7f6e\n        for j := 1; j &lt; n&lt;&lt;1; j += 2 {\n            tmp[j] = (tmp[j]&amp;15+byte(a))%10 + '0'\n        }\n        if b&amp;1 == 0 {\n            rotate() // \u6267\u884c\u8f6e\u8f6c\u64cd\u4f5c\uff0c\u53d6\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u5b57\u7b26\u4e32\n        } else {\n            for j := 0; j &lt; c1; j++ {\n                // \u7d2f\u52a0\u5076\u6570\u7d22\u5f15\u4f4d\u7f6e\n                for k := 0; k &lt; n&lt;&lt;1; k += 2 {\n                    tmp[k] = (tmp[k]&amp;15+byte(a))%10 + '0'\n                }\n                rotate() // \u6267\u884c\u8f6e\u8f6c\u64cd\u4f5c\uff0c\u53d6\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u5b57\u7b26\u4e32\n            }\n        }\n    }\n    return string(ans)\n}\n\nfunc gcd(x, y int) int {\n    for y &gt; 0 {\n        x, y = y, x%y\n    }\n    return x\n}\n</code></pre>"},{"location":"basic/enumerate/#cf1626d-martial-arts-tournament","title":"CF1626D. Martial Arts Tournament","text":"\u95ee\u9898\u63cf\u8ff0 <p>\u7b2c\u4e00\u884c\u8f93\u5165 \\(t(1\u2264t\u22641e4)\\) \u8868\u793a \\(t\\) \u7ec4\u6570\u636e\u3002\u6240\u6709\u6570\u636e\u7684 \\(n\\) \u4e4b\u548c \\(\u22642e5\\)\u3002 \u6bcf\u7ec4\u6570\u636e\u7b2c\u4e00\u884c\u8f93\u5165 \\(n(1\u2264n\u22642e5)\\) \uff0c\u7b2c\u4e8c\u884c\u8f93\u5165\u957f\u4e3a \\(n\\) \u7684\u6574\u6570\u6570\u7ec4 \\(a(1\u2264a[i]\u2264n)\\) \u3002 \u4f60\u9700\u8981\u9009\u62e9\u4e24\u4e2a\u6574\u6570 \\(x\\ y\\ (x&lt;y)\\) \uff0c\u628a \\(a\\) \u4e2d\u5c0f\u4e8e \\(x\\) \u7684\u6570\u5206\u4e3a\u4e00\u7ec4\uff0c\u5927\u4e8e\u7b49\u4e8e \\(y\\) \u7684\u5206\u4e3a\u4e00\u7ec4\uff0c\u5176\u4f59\u7684\u5206\u4e3a\u4e00\u7ec4\uff0c\u4e00\u5171\u4e09\u7ec4\u3002 \u5bf9\u6bcf\u4e00\u7ec4\uff0c\u5982\u679c\u7ec4\u7684\u5927\u5c0f\u4e0d\u662f \\(2\\) \u7684\u5e42\u6b21\uff0c\u5219\u589e\u52a0\u5230\u6700\u8fd1\u7684 \\(2\\) \u7684\u5e42\u6b21\uff0c\u82b1\u8d39\u4e3a\u589e\u91cf\u3002\u6bd4\u5982 \\(5\\) \u8865\u9f50\u5230 \\(8\\) \uff0c\u82b1\u8d39\u4e3a \\(8-5=3\\) \u3002\u5982\u679c\u5df2\u7ecf\u662f \\(2\\) \u7684\u5e42\u6b21\uff0c\u5219\u82b1\u8d39\u4e3a \\(0\\) \u3002 \u8ba1\u7b97\u82b1\u8d39\u4e4b\u548c\u7684\u6700\u5c0f\u503c\u3002</p> <p>\u5728 Codeforces \u6216 \u6d1b\u8c37 \u67e5\u770b\u8be5\u9898\u3002</p> \u89e3\u9898\u601d\u8def <p>\u679a\u4e3e \\(x\\) \u548c \\(y\\) \u663e\u7136\u4f1a\u8d85\u65f6\uff0c\u4e0d\u59a8\u6362\u4e2a\u601d\u8def\uff0c\u679a\u4e3e\u4e0e\u7ec4\u7684\u5927\u5c0f\u6700\u63a5\u8fd1\u7684 \\(2\\) \u7684\u5e42\u6b21\u3002</p> GoJava <pre><code>package main\n\nimport (\n    \"bufio\"\n    . \"fmt\"\n    \"math/bits\"\n    \"os\"\n    \"sort\"\n)\n\nfunc main() {\n    in := bufio.NewReader(os.Stdin)\n    out := bufio.NewWriter(os.Stdout)\n    defer out.Flush()\n\n    var T, n int\n    for Fscan(in, &amp;T); T &gt; 0; T-- {\n        Fscan(in, &amp;n)\n        a := make([]int, n)\n        for i := range a {\n            Fscan(in, &amp;a[i])\n        }\n        sort.Ints(a)\n\n        ans := cost(n) + 2\n        // \u679a\u4e3e\u4e0e\u7b2c\u4e00\u7ec4\u7684\u5927\u5c0f\u6700\u63a5\u8fd1\u76842\u7684\u5e42\u6b21\n        for i := 1; ans != 0 &amp;&amp; i &lt; n; i &lt;&lt;= 1 {\n            cx := sort.SearchInts(a, a[i]) // &lt; x = a[i]\n            ans = min(ans, i-cx+cost(n-cx)+1)\n            // \u679a\u4e3e\u4e0e\u7b2c\u4e8c\u7ec4\u7684\u5927\u5c0f\u6700\u63a5\u8fd1\u76842\u7684\u5e42\u6b21\n            for j := 1; ans != 0 &amp;&amp; cx+j &lt; n; j &lt;&lt;= 1 {\n                cy := sort.SearchInts(a, a[cx+j]) // &lt; y = a[cx+j]\n                ans = min(ans, i+j-cy+cost(n-cy))\n            }\n        }\n        Fprintln(out, ans)\n    }\n}\n\nfunc cost(x int) int {\n    l := bits.Len32(uint32(x))\n    if x == 1&lt;&lt;l&gt;&gt;1 {\n        return 0\n    } else {\n        return 1&lt;&lt;l - x\n    }\n}\n\nfunc min(x, y int) int {\n    if x &lt; y {\n        return x\n    } else {\n        return y\n    }\n}\n</code></pre> <pre><code>import java.io.*;\nimport java.util.*;\nimport java.util.function.Function;\n\npublic class Main {\n\n    static BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n    static PrintWriter out = new PrintWriter(System.out);\n\n    public static void main(String[] args) throws Exception {\n        int T = Integer.parseInt(in.readLine());\n        for (; T &gt; 0; T--) {\n            int n = Integer.parseInt(in.readLine());\n            StringTokenizer at = new StringTokenizer(in.readLine());\n            Integer[] a = new Integer[n];\n            for (int i = 0; i &lt; n; i++) {\n                a[i] = Integer.parseInt(at.nextToken());\n            }\n            Arrays.sort(a);\n\n            int ans = cost(n) + 2;\n            // \u679a\u4e3e\u4e0e\u7b2c\u4e00\u7ec4\u7684\u5927\u5c0f\u6700\u63a5\u8fd1\u76842\u7684\u5e42\u6b21\n            for (int i = 1; ans != 0 &amp;&amp; i &lt; n; i &lt;&lt;= 1) {\n                int cx = search(a, a[i]); // &lt; x = a[i]\n                ans = Math.min(ans, i - cx + cost(n - cx) + 1);\n                // \u679a\u4e3e\u4e0e\u7b2c\u4e8c\u7ec4\u7684\u5927\u5c0f\u6700\u63a5\u8fd1\u76842\u7684\u5e42\u6b21\n                for (int j = 1; ans != 0 &amp;&amp; cx + j &lt; n; j &lt;&lt;= 1) {\n                    int cy = search(a, a[cx + j]); // &lt; y = a[cx+j]\n                    ans = Math.min(ans, i + j - cy + cost(n - cy));\n                }\n            }\n            out.println(ans);\n        }\n        out.flush();\n        out.close();\n        in.close();\n    }\n\n    public static int bits(int x) {\n        int c = 0;\n        for (; x != 0; x &gt;&gt;= 1) {\n            c++;\n        }\n        return c;\n    }\n\n    public static int cost(int x) {\n        int l = bits(x);\n        if (x == 1 &lt;&lt; l &gt;&gt; 1) {\n            return 0;\n        } else {\n            return (1 &lt;&lt; l) - x;\n        }\n    }\n\n    public static &lt;T extends Comparable&lt;T&gt;&gt; int search(T[] arr, T x) {\n        return search(arr.length, i -&gt; arr[i].compareTo(x) != -1);\n    }\n\n    public static int search(int n, Function&lt;Integer, Boolean&gt; f) {\n        int i = 0, j = n;\n        while (i &lt; j) {\n            int h = i + ((j - i) &gt;&gt; 1);\n            if (!f.apply(h)) {\n                i = h + 1; // f(i-1) = false\n            } else {\n                j = h; // f(j) = true\n            }\n        }\n        return i;\n    }\n}\n</code></pre>"},{"location":"basic/enumerate/#cf1181c-flag","title":"CF1181C. Flag","text":"\u95ee\u9898\u63cf\u8ff0 <p>\u7b2c\u4e00\u884c\u8f93\u5165 \\(n\\) \u548c \\(m\\) \u4e24\u4e2a\u6574\u6570\uff0c\\((1\u2264n,m\u22641e3)\\) \u3002 \u63a5\u4e0b\u6765 \\(n\\) \u884c\u6bcf\u884c\u8f93\u5165\u4e00\u4e2a\u957f\u5ea6\u4e3a \\(m\\) \u7684\u5b57\u7b26\u4e32\uff0c\u5f62\u6210\u4e00\u4e2a \\(n \\times m\\) \u7684\u5b57\u7b26\u77e9\u9635\uff0c\u5143\u7d20\u90fd\u662f\u5c0f\u5199\u5b57\u6bcd\u3002 \u5b9a\u4e49\u300c\u56fd\u65d7\u300d\u4e3a\u4e00\u4e2a \\(3 \\times h\\) \u884c\u7684\u5b50\u77e9\u9635\uff0c\u524d \\(h\\) \u884c\u7684\u5b57\u7b26\u90fd\u76f8\u540c\uff0c\u4e2d\u95f4 \\(h\\) \u884c\u7684\u5b57\u7b26\u90fd\u76f8\u540c\uff0c\u540e \\(h\\) \u884c\u7684\u5b57\u7b26\u90fd\u76f8\u540c\uff0c\u5b83\u4eec\u5206\u522b\u8bb0\u4f5c A B C\uff0c\u8981\u6c42 A \u548c B \u7684\u5b57\u7b26\u4e0d\u540c\uff0cB \u548c C \u7684\u5b57\u7b26\u4e0d\u540c\uff08A \u548c C \u65e0\u8981\u6c42\uff09\u3002 \u8f93\u51fa\u662f\u56fd\u65d7\u7684\u5b50\u77e9\u9635\u7684\u6570\u91cf\u3002</p> <p>\u5728 Codeforces \u6216 \u6d1b\u8c37 \u67e5\u770b\u8be5\u9898\u3002</p> \u89e3\u9898\u601d\u8def <p>\u6309\u5217\u679a\u4e3e\u56fd\u65d7\u53f3\u8fb9\u754c\uff0c\u6309\u884c\u679a\u4e3e\u4e2d\u95f4 \\(h\\) \u884c\u3002</p> GoJava <pre><code>package main\n\nimport (\n    \"bufio\"\n    . \"fmt\"\n    \"os\"\n)\n\nfunc main() {\n    in := bufio.NewReader(os.Stdin)\n    out := bufio.NewWriter(os.Stdout)\n    defer out.Flush()\n\n    var n, m, ans int\n    Fscan(in, &amp;n, &amp;m)\n    a := make([]string, n)\n    for i := range a {\n        Fscan(in, &amp;a[i])\n    }\n\n    lec := make([]int, n)\n    for j := 0; j &lt; m; j++ { // \u679a\u4e3e\u53f3\u8fb9\u754c\n        // lec[i]\u8868\u793a\u7b2ci\u884c\u7b2cj\u5217\u5f80\u5de6\u8fde\u7eed\u76f8\u540c\u5b57\u7b26\u7684\u4e2a\u6570\n        for i, row := range a {\n            if j != 0 &amp;&amp; row[j] == row[j-1] {\n                lec[i]++\n            } else {\n                lec[i] = 1\n            }\n        }\n\n    next:\n        for i := 0; i &lt; n; {\n            i0 := i      // \u4e2d\u95f4h\u884c\u7684\u7b2c\u4e00\u884c\n            mn := lec[i] // \u5de6\u4fa7\u6700\u77ed\u540c\u8272\u957f\u5ea6\n            // \u5904\u7406\u4e2d\u95f4h\u884c\n            for i++; i &lt; n &amp;&amp; a[i][j] == a[i0][j]; i++ {\n                mn = min(mn, lec[i])\n            }\n            // \u6b64\u65f6i\u6307\u5411\u540eh\u884c\u7684\u7b2c\u4e00\u884c\n            if h := i - i0; i0 &lt; h || i+h &gt; n {\n                continue // \u524d\u9762\u6216\u540e\u9762\u4e0d\u591fh\u884c\n            } else {\n                i0--\n                // \u5904\u7406\u524dh\u884c\n                for k := i0; k &gt; i0-h; k-- {\n                    if a[k][j] != a[i0][j] {\n                        continue next // \u524dh\u884c\u4e0d\u540c\u8272\n                    }\n                    mn = min(mn, lec[k])\n                }\n                // \u5904\u7406\u540eh\u884c\n                for k := i; k &lt; i+h; k++ {\n                    if a[k][j] != a[i][j] {\n                        continue next // \u540eh\u884c\u4e0d\u540c\u8272\n                    }\n                    mn = min(mn, lec[k])\n                }\n                ans += mn\n            }\n        }\n    }\n\n    Fprintln(out, ans)\n}\n\nfunc min(x, y int) int {\n    if x &lt; y {\n        return x\n    } else {\n        return y\n    }\n}\n</code></pre> <pre><code>import java.io.*;\nimport java.util.*;\n\npublic class Main {\n\n    static BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n    static PrintWriter out = new PrintWriter(System.out);\n\n    public static void main(String[] args) throws Exception {\n        StringTokenizer nm = new StringTokenizer(in.readLine());\n        int n = Integer.parseInt(nm.nextToken());\n        int m = Integer.parseInt(nm.nextToken());\n        char[][] a = new char[n][];\n        for (int i = 0; i &lt; n; i++) {\n            a[i] = in.readLine().toCharArray();\n        }\n\n        int ans = 0;\n        int[] lec = new int[n];\n        for (int j = 0; j &lt; m; j++) { // \u679a\u4e3e\u53f3\u8fb9\u754c\n            // lec[i]\u8868\u793a\u7b2ci\u884c\u7b2cj\u5217\u5f80\u5de6\u8fde\u7eed\u76f8\u540c\u5b57\u7b26\u7684\u4e2a\u6570\n            for (int i = 0; i &lt; n; i++) {\n                if (j != 0 &amp;&amp; a[i][j] == a[i][j - 1]) {\n                    lec[i]++;\n                } else {\n                    lec[i] = 1;\n                }\n            }\n            next: for (int i = 0; i &lt; n;) {\n                int i0 = i; // \u4e2d\u95f4h\u884c\u7684\u7b2c\u4e00\u884c\n                int mn = lec[i]; // \u5de6\u4fa7\u6700\u77ed\u540c\u8272\u957f\u5ea6\n                // \u5904\u7406\u4e2d\u95f4h\u884c\n                for (i++; i &lt; n &amp;&amp; a[i][j] == a[i0][j]; i++) {\n                    mn = Math.min(mn, lec[i]);\n                }\n                // \u6b64\u65f6i\u6307\u5411\u540eh\u884c\u7684\u7b2c\u4e00\u884c\n                int h = i - i0;\n                if (i0 &lt; h || i + h &gt; n) {\n                    continue; // \u524d\u9762\u6216\u540e\u9762\u4e0d\u591fh\u884c\n                } else {\n                    // \u5904\u7406\u524dh\u884c\n                    for (int k = --i0; k &gt; i0 - h; k--) {\n                        if (a[k][j] != a[i0][j]) {\n                            continue next; // \u524dh\u884c\u4e0d\u540c\u8272\n                        }\n                        mn = Math.min(mn, lec[k]);\n                    }\n                    // \u5904\u7406\u540eh\u884c\n                    for (int k = i; k &lt; i + h; k++) {\n                        if (a[k][j] != a[i][j]) {\n                            continue next; // \u540eh\u884c\u4e0d\u540c\u8272\n                        }\n                        mn = Math.min(mn, lec[k]);\n                    }\n                    ans += mn;\n                }\n            }\n        }\n        out.println(ans);\n        out.flush();\n        out.close();\n        in.close();\n    }\n}\n</code></pre>"},{"location":"basic/enumerate/#lc2552-\u7edf\u8ba1\u4e0a\u5347\u56db\u5143\u7ec4","title":"LC2552. \u7edf\u8ba1\u4e0a\u5347\u56db\u5143\u7ec4","text":"\u95ee\u9898\u63cf\u8ff0 <p>\u7ed9\u4f60\u4e00\u4e2a\u957f\u5ea6\u4e3a <code>4\u2264n\u22644e3</code> \u4e0b\u6807\u4ece <code>0</code> \u5f00\u59cb\u7684\u6574\u6570\u6570\u7ec4 <code>nums</code> \uff0c\u5176\u4e2d\u5305\u542b <code>1</code> \u5230 <code>n</code> \u7684 \u6240\u6709 \u6570\u5b57\u3002 \u5982\u679c\u4e00\u4e2a\u56db\u5143\u7ec4 <code>(i, j, k, l)</code> \u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\uff0c\u6211\u4eec\u79f0\u5b83\u662f\u4e0a\u5347\u7684\uff1a</p> <ul> <li><code>0 &lt;= i &lt; j &lt; k &lt; l &lt; n</code> \u4e14</li> <li><code>nums[i] &lt; nums[k] &lt; nums[j] &lt; nums[l]</code> \u3002</li> </ul> <p>\u8bf7\u4f60\u8fd4\u56de\u4e0a\u5347\u56db\u5143\u7ec4\u7684\u6570\u76ee\u3002</p> <p>\u5728 LeetCode\u4e3b\u7ad9 \u6216 \u529b\u6263\u4e2d\u6587\u793e\u533a \u67e5\u770b\u8be5\u9898\u3002</p> \u89e3\u9898\u601d\u8def Go <pre><code>package main\n\nfunc countQuadruplets(nums []int) int64 {\n    ans := 0\n    n := len(nums)\n    // cnt[j]\u8868\u793a\u524d\u5e8f\u6ee1\u8db3\u6761\u4ef6\u7684\u4e09\u5143\u7ec4(i, j, k)\u7684\u4e2a\u6570\n    cnt := make([]int, n)\n    for q, x := range nums {\n        ltk := 0\n        for p, y := range nums[:q] { // p &lt; q\n            if x &gt; y {\n                ans += cnt[p] // \u8ba1\u7b97\u5408\u6cd5\u56db\u5143\u7ec4(_, j=p, _, l=q)\u7684\u4e2a\u6570\n                ltk++         // \u8ba1\u7b97\u6ee1\u8db3i=p&lt;q=k\u4e14nums[i]=y&lt;x=nums[k]\u7684\u4e8c\u5143\u7ec4(i=p, k=q)\u7684\u4e2a\u6570\n            } else {\n                cnt[p] += ltk // \u8ba1\u7b97\u6ee1\u8db3i&lt;j=p&lt;q=k\u4e14nums[i]&lt;nums[k]=x&lt;y=nums[j]\u7684\u4e09\u5143\u7ec4(_, j=p, k=q)\u7684\u4e2a\u6570\n            }\n        }\n    }\n    return int64(ans)\n}\n</code></pre>"},{"location":"basic/enumerate/#lc1330-\u7ffb\u8f6c\u5b50\u6570\u7ec4\u5f97\u5230\u6700\u5927\u7684\u6570\u7ec4\u503c","title":"LC1330. \u7ffb\u8f6c\u5b50\u6570\u7ec4\u5f97\u5230\u6700\u5927\u7684\u6570\u7ec4\u503c","text":"\u95ee\u9898\u63cf\u8ff0 <p>\u7ed9\u4f60\u4e00\u4e2a\u957f\u5ea6\u4e3a <code>1\u2264n\u22643e4</code> \u7684\u6574\u6570\u6570\u7ec4 <code>nums</code> \uff0c<code>-1e5\u2264nums[i]\u22641e5</code> \u3002 \u6570\u7ec4\u503c \u5b9a\u4e49\u4e3a\u6240\u6709\u6ee1\u8db3 <code>0\u2264i&lt;n-1</code> \u7684 <code>|nums[i]-nums[i+1]|</code> \u7684\u548c\u3002 \u4f60\u53ef\u4ee5\u9009\u62e9\u7ed9\u5b9a\u6570\u7ec4\u7684\u4efb\u610f\u5b50\u6570\u7ec4\uff0c\u5e76\u5c06\u8be5\u5b50\u6570\u7ec4\u7ffb\u8f6c\u3002\u4f46\u4f60\u53ea\u80fd\u6267\u884c\u8fd9\u4e2a\u64cd\u4f5c \u4e00\u6b21 \u3002 \u8bf7\u4f60\u8ba1\u7b97\u53ef\u4ee5\u5f97\u5230\u7684\u6700\u5927 \u6570\u7ec4\u503c \u3002</p> <p>\u5728 LeetCode\u4e3b\u7ad9 \u6216 \u529b\u6263\u4e2d\u6587\u793e\u533a \u67e5\u770b\u8be5\u9898\u3002</p> \u89e3\u9898\u601d\u8def <p>\u7ffb\u8f6c \\(nums[i..j]\\) \uff0c\u5148\u4e0d\u8003\u8651\u8fb9\u754c\u60c5\u51b5\uff0c\u8bb0 \\(a=nums[i-1], b=nums[i], c=nums[j], d=nums[j+1]\\) \u3002 \u5f88\u660e\u663e\uff0c\u7ffb\u8f6c\u540e\u6570\u7ec4\u503c\u7684\u53d8\u5316\u91cf\u4e3a \\(x = |a-c| + |b-d| - |a-b| - |c-d|\\) \uff0c\u95ee\u9898\u8f6c\u5316\u4e3a\u5c06 \\(x\\) \u6700\u5927\u5316\u3002</p> <p>\u6839\u636e \\(a,b,c,d\\) \u7684\u5927\u5c0f\u5173\u7cfb\uff0c\u5171\u6709 \\(4! = 24\\) \u79cd\u60c5\u51b5\uff0c\u4e0b\u9762\u5206\u60c5\u51b5\u8ba8\u8bba\uff1a</p> <p>\u7b2c 1 \u7c7b \\(\\max(a,b) \u2264 \\min(c,d)\\)</p> \\[ \\begin{align*}     x &amp;= |a-c| + |b-d| - |a-b| - |c-d| \\\\       &amp;= (c-a) + (d-b) - |a-b| - |c-d| \\\\       &amp;= (c+d-|c-d|) - (a+b+|a-b|) \\\\       &amp;= 2 \\times (\\min(c,d) - \\max(a,b)) \u2265 0 \\end{align*} \\] <p>\u6839\u636e\u5bf9\u79f0\u6027\uff0c\\(\\max(c,d) \u2264 \\min(a,b)\\) \u65f6\uff0c\u4e5f\u6709 \\(x = 2 \\times (\\min(a,b) - \\max(c,d)) \u2265 0\\) \u3002</p> <p>\u7b2c 2 \u7c7b \\(\\max(a,c) \u2264 \\min(b,d)\\)</p> \\[ \\begin{align*}     x &amp;= |a-c| + |b-d| - |a-b| - |c-d| \\\\       &amp;= |a-c| + |b-d| - (b-a) - (d-c) \\\\       &amp;= (a+c+|a-c|) - (b+d-|b-d|) \\\\       &amp;= 2 \\times (\\max(a,c) - \\min(b,d)) \u2264 0 \\end{align*} \\] <p>\u6839\u636e\u5bf9\u79f0\u6027\uff0c\\(\\max(b,d) \u2264 \\min(a,c)\\) \u65f6\uff0c\u4e5f\u6709 \\(x = 2 \\times (\\max(b,d) - \\min(a,c)) \u2264 0\\) \u3002</p> <p>\u7b2c 3 \u7c7b \\(\\max(a,d) \u2264 \\min(b,c)\\)</p> \\[ \\begin{align*}     x &amp;= |a-c| + |b-d| - |a-b| - |c-d| \\\\       &amp;= (c-a) + (b-d) - (b-a) - (c-d) = 0 \\end{align*} \\] <p>\u6839\u636e\u5bf9\u79f0\u6027\uff0c\\(\\max(b,d) \u2264 \\min(a,c)\\) \u65f6\uff0c\u4e5f\u6709 \\(x = 0\\) \u3002</p> <p>\u7efc\u5408\u4ee5\u4e0a\u4e09\u7c7b\u60c5\u51b5\uff0c\u4ec5\u7b2c 1 \u7c7b\u4f1a\u4f7f\u6570\u7ec4\u503c\u53d8\u5927\uff0c\u6b64\u65f6</p> \\[\\max x = 2 \\times (\\max_{i=0}^{n-1}\\{\\min(nums[i],nums[i+1])\\} - \\min_{j=0}^{n-1}\\{\\max(nums[j],nums[j+1])\\})\\] <p>\u5b9e\u73b0\u65f6\u6ce8\u610f\u5904\u7406\u8fb9\u754c\u60c5\u51b5\u3002</p> Go <pre><code>package main\n\nimport \"math\"\n\nfunc maxValueAfterReverse(nums []int) int {\n    base, d, n := 0, 0, len(nums)\n    mn, mx := math.MaxInt, math.MinInt\n    for i, x := range nums[1:] {\n        mn = min(mn, max(nums[i], x))\n        mx = max(mx, min(nums[i], x))\n        value := abs(nums[i] - x)\n        base += value\n        // \u8fb9\u754c\u60c5\u51b5\uff1a\u7ffb\u8f6cnums[:i+1]\u6216nums[i+1:]\n        d = max(d, max(abs(nums[0]-x), abs(nums[n-1]-nums[i]))-value)\n    }\n    d = max(d, (mx-mn)*2)\n    return base + d\n}\n\nfunc abs(x int) int {\n    if x &lt; 0 {\n        return -x\n    } else {\n        return x\n    }\n}\n\nfunc min(x, y int) int {\n    if x &lt; y {\n        return x\n    } else {\n        return y\n    }\n}\n\nfunc max(x, y int) int {\n    if x &gt; y {\n        return x\n    } else {\n        return y\n    }\n}\n</code></pre>"},{"location":"basic/greedy/","title":"\u8d2a\u5fc3","text":""},{"location":"basic/greedy/#lc1053-\u4ea4\u6362\u4e00\u6b21\u7684\u5148\u524d\u6392\u5217","title":"LC1053. \u4ea4\u6362\u4e00\u6b21\u7684\u5148\u524d\u6392\u5217","text":"\u95ee\u9898\u63cf\u8ff0 <p>\u7ed9\u4f60\u4e00\u4e2a\u957f\u5ea6\u4e3a <code>n(1\u2264n\u22641e4)</code> \u7684\u6b63\u6574\u6570\u6570\u7ec4 <code>arr</code> \uff0c\u5176\u4e2d <code>1\u2264arr[i]\u22641e4</code> \u4e14\u53ef\u80fd\u5b58\u5728\u91cd\u590d\u7684\u5143\u7d20\u3002 \u8bf7\u4f60\u8fd4\u56de\u53ef\u5728 \u4e00\u6b21\u4ea4\u6362\uff08\u4ea4\u6362\u4e24\u6570\u5b57 <code>arr[i]</code> \u548c <code>arr[j]</code> \u7684\u4f4d\u7f6e\uff09\u540e\u5f97\u5230\u7684\u3001\u6309\u5b57\u5178\u5e8f\u6392\u5217\u5c0f\u4e8e <code>arr</code> \u7684\u6700\u5927\u6392\u5217\u3002 \u5982\u679c\u65e0\u6cd5\u8fd9\u4e48\u64cd\u4f5c\uff0c\u5c31\u8bf7\u8fd4\u56de\u539f\u6570\u7ec4\u3002</p> <p>\u5728 LeetCode\u4e3b\u7ad9 \u6216 \u529b\u6263\u4e2d\u6587\u793e\u533a \u67e5\u770b\u8be5\u9898\u3002</p> \u89e3\u9898\u601d\u8def <p>\u4e0d\u5931\u4e00\u822c\u6027\u7684\uff0c\u5047\u8bbe <code>i &lt; j</code> \uff0c\u5219\u9700\u8981\u6ee1\u8db3 <code>arr[i] &gt; arr[j]</code> \u624d\u80fd\u4f7f\u5f97\u4ea4\u6362\u540e\u7684\u5b57\u5178\u5e8f\u5c0f\u4e8e\u539f\u6570\u7ec4\u3002 \u540c\u65f6\uff0c\u4e3a\u4e86\u4f7f\u4ea4\u6362\u540e\u7684\u6570\u7ec4\u662f\u6700\u5927\u6392\u5217\uff0c\u9700\u8981\u8ba9 <code>i</code> \u5c3d\u53ef\u80fd\u5927\uff0c<code>j</code> \u5c3d\u53ef\u80fd\u5c0f\uff0c\u4e14 <code>arr[j]</code> \u662f <code>i</code> \u53f3\u4fa7\u5c0f\u4e8e <code>arr[i]</code> \u7684\u6700\u5927\u5143\u7d20\u3002</p> Go <pre><code>package main\n\nfunc prevPermOpt1(arr []int) []int {\n    n := len(arr)\n    for i := n - 2; i &gt;= 0; i-- {\n        if arr[i] &gt; arr[i+1] { // \u627e\u5230\u6700\u5927\u7684\u6ee1\u8db3\u6761\u4ef6\u7684i\uff0c\u6b64\u65f6arr[i+1:]\u662f\u4e0d\u4e25\u683c\u9012\u589e\uff08\u975e\u9012\u51cf\uff09\u7684\n            j := n - 1\n            for ; arr[j] &gt;= arr[i] || arr[j-1] == arr[j]; j-- {\n            }\n            arr[i], arr[j] = arr[j], arr[i]\n            break\n        }\n    }\n    return arr\n}\n</code></pre>"},{"location":"basic/greedy/#lc1605-\u7ed9\u5b9a\u884c\u5217\u548c\u6c42\u53ef\u884c\u77e9\u9635","title":"LC1605. \u7ed9\u5b9a\u884c\u5217\u548c\u6c42\u53ef\u884c\u77e9\u9635","text":"\u95ee\u9898\u63cf\u8ff0 <p>\u7ed9\u4f60\u4e24\u4e2a\u957f\u5ea6\u5206\u522b\u4e3a <code>m</code> \u548c <code>n</code> \u7684\u975e\u8d1f\u6574\u6570\u6570\u7ec4 <code>rowSum</code> \u548c <code>colSum</code> \uff0c\u5176\u4e2d\uff1a</p> <ul> <li>\u6570\u7ec4\u957f\u5ea6 <code>1\u2264m,n\u2264500</code> \u4e14\u4e24\u4e2a\u6570\u7ec4\u503c\u7684\u8303\u56f4\u4e3a <code>[0,1e8]</code>\uff1b</li> <li><code>rowSum[i]</code> \u662f\u4e8c\u7ef4\u77e9\u9635\u4e2d\u7b2c <code>i</code> \u884c\u5143\u7d20\u7684\u548c\uff1b</li> <li><code>colSum[j]</code> \u662f\u4e8c\u7ef4\u77e9\u9635\u4e2d\u7b2c <code>j</code> \u5217\u5143\u7d20\u7684\u548c\u3002</li> </ul> <p>\u8bf7\u8fd4\u56de\u5927\u5c0f\u4e3a <code>m x n</code> \u7684\u4efb\u610f\u975e\u8d1f\u6574\u6570\u77e9\u9635\uff0c\u4e14\u8be5\u77e9\u9635\u6ee1\u8db3 <code>rowSum</code> \u548c <code>colSum</code> \u7684\u8981\u6c42\u3002 \u9898\u76ee\u4fdd\u8bc1\u5b58\u5728\u81f3\u5c11\u4e00\u4e2a\u53ef\u884c\u77e9\u9635\u3002</p> <p>\u5728 LeetCode\u4e3b\u7ad9 \u6216 \u529b\u6263\u4e2d\u6587\u793e\u533a \u67e5\u770b\u8be5\u9898\u3002</p> \u89e3\u9898\u601d\u8def <p>\u8d2a\u5fc3\u7684\u5c06 <code>matrix[i][j]</code> \u7684\u503c\u6784\u9020\u4e3a\u6ee1\u8db3\u884c\u5217\u548c\u4e0d\u8d85\u8fc7 <code>rowSum</code> \u548c <code>colSum</code> \u7684\u6700\u5927\u503c\u3002</p> Go <pre><code>package main\n\nfunc restoreMatrix(rowSum []int, colSum []int) [][]int {\n    m, n := len(rowSum), len(colSum)\n    ans := make([][]int, m)\n    for i := range ans {\n        ans[i] = make([]int, n)\n    }\n    for i, j := 0, 0; i &lt; m &amp;&amp; j &lt; n; {\n        x := min(rowSum[i], colSum[j])\n        ans[i][j] = x // \u53d6\u4e0d\u8d85\u8fc7rowSum[i]\u548ccolSum[j]\u7684\u6700\u5927\u503c\n        if rowSum[i] -= x; rowSum[i] == 0 {\n            i++ // \u8be5\u884c\u5269\u4f59\u5143\u7d20\u8d4b0\n        }\n        if colSum[j] -= x; colSum[j] == 0 {\n            j++ // \u8be5\u5217\u5269\u4f59\u5143\u7d20\u8d4b0\n        }\n    }\n    return ans\n}\n\nfunc min(x, y int) int {\n    if x &lt; y {\n        return x\n    } else {\n        return y\n    }\n}\n</code></pre>"},{"location":"basic/greedy/#lc2551-\u5c06\u73e0\u5b50\u653e\u5165\u80cc\u5305\u4e2d","title":"LC2551. \u5c06\u73e0\u5b50\u653e\u5165\u80cc\u5305\u4e2d","text":"\u95ee\u9898\u63cf\u8ff0 <p>\u7ed9\u4f60\u4e00\u4e2a\u957f\u5ea6\u4e3a <code>1\u2264n\u22641e5</code> \u7684\u6574\u6570\u6570\u7ec4 <code>weights</code> \uff0c\u5176\u4e2d <code>1\u2264weights[i]\u22641e9</code> \u662f\u7b2c <code>i</code> \u4e2a\u73e0\u5b50\u7684\u91cd\u91cf\u3002 \u540c\u65f6\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570 <code>k(1\u2264k\u2264n)</code> \uff0c\u8bf7\u4f60\u6309\u7167\u5982\u4e0b\u89c4\u5219\u5c06\u6240\u6709\u7684\u73e0\u5b50\u653e\u8fdb <code>k</code> \u4e2a\u80cc\u5305\uff1a</p> <ul> <li>\u6ca1\u6709\u80cc\u5305\u662f\u7a7a\u7684\u3002</li> <li>\u5982\u679c\u7b2c <code>i</code> \u4e2a\u73e0\u5b50\u548c\u7b2c <code>j</code> \u4e2a\u73e0\u5b50\u5728\u540c\u4e00\u4e2a\u80cc\u5305\u91cc\uff0c\u90a3\u4e48 <code>[i, j]</code> \u533a\u95f4\u7684\u6240\u6709\u73e0\u5b50\u90fd\u5fc5\u987b\u5728\u8fd9\u4e2a\u80cc\u5305\u4e2d\u3002</li> <li>\u5982\u679c\u4e00\u4e2a\u80cc\u5305\u6709 <code>[i, j]</code> \u533a\u95f4\u7684\u6240\u6709\u73e0\u5b50\uff0c\u90a3\u4e48\u8fd9\u4e2a\u80cc\u5305\u7684\u4ef7\u683c\u662f <code>weights[i] + weights[j]</code> \u3002</li> </ul> <p>\u4e00\u4e2a\u73e0\u5b50\u5206\u914d\u65b9\u6848\u7684 \u5206\u6570 \u662f\u6240\u6709 <code>k</code> \u4e2a\u80cc\u5305\u7684\u4ef7\u683c\u4e4b\u548c\u3002 \u8bf7\u4f60\u8fd4\u56de\u6240\u6709\u5206\u914d\u65b9\u6848\u4e2d\uff0c\u6700\u5927\u5206\u6570 \u4e0e \u6700\u5c0f\u5206\u6570 \u7684 \u5dee\u503c \u4e3a\u591a\u5c11\u3002</p> <p>\u5728 LeetCode\u4e3b\u7ad9 \u6216 \u529b\u6263\u4e2d\u6587\u793e\u533a \u67e5\u770b\u8be5\u9898\u3002</p> \u89e3\u9898\u601d\u8def Go <pre><code>package main\n\nimport \"sort\"\n\nfunc putMarbles(weights []int, k int) int64 {\n    if n := len(weights); n == k {\n        return 0\n    } else {\n        for i, x := range weights[1:] {\n            weights[i] += x\n        }\n        n--\n        sort.Ints(weights[:n])\n        if k--; k &gt; n&gt;&gt;1 {\n            k = n - k\n        }\n        ans := 0\n        for i, x := range weights[n-k : n] {\n            ans += x - weights[i]\n        }\n        return int64(ans)\n    }\n}\n</code></pre>"},{"location":"basic/greedy/#lc2561-\u91cd\u6392\u6c34\u679c","title":"LC2561. \u91cd\u6392\u6c34\u679c","text":"\u95ee\u9898\u63cf\u8ff0 <p>\u4f60\u6709\u4e24\u4e2a\u679c\u7bee\uff0c\u6bcf\u4e2a\u679c\u7bee\u4e2d\u6709 <code>1\u2264n\u22641e5</code> \u4e2a\u6c34\u679c\u3002 \u7ed9\u4f60\u4e24\u4e2a\u6574\u6570\u6570\u7ec4 <code>basket1</code> \u548c <code>basket2</code> \uff0c\u8868\u793a\u4e24\u4e2a\u679c\u7bee\u4e2d\u6bcf\u4e2a\u6c34\u679c\u7684\u6210\u672c\uff0c\u8303\u56f4\uff1a<code>[1, 1e9]</code> \u3002 \u4f60\u5e0c\u671b\u4e24\u4e2a\u679c\u7bee\u76f8\u7b49\u3002\u4e3a\u6b64\uff0c\u53ef\u4ee5\u6839\u636e\u9700\u8981\u591a\u6b21\u6267\u884c\u4e0b\u8ff0\u64cd\u4f5c\uff1a</p> <ul> <li>\u9009\u4e2d\u4e24\u4e2a\u4e0b\u6807 <code>i</code> \u548c <code>j</code> \uff0c\u5e76\u4ea4\u6362 <code>basket1</code> \u4e2d\u7684\u7b2c <code>i</code> \u4e2a\u6c34\u679c\u548c <code>basket2</code> \u4e2d\u7684\u7b2c <code>j</code> \u4e2a\u6c34\u679c\u3002</li> <li>\u4ea4\u6362\u7684\u6210\u672c\u662f <code>min(basket1[i], basket2[j])</code> \u3002</li> </ul> <p>\u6839\u636e\u679c\u7bee\u4e2d\u6c34\u679c\u7684\u6210\u672c\u8fdb\u884c\u6392\u5e8f\uff0c\u5982\u679c\u6392\u5e8f\u540e\u7ed3\u679c\u5b8c\u5168\u76f8\u540c\uff0c\u5219\u8ba4\u4e3a\u4e24\u4e2a\u679c\u7bee\u76f8\u7b49\u3002 \u8fd4\u56de\u4f7f\u4e24\u4e2a\u679c\u7bee\u76f8\u7b49\u7684\u6700\u5c0f\u4ea4\u6362\u6210\u672c\uff0c\u5982\u679c\u65e0\u6cd5\u4f7f\u4e24\u4e2a\u679c\u7bee\u76f8\u7b49\uff0c\u5219\u8fd4\u56de <code>-1</code> \u3002</p> <p>\u5728 LeetCode\u4e3b\u7ad9 \u6216 \u529b\u6263\u4e2d\u6587\u793e\u533a \u67e5\u770b\u8be5\u9898\u3002</p> \u89e3\u9898\u601d\u8def Go <pre><code>package main\n\nimport (\n    \"math\"\n    \"sort\"\n)\n\nfunc minCost(basket1 []int, basket2 []int) int64 {\n    cnt := make(map[int]int)\n    for i, x := range basket1 {\n        cnt[x]++\n        cnt[basket2[i]]--\n    }\n    var arr []int\n    mn := math.MaxInt\n    for x, c := range cnt {\n        if c&amp;1 != 0 {\n            return -1\n        } else {\n            mn = min(mn, x)\n            for c = abs(c) &gt;&gt; 1; c != 0; c-- {\n                arr = append(arr, x)\n            }\n        }\n    }\n\n    mn &lt;&lt;= 1\n    ans := 0\n    sort.Ints(arr)\n    for _, x := range arr[:len(arr)&gt;&gt;1] {\n        ans += min(x, mn)\n    }\n    return int64(ans)\n}\n\nfunc abs(x int) int {\n    if x &lt; 0 {\n        return -x\n    } else {\n        return x\n    }\n}\n\nfunc min(x, y int) int {\n    if x &lt; y {\n        return x\n    } else {\n        return y\n    }\n}\n</code></pre>"},{"location":"basic/greedy/#cf1054d-changing-array","title":"CF1054D. Changing Array","text":"\u95ee\u9898\u63cf\u8ff0 <p>\u7b2c\u4e00\u884c\u8f93\u5165\u6b63\u6574\u6570 \\(n(1\u2264n\u22642e5)\\ k(1\u2264k\u226430)\\) \uff0c\u7b2c\u4e8c\u884c\u8f93\u5165\u957f\u4e3a \\(n\\) \u7684\u6570\u7ec4 \\(a(0\u2264a[i]\u22642^k-1)\\) \u3002 \u8bbe \\(mask = (1&lt;&lt;k)-1\\) \uff0c\u6bcf\u6b21\u64cd\u4f5c\u4f60\u53ef\u4ee5\u628a\u4efb\u610f \\(a[i]\\) \u4fee\u6539\u4e3a \\(a[i] \\oplus mask\\) \uff0c\u4f60\u53ef\u4ee5\u64cd\u4f5c\u4efb\u610f\u6b21\uff08\u5305\u62ec \\(0\\) \u6b21\uff09\u3002 \u4fee\u6539\u540e\uff0c\u6700\u591a\u6709\u591a\u5c11\u4e2a \\(a\\) \u7684\u975e\u7a7a\u8fde\u7eed\u5b50\u6570\u7ec4\uff0c\u5176\u5f02\u6216\u548c\u4e0d\u7b49\u4e8e \\(0\\) \uff1f</p> <p>\u5728 Codeforces \u6216 \u6d1b\u8c37 \u67e5\u770b\u8be5\u9898\u3002</p> \u89e3\u9898\u601d\u8def <p>\u8fd9\u91cc\u6709\u4e00\u7bc7\u5f88\u8be6\u7ec6\u7684\u9898\u89e3\u3002</p> GoJava <pre><code>package main\n\nimport (\n    \"bufio\"\n    . \"fmt\"\n    \"os\"\n)\n\nfunc main() {\n    in := bufio.NewReader(os.Stdin)\n    var n, k, x, s int\n    Fscan(in, &amp;n, &amp;k)\n    ans := c2(n + 1) // \u5f02\u6216\u524d\u7f00\u548c\u6570\u5bf9\u603b\u6570\n    mask := 1&lt;&lt;k - 1\n    cnt := map[int]int{s: 1}\n    for ; n &gt; 0; n-- {\n        Fscan(in, &amp;x)\n        s ^= x\n        cnt[min(s, s^mask)]++ // s\u548cs^mask\u7684\u4e2a\u6570\u4e00\u8d77\u7edf\u8ba1\n    }\n    for _, c := range cnt {\n        // \u51cf\u53bb\u76f8\u540c\u6570\u5bf9\u6570\u76ee\uff0c\u5e73\u5747\u5206\u914ds\u548cs^mask\u7684\u4e2a\u6570\uff0c\u4f7f\u76f8\u540c\u5f02\u6216\u524d\u7f00\u548c\u6570\u5bf9\u6570\u76ee\u6700\u5c11\n        ans -= c2(c&gt;&gt;1) + c2((c+1)&gt;&gt;1)\n    }\n    Println(ans)\n}\n\nfunc c2(n int) int64 {\n    return (int64(n) * int64(n-1)) &gt;&gt; 1 // n\u4e2a\u6570\u5b57\u7684\u4e0d\u540c\u6570\u5bf9\u6570\u76ee\n}\n\nfunc min(x, y int) int {\n    if x &lt; y {\n        return x\n    } else {\n        return y\n    }\n}\n</code></pre> <pre><code>import java.io.*;\nimport java.util.*;\n\npublic class Main {\n\n    static BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n\n    public static void main(String[] args) throws Exception {\n        StringTokenizer nk = new StringTokenizer(in.readLine());\n        int n = Integer.parseInt(nk.nextToken());\n        int k = Integer.parseInt(nk.nextToken());\n        long ans = c2(n + 1); // \u5f02\u6216\u524d\u7f00\u548c\u6570\u5bf9\u603b\u6570\n        int s = 0, mask = (1 &lt;&lt; k) - 1;\n        Map&lt;Integer, Integer&gt; cnt = new HashMap&lt;&gt;();\n        cnt.put(s, 1);\n        StringTokenizer tokenizer = new StringTokenizer(in.readLine());\n        for (; n &gt; 0; n--) {\n            s ^= Integer.parseInt(tokenizer.nextToken());\n            // s\u548cs^mask\u7684\u4e2a\u6570\u4e00\u8d77\u7edf\u8ba1\n            cnt.compute(Math.min(s, s ^ mask), (v, c) -&gt; c == null ? 1 : c + 1);\n        }\n        for (int c : cnt.values()) {\n            // \u51cf\u53bb\u76f8\u540c\u6570\u5bf9\u6570\u76ee\uff0c\u5e73\u5747\u5206\u914ds\u548cs^mask\u7684\u4e2a\u6570\uff0c\u4f7f\u76f8\u540c\u5f02\u6216\u524d\u7f00\u548c\u6570\u5bf9\u6570\u76ee\u6700\u5c11\n            ans -= c2(c &gt;&gt; 1) + c2((c + 1) &gt;&gt; 1);\n        }\n        System.out.println(ans);\n        in.close();\n    }\n\n    public static long c2(int n) {\n        return (((long) n) * ((long) (n - 1))) &gt;&gt; 1; // n\u4e2a\u6570\u5b57\u7684\u4e0d\u540c\u6570\u5bf9\u6570\u76ee\n    }\n}\n</code></pre>"},{"location":"basic/prefix-sum/","title":"\u524d\u7f00\u548c &amp; \u5dee\u5206","text":""},{"location":"basic/prefix-sum/#\u524d\u7f00\u548c","title":"\u524d\u7f00\u548c","text":""},{"location":"basic/prefix-sum/#lc1124-\u8868\u73b0\u826f\u597d\u7684\u6700\u957f\u65f6\u95f4\u6bb5","title":"LC1124. \u8868\u73b0\u826f\u597d\u7684\u6700\u957f\u65f6\u95f4\u6bb5","text":"\u95ee\u9898\u63cf\u8ff0 <p>\u957f\u5ea6\u4e3a \\(n(1\u2264n\u226410^4)\\) \u7684\u5de5\u4f5c\u65f6\u95f4\u8868 \\(hours\\) \uff0c\u8bb0\u5f55\u7740\u67d0\u4f4d\u5458\u5de5\u6bcf\u5929\u7684\u5de5\u4f5c\u5c0f\u65f6\u6570\u3002 \u6211\u4eec\u8ba4\u4e3a\u5f53\u5458\u5de5\u4e00\u5929\u4e2d\u7684\u5de5\u4f5c\u5c0f\u65f6\u6570\u5927\u4e8e 8 \u5c0f\u65f6\u7684\u65f6\u5019\uff0c\u90a3\u4e48\u8fd9\u4e00\u5929\u5c31\u662f\u300c\u52b3\u7d2f\u7684\u4e00\u5929\u300d\u3002 \u6240\u8c13\u300c\u8868\u73b0\u826f\u597d\u7684\u65f6\u95f4\u6bb5\u300d\uff0c\u610f\u5473\u5728\u8fd9\u6bb5\u65f6\u95f4\u5185\uff0c\u300c\u52b3\u7d2f\u7684\u5929\u6570\u300d\u4e25\u683c\u5927\u4e8e\u300c\u4e0d\u52b3\u7d2f\u7684\u5929\u6570\u300d\u3002 \u8bf7\u4f60\u8fd4\u56de\u300c\u8868\u73b0\u826f\u597d\u65f6\u95f4\u6bb5\u300d\u7684\u6700\u5927\u957f\u5ea6\u3002</p> <p>\u5728 LeetCode\u4e3b\u7ad9 \u6216 \u529b\u6263\u4e2d\u6587\u793e\u533a \u67e5\u770b\u8be5\u9898\u3002</p> \u89e3\u9898\u601d\u8def <p>\u65b9\u6cd5\u4e00\uff1a\u524d\u7f00\u548c + \u54c8\u5e0c\u8868</p> Go <pre><code>package main\n\nfunc longestWPI(hours []int) (ans int) {\n    s := 0                     // \u524d\u7f00\u548c\n    first := make(map[int]int) // \u524d\u7f00\u548c\u9996\u6b21\u51fa\u73b0\u7684\u7d22\u5f15\n    for i, h := range hours {\n        if h &gt; 8 {\n            s++\n        } else {\n            s--\n        }\n        if s &gt; 0 {\n            ans = i + 1\n        } else if j, ok := first[s-1]; ok {\n            ans = max(ans, i-j)\n        }\n        if _, ok := first[s]; !ok {\n            first[s] = i\n        }\n    }\n    return\n}\n\nfunc max(x, y int) int {\n    if x &gt; y {\n        return x\n    } else {\n        return y\n    }\n}\n</code></pre> <p>\u65b9\u6cd5\u4e8c\uff1a\u524d\u7f00\u548c + \u5355\u8c03\u6808</p> <p>\u8fdb\u9636\uff1a\u5982\u679c\u6570\u7ec4\u4e2d\u7684\u503c\u4e0d\u53ea\u6709 \\(1\\) \u548c \\(-1\\)\uff0c\u90a3\u4e48\u5982\u4f55\u8ba1\u7b97\u548c\u81f3\u5c11\u4e3a \\(k\\) \u7684\u6700\u957f\u5b50\u6570\u7ec4\uff1f</p> Go <pre><code>package main\n\nfunc longestWPI(hours []int) int {\n    for i, x := range hours {\n        if x &gt; 8 {\n            hours[i] = 1\n        } else {\n            hours[i] = -1\n        }\n    }\n    return longestSubarray(hours, 1)\n}\n\n// \u6cdb\u5316\uff1a\u548c\u81f3\u5c11\u4e3a K \u7684\u6700\u957f\u5b50\u6570\u7ec4\nfunc longestSubarray(nums []int, k int) (ans int) {\n    k-- // \u548c\u81f3\u5c11\u4e3ak -&gt; \u548c\u5927\u4e8ek\n    n := len(nums)\n    s := make([]int, n+1)   // \u524d\u7f00\u548c\n    st, tail := []int{}, -1 // \u524d\u7f00\u548c\u5355\u8c03\u9012\u51cf\u7d22\u5f15\u6808\n    for i, x := range nums {\n        i++\n        if s[i] = s[i-1] + x; s[i] &gt; k {\n            ans = i\n        }\n        if tail == -1 || s[i] &lt; s[st[tail]] {\n            st = append(st, i)\n            tail++\n        }\n    }\n    for i := n; i &gt; ans &amp;&amp; tail != -1; i-- {\n        for ; tail != -1 &amp;&amp; s[i]-s[st[tail]] &gt; k; tail-- {\n            ans = max(ans, i-st[tail])\n        }\n    }\n    return\n}\n\nfunc max(x, y int) int {\n    if x &gt; y {\n        return x\n    } else {\n        return y\n    }\n}\n</code></pre>"},{"location":"basic/prefix-sum/#lc2488-\u7edf\u8ba1\u4e2d\u4f4d\u6570\u4e3a-k-\u7684\u5b50\u6570\u7ec4","title":"LC2488. \u7edf\u8ba1\u4e2d\u4f4d\u6570\u4e3a K \u7684\u5b50\u6570\u7ec4","text":"\u95ee\u9898\u63cf\u8ff0 <p>\u7ed9\u4f60\u4e00\u4e2a\u957f\u5ea6\u4e3a <code>n(1\u2264n\u22641e5)</code> \u7684\u6570\u7ec4 <code>nums</code> \uff0c\u8be5\u6570\u7ec4\u7531\u4ece <code>1</code> \u5230 <code>n</code> \u7684\u4e0d\u540c\u6574\u6570\u7ec4\u6210\u3002 \u53e6\u7ed9\u4f60\u4e00\u4e2a\u6b63\u6574\u6570 <code>k(1\u2264k\u2264n)</code> \u3002\u7edf\u8ba1\u5e76\u8fd4\u56de <code>nums</code> \u4e2d\u7684\u4e2d\u4f4d\u6570\u7b49\u4e8e <code>k</code> \u7684\u975e\u7a7a\u5b50\u6570\u7ec4\u7684\u6570\u76ee\u3002</p> <p>\u5728 LeetCode\u4e3b\u7ad9 \u6216 \u529b\u6263\u4e2d\u6587\u793e\u533a \u67e5\u770b\u8be5\u9898\u3002</p> \u89e3\u9898\u601d\u8def <p>\u524d\u7f00\u548c + \u54c8\u5e0c\u8868</p> <p>\u5b9e\u73b0\u65f6\u53ef\u4ee5\u4f7f\u7528\u6570\u7ec4\u4ee3\u66ff\u54c8\u5e0c\u8868\uff0c\u7a7a\u95f4\u6362\u65f6\u95f4\u3002</p> Go <pre><code>package main\n\nfunc countSubarrays(nums []int, k int) (ans int) {\n    j := 0\n    for ; nums[j] != k; j++ {\n    }\n    s := len(nums)\n    // [-n, n] =&gt; [0, n&lt;&lt;1]\n    cnt := make([]int, s&lt;&lt;1+1)\n    cnt[s] = 1\n    for i, x := range nums {\n        if x &gt; k {\n            s++\n        } else {\n            s--\n        }\n        if i &lt; j {\n            cnt[s]++\n        } else {\n            ans += cnt[s] + cnt[s+1]\n        }\n    }\n    return\n}\n</code></pre>"},{"location":"basic/prefix-sum/#lc1590-\u4f7f\u6570\u7ec4\u548c\u80fd\u88ab-p-\u6574\u9664","title":"LC1590. \u4f7f\u6570\u7ec4\u548c\u80fd\u88ab P \u6574\u9664","text":"\u95ee\u9898\u63cf\u8ff0 <p>\u7ed9\u4f60\u4e00\u4e2a\u957f\u5ea6\u4e3a \\(n(1\u2264n\u226410^5)\\) \u7684\u6b63\u6574\u6570\u6570\u7ec4 \\(nums(1\u2264nums[i]\u226410^9)\\) \u3002 \u8bf7\u4f60\u79fb\u9664\u4e00\u4e2a\u6700\u77ed\u7684\u5b50\u6570\u7ec4\uff08\u53ef\u4ee5\u4e3a\u7a7a\uff09\uff0c\u4f7f\u5f97\u5269\u4f59\u5143\u7d20\u7684\u548c\u80fd\u88ab \\(p(1\u2264p\u226410^9)\\) \u6574\u9664\u3002 \u4e0d\u5141\u8bb8\u5c06\u6574\u4e2a\u6570\u7ec4\u90fd\u79fb\u9664\u3002 \u8bf7\u4f60\u8fd4\u56de\u4f60\u9700\u8981\u79fb\u9664\u7684\u6700\u77ed\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\uff0c\u5982\u679c\u65e0\u6cd5\u6ee1\u8db3\u9898\u76ee\u8981\u6c42\uff0c\u8fd4\u56de \\(-1\\) \u3002</p> <p>\u5728 LeetCode\u4e3b\u7ad9 \u6216 \u529b\u6263\u4e2d\u6587\u793e\u533a \u67e5\u770b\u8be5\u9898\u3002</p> \u89e3\u9898\u601d\u8def <p>\u524d\u7f00\u548c + \u54c8\u5e0c\u8868</p> Go <pre><code>package main\n\nfunc minSubarray(nums []int, p int) int {\n    s := 0\n    for _, x := range nums {\n        s += x\n    }\n    if s %= p; s == 0 {\n        return 0\n    } else {\n        n := len(nums)\n        ans, pre := n, 0\n        // last[pre]\u4fdd\u5b58\u524d\u7f00\u548c\u4f59p\u4e3apre\u7684\u6700\u5927\u7d22\u5f15\n        last := map[int]int{0: -1}\n        for i, x := range nums {\n            pre = (pre + x) % p\n            t := (p - (s - pre)) % p\n            if j, ok := last[t]; ok {\n                ans = min(ans, i-j)\n            }\n            last[pre] = i\n        }\n        if ans == n {\n            return -1\n        } else {\n            return ans\n        }\n    }\n}\n\nfunc min(x, y int) int {\n    if x &lt; y {\n        return x\n    } else {\n        return y\n    }\n}\n</code></pre>"},{"location":"basic/prefix-sum/#cf1552d-array-differentiation","title":"CF1552D. Array Differentiation","text":"\u95ee\u9898\u63cf\u8ff0 <p>\u8f93\u5165 \\(t(1\u2264t\u226420)\\) \u8868\u793a \\(t\\) \u7ec4\u6570\u636e\uff0c\u6bcf\u7ec4\u6570\u636e\u8f93\u5165 \\(n(1\u2264n\u226410)\\) \u548c\u957f\u4e3a \\(n\\) \u7684\u6570\u7ec4 \\(a(-1e5\u2264a[i]\u22641e5)\\)\u3002 \u5982\u679c\u5b58\u5728\u957f\u4e3a \\(n\\) \u7684\u6570\u7ec4 \\(b\\) \uff0c\u5bf9\u4e8e\u4efb\u610f \\(i\\) \uff0c\u90fd\u5b58\u5728 \\(j\\) \u548c \\(k\\)\uff0c\u4f7f\u5f97 \\(a[i]=b[j]-b[k]\\) \uff0c\u5219\u8f93\u51fa <code>YES</code>\uff0c\u5426\u5219\u8f93\u51fa <code>NO</code>\u3002 \u6ce8\u610f \\(j\\) \u53ef\u4ee5\u7b49\u4e8e \\(k\\)\u3002</p> <p>\u5728 Codeforces \u6216 \u6d1b\u8c37 \u67e5\u770b\u8be5\u9898\u3002</p> \u89e3\u9898\u601d\u8def <p>\u6570\u7ec4 \\(a\\) \u4e2d\u5143\u7d20\u7684\u987a\u5e8f\u4e0d\u5f71\u54cd\u7b54\u6848\u3002 \u6570\u7ec4 \\(a\\) \u4e2d\u5143\u7d20\u7684\u6b63\u8d1f\u4e0d\u5f71\u54cd\u7b54\u6848\uff0c\u6bcf\u4e2a\u5143\u7d20\u90fd\u53ef\u4ee5\u4efb\u610f\u53d6\u53cd\u3002 \u9996\u5148\u5c06\u6570\u7ec4 \\(b\\) \u6784\u9020\u4e3a\u6570\u7ec4 \\(a\\) \u524d \\(n-1\\) \u4e2a\u5143\u7d20\u7684\u524d\u7f00\u548c\uff0c\u5219\u6709\uff1a</p> <ul> <li>\u5f53 \\(i &lt; n-1\\) \u65f6\uff0c\\(a_i = b_{i+1} - b_i\\) \uff1b</li> <li>\u5f53 \\(i = n-1\\) \u65f6\uff0c\u5982\u679c\u5b58\u5728\u533a\u95f4 \\([l, r]\\) \uff0c\u6ee1\u8db3 \\(\\sum\\limits_{i=l}^r a_i = a_n\\) \uff0c\u5219 \\(a_n = b_{r+1} - b_l\\) \u3002</li> </ul> <p>\u56e0\u6b64\uff0c\u53ea\u8981\u5b58\u5728\u533a\u95f4 \\([l, r]\\) \uff0c\u6ee1\u8db3 \\(\\sum\\limits_{i=l}^r a_i = a_n\\) \u5373\u53ef\u3002 \u56e0\u4e3a\u6570\u7ec4 \\(a\\) \u4e2d\u7684\u5143\u7d20\u53ef\u4ee5\u4efb\u610f\u4ea4\u6362\u987a\u5e8f\u3001\u4efb\u610f\u53d6\u53cd\uff0c\u6240\u4ee5\u4e0a\u8ff0\u6761\u4ef6\u7b49\u4ef7\u4e8e\u6570\u7ec4 \\(a\\) \u5b58\u5728\u4e24\u4e2a\u5143\u7d20\u548c\u76f8\u7b49\u7684\u5b50\u96c6\u3002</p> GoJava <pre><code>package main\n\nimport (\n    \"bufio\"\n    . \"fmt\"\n    \"os\"\n)\n\nfunc main() {\n    in := bufio.NewReader(os.Stdin)\n    out := bufio.NewWriter(os.Stdout)\n    defer out.Flush()\n\n    var t, n int\n    for Fscan(in, &amp;t); t &gt; 0; t-- {\n        Fscan(in, &amp;n)\n        a := make([]int, n)\n        for i := range a {\n            Fscan(in, &amp;a[i])\n        }\n        ans := false\n        set := map[int]bool{0: true}\n        for i := (1 &lt;&lt; n) - 1; i &gt; 0; i-- {\n            sum := 0\n            for j, x := range a {\n                if i&gt;&gt;j&amp;1 == 1 {\n                    sum += x\n                }\n            }\n            if set[sum] {\n                ans = true\n                break\n            } else {\n                set[sum] = true\n            }\n        }\n        if ans {\n            Fprintln(out, \"YES\")\n        } else {\n            Fprintln(out, \"NO\")\n        }\n    }\n}\n</code></pre> <pre><code>import java.io.*;\nimport java.util.*;\n\npublic class Main {\n\n    static BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n    static PrintWriter out = new PrintWriter(System.out);\n\n    public static void main(String[] args) throws Exception {\n        int t = Integer.parseInt(in.readLine());\n        for (; t &gt; 0; t--) {\n            int n = Integer.parseInt(in.readLine());\n            StringTokenizer tokenizer = new StringTokenizer(in.readLine());\n            int[] a = new int[n];\n            for (int i = 0; i &lt; n; i++) {\n                a[i] = Integer.parseInt(tokenizer.nextToken());\n            }\n            boolean ans = false;\n            Set&lt;Integer&gt; set = new HashSet&lt;&gt;();\n            set.add(0);\n            for (int i = (1 &lt;&lt; n) - 1; i &gt; 0; i--) {\n                int sum = 0;\n                for (int j = 0; j &lt; n; j++) {\n                    if (((i &gt;&gt; j) &amp; 1) == 1) {\n                        sum += a[j];\n                    }\n                }\n                if (set.contains(sum)) {\n                    ans = true;\n                    break;\n                } else {\n                    set.add(sum);\n                }\n            }\n            out.println(ans ? \"YES\" : \"NO\");\n        }\n        out.flush();\n        out.close();\n        in.close();\n    }\n}\n</code></pre>"},{"location":"basic/prefix-sum/#\u5dee\u5206","title":"\u5dee\u5206","text":""},{"location":"basic/prefix-sum/#\u4e00\u7ef4\u5dee\u5206","title":"\u4e00\u7ef4\u5dee\u5206","text":"<p>\u5bf9\u4e8e\u4e00\u4e2a\u7ed9\u5b9a\u7684\u6570\u5217 \\(A\\) \uff0c\u5176\u5dee\u5206\u6570\u5217 \\(B\\) \u6839\u636e\u5982\u4e0b\u516c\u5f0f\u8ba1\u7b97\uff1a</p> \\[B_i = A_i - A_{i-1}\\] <p>\u5176\u4e2d \\(1\u2264i\u2264n\\) \u4e14 \\(B_0 = A_0\\) \u3002</p>"},{"location":"basic/prefix-sum/#\u4e8c\u7ef4\u5dee\u5206","title":"\u4e8c\u7ef4\u5dee\u5206","text":"<p>\u5bf9\u4e8e\u4e00\u4e2a\u7ed9\u5b9a\u7684\u77e9\u9635 \\(A\\) \uff0c\u5176\u5dee\u5206\u77e9\u9635 \\(B\\) \u6839\u636e\u5982\u4e0b\u516c\u5f0f\u8ba1\u7b97\uff1a</p> \\[B_{i,j} = A_{i,j} - A_{i-1,j} - A_{i,j-1} + A_{i-1,j-1}\\] <p>\u5176\u4e2d \\(1\u2264i,j\u2264n\\) \u3002</p> <p>\u8fd9\u91cc\u6709\u4e00\u7bc7\u5f88\u8be6\u7ec6\u7684\u6559\u7a0b\u3002</p>"},{"location":"basic/prefix-sum/#lg3397-\u5730\u6bef","title":"LG3397. \u5730\u6bef","text":"\u95ee\u9898\u63cf\u8ff0 <p>\u7b2c\u4e00\u884c\u8f93\u5165\u4e24\u4e2a\u6b63\u6574\u6570 \\(n,m\\) \\((1\u2264n,m\u22641e3)\\)\u3002\u8868\u793a\u5728 \\(n \\times n\\) \u7684\u683c\u5b50\u4e0a\u6709 \\(m\\) \u4e2a\u5730\u6bef\u3002 \u63a5\u4e0b\u6765 \\(m\\) \u884c\uff0c\u6bcf\u884c\u8f93\u5165\u56db\u4e2a\u6574\u6570\uff1a\\(x_1,y_1,x_2,y_2\\) \u3002 \u8868\u793a\u4e00\u5757\u5730\u6bef\uff0c\u5de6\u4e0a\u89d2\u662f \\((x_1,y_1)\\) \uff0c\u53f3\u4e0b\u89d2\u662f \\((x_2,y_2)\\) \u3002\u5750\u6807\u4ece \\(1\\) \u5f00\u59cb\u3002 \u8bf7\u8f93\u51fa\u4e00\u4e2a \\(n \\times n\\) \u7684\u77e9\u9635 \\(grid\\)\uff0c\u5176\u4e2d \\(grid[i][j]\\) \u8868\u793a\u8fd9\u4e2a\u683c\u5b50\u88ab\u591a\u5c11\u4e2a\u5730\u6bef\u8986\u76d6\u3002</p> <p>\u5728 \u6d1b\u8c37 \u67e5\u770b\u8be5\u9898\u3002</p> \u89e3\u9898\u601d\u8def <p>\u65b9\u6cd5\u4e00\uff1a\u6309\u884c\u5dee\u5206</p> Go <pre><code>package main\n\nimport (\n    \"bufio\"\n    . \"fmt\"\n    \"os\"\n)\n\nfunc main() {\n    in := bufio.NewReader(os.Stdin)\n    out := bufio.NewWriter(os.Stdout)\n    defer out.Flush()\n\n    var n, m, x1, y1, x2, y2 int\n    Fscan(in, &amp;n, &amp;m)\n    diff := make([][]int, n+1)\n    for i := range diff {\n        diff[i] = make([]int, n+2)\n    }\n    for ; m &gt; 0; m-- {\n        Fscan(in, &amp;x1, &amp;y1, &amp;x2, &amp;y2)\n        for i := x1; i &lt;= x2; i++ {\n            diff[i][y1]++\n            diff[i][y2+1]--\n        }\n    }\n\n    for i := 1; i &lt;= n; i++ {\n        x := 0\n        for j := 1; j &lt;= n; j++ {\n            x += diff[i][j]\n            Fprint(out, x, \" \")\n        }\n        Fprintln(out)\n    }\n}\n</code></pre> <p>\u65b9\u6cd5\u4e8c\uff1a\u4e8c\u7ef4\u5dee\u5206</p> Go <pre><code>package main\n\nimport (\n    \"bufio\"\n    . \"fmt\"\n    \"os\"\n)\n\nfunc main() {\n    in := bufio.NewReader(os.Stdin)\n    out := bufio.NewWriter(os.Stdout)\n    defer out.Flush()\n\n    var n, m, x1, y1, x2, y2 int\n    Fscan(in, &amp;n, &amp;m)\n    diff := make([][]int, n+2)\n    for i := range diff {\n        diff[i] = make([]int, n+2)\n    }\n    for ; m &gt; 0; m-- {\n        Fscan(in, &amp;x1, &amp;y1, &amp;x2, &amp;y2)\n        diff[x1][y1]++\n        diff[x1][y2+1]--\n        diff[x2+1][y1]--\n        diff[x2+1][y2+1]++\n    }\n\n    for i := 1; i &lt;= n; i++ {\n        for j := 1; j &lt;= n; j++ {\n            diff[i][j] += diff[i-1][j] + diff[i][j-1] - diff[i-1][j-1]\n            Fprint(out, diff[i][j], \" \")\n        }\n        Fprintln(out)\n    }\n}\n</code></pre>"},{"location":"basic/prefix-sum/#lc2132-\u7528\u90ae\u7968\u8d34\u6ee1\u7f51\u683c\u56fe","title":"LC2132. \u7528\u90ae\u7968\u8d34\u6ee1\u7f51\u683c\u56fe","text":"\u95ee\u9898\u63cf\u8ff0 <p>\u7ed9\u4f60\u4e00\u4e2a <code>m x n</code> \u7684\u4e8c\u8fdb\u5236\u77e9\u9635 <code>grid</code> \uff0c\u6bcf\u4e2a\u683c\u5b50\u8981\u4e48\u4e3a <code>0</code> \uff08\u7a7a\uff09\u8981\u4e48\u4e3a <code>1</code>\uff08\u88ab\u5360\u636e\uff09\u3002 \u7ed9\u4f60\u90ae\u7968\u7684\u5c3a\u5bf8\u4e3a <code>stampHeight x stampWidth</code> \u3002<code>1\u2264m,n,stampHeight,stampWidth\u22641e5</code> \u4e14 <code>1\u2264m*n\u22642e5</code> \u3002 \u6211\u4eec\u60f3\u5c06\u90ae\u7968\u8d34\u8fdb\u4e8c\u8fdb\u5236\u77e9\u9635\u4e2d\uff0c\u4e14\u6ee1\u8db3\u4ee5\u4e0b \u9650\u5236 \u548c \u8981\u6c42 \uff1a</p> <ol> <li>\u8986\u76d6\u6240\u6709 \u7a7a \u683c\u5b50\u3002</li> <li>\u4e0d\u8986\u76d6\u4efb\u4f55 \u88ab\u5360\u636e \u7684\u683c\u5b50\u3002</li> <li>\u6211\u4eec\u53ef\u4ee5\u653e\u5165\u4efb\u610f\u6570\u76ee\u7684\u90ae\u7968\u3002</li> <li>\u90ae\u7968\u53ef\u4ee5\u76f8\u4e92\u6709 \u91cd\u53e0 \u90e8\u5206\u3002</li> <li>\u90ae\u7968\u4e0d\u5141\u8bb8 \u65cb\u8f6c \u3002</li> <li>\u90ae\u7968\u5fc5\u987b\u5b8c\u5168\u5728\u77e9\u9635 \u5185 \u3002</li> </ol> <p>\u5982\u679c\u5728\u6ee1\u8db3\u4e0a\u8ff0\u8981\u6c42\u7684\u524d\u63d0\u4e0b\uff0c\u53ef\u4ee5\u653e\u5165\u90ae\u7968\uff0c\u8bf7\u8fd4\u56de <code>true</code> \uff0c\u5426\u5219\u8fd4\u56de <code>false</code> \u3002</p> <p>\u5728 LeetCode\u4e3b\u7ad9 \u6216 \u529b\u6263\u4e2d\u6587\u793e\u533a \u67e5\u770b\u8be5\u9898\u3002</p> \u89e3\u9898\u601d\u8def <p>\u65b9\u6cd5\u4e00\uff1a\u4e8c\u7ef4\u524d\u7f00\u548c + \u4e8c\u7ef4\u5dee\u5206</p> Go <pre><code>package main\n\nfunc possibleToStamp(grid [][]int, stampHeight int, stampWidth int) bool {\n    if stampHeight == 1 &amp;&amp; stampWidth == 1 {\n        return true\n    }\n    m, n := len(grid), len(grid[0])\n    s := make([][]int, m+1) // grid \u7684\u4e8c\u7ef4\u524d\u7f00\u548c\n    s[0] = make([]int, n+1)\n    d := make([][]int, m+1) // \u90ae\u7968\u8986\u76d6\u6b21\u6570\u7684\u4e8c\u7ef4\u5dee\u5206\n    d[0] = make([]int, n+1)\n    for i, row := range grid {\n        s[i+1] = make([]int, n+1)\n        d[i+1] = make([]int, n+1)\n        for j, v := range row {\n            s[i+1][j+1] = v + s[i][j+1] + s[i+1][j] - s[i][j]\n            if x, y := i+1-stampHeight, j+1-stampWidth; x &gt;= 0 &amp;&amp; y &gt;= 0 {\n                if s[i+1][j+1]-s[x][j+1]-s[i+1][y]+s[x][y] == 0 { // \u5de6\u4e0a(x,y)\u5230\u53f3\u4e0b(i,j)\u7684\u77e9\u5f62\u5185\u53ef\u4ee5\u8d34\u4e00\u5f20\u90ae\u7968\n                    d[x][y]++\n                    d[x][j+1]--\n                    d[i+1][y]--\n                    d[i+1][j+1]++\n                }\n            }\n        }\n    }\n    // \u590d\u7528 s \u8ba1\u7b97\u6bcf\u4e2a\u683c\u5b50\u7684\u90ae\u7968\u8986\u76d6\u6b21\u6570\n    for i := 0; i &lt; m; i++ {\n        for j := 0; j &lt; n; j++ {\n            s[i+1][j+1] = d[i][j] + s[i+1][j] + s[i][j+1] - s[i][j]\n            if s[i+1][j+1] == 0 &amp;&amp; grid[i][j] == 0 { // (i,j)\u662f\u7a7a\u683c\u5b50\u4e14\u90ae\u7968\u8986\u76d6\u6b21\u6570\u4e3a0\n                return false\n            }\n        }\n    }\n    return true\n}\n</code></pre>"},{"location":"basic/simulate/","title":"\u6a21\u62df","text":""},{"location":"basic/simulate/#lc43-\u5b57\u7b26\u4e32\u76f8\u4e58","title":"LC43. \u5b57\u7b26\u4e32\u76f8\u4e58","text":"\u95ee\u9898\u63cf\u8ff0 <p>\u7ed9\u5b9a\u4e24\u4e2a\u4ee5\u5b57\u7b26\u4e32\u5f62\u5f0f\u8868\u793a\u7684\u975e\u8d1f\u6574\u6570 <code>num1</code> \u548c <code>num2</code> \uff0c\u5b57\u7b26\u4e32\u957f\u5ea6\u8303\u56f4\uff1a<code>[1,200]</code> \u3002 <code>num1</code> \u548c <code>num2</code> \u90fd\u4e0d\u5305\u542b\u4efb\u4f55\u524d\u5bfc\u96f6\uff0c\u9664\u4e86\u6570\u5b57 <code>0</code> \u672c\u8eab\u3002 \u8fd4\u56de <code>num1</code> \u548c <code>num2</code> \u7684\u4e58\u79ef\uff0c\u4ee5\u5b57\u7b26\u4e32\u5f62\u5f0f\u8868\u793a\u3002</p> <p>\u5728 LeetCode\u4e3b\u7ad9 \u6216 \u529b\u6263\u4e2d\u6587\u793e\u533a \u67e5\u770b\u8be5\u9898\u3002</p> \u89e3\u9898\u601d\u8def <p>\u65b9\u6cd5\u4e00\uff1a\u505a\u52a0\u6cd5</p> Go <pre><code>package main\n\nfunc multiply(num1 string, num2 string) string {\n    if num1 == \"0\" || num2 == \"0\" {\n        return \"0\"\n    } else {\n        ans := \"0\"\n        m, n := len(num1), len(num2)\n        //   num2\n        // x num1\n        // \u53d6\u51fanum1\u4e2d\u7684\u6bcf\u4e00\u4f4d\u5206\u522b\u4e0enum2\u76f8\u4e58\uff0c\u5e76\u7d2f\u52a0\u7ed3\u679c\n        for i := 0; i &lt; m; i++ {\n            if a := num1[m-i-1] &amp; 15; a != 0 {\n                var x byte\n                s := make([]byte, n+1)\n                for j := 0; j &lt; n; j++ {\n                    x += a * (num2[n-j-1] &amp; 15)\n                    s[n-j] = '0' + x%10\n                    x /= 10 // \u8fdb\u4f4d\n                }\n                if x &gt; 0 {\n                    s[0] = '0' + x\n                } else {\n                    s = s[1:]\n                }\n                for j := 0; j &lt; i; j++ {\n                    s = append(s, '0')\n                }\n                // \u7d2f\u52a0\u7ed3\u679c\n                ans = add(ans, string(s))\n            }\n        }\n        return ans\n    }\n}\n\nfunc add(num1 string, num2 string) string {\n    if m, n := len(num1), len(num2); m &gt; n {\n        return add(num2, num1)\n    } else {\n        var x byte\n        ans := make([]byte, n+1)\n        for i := 0; i &lt; n; i++ {\n            if i &lt; m {\n                x += num1[m-i-1] &amp; 15\n            }\n            x += num2[n-i-1] &amp; 15\n            ans[n-i] = '0' + x%10\n            x /= 10 // \u8fdb\u4f4d\n        }\n        if x &gt; 0 {\n            ans[0] = '0' + x\n            return string(ans)\n        } else {\n            return string(ans[1:])\n        }\n    }\n}\n</code></pre> <p>\u65b9\u6cd5\u4e8c\uff1a\u505a\u4e58\u6cd5</p> Go <pre><code>package main\n\nfunc multiply(num1 string, num2 string) string {\n    if num1 == \"0\" || num2 == \"0\" {\n        return \"0\"\n    } else {\n        m, n := len(num1), len(num2)\n        // \u5f53num1\u548cnum2\u5747\u4e0d\u4e3a0\u65f6\uff0c\u5176\u4e58\u79ef\u7684\u957f\u5ea6\u4e3am+n\u6216m+n-1\n        ans := make([]rune, m+n)\n        for i, a := range num1 {\n            for j, b := range num2 {\n                // \u9010\u4f4d\u76f8\u4e58\uff0cnum1[i]*num2[j]\u7684\u7ed3\u679c\u7d2f\u52a0\u5230ans[i+j+1]\n                ans[i+j+1] += (a &amp; 15) * (b &amp; 15)\n            }\n        }\n        for i := m + n - 1; i &gt; 0; i-- {\n            if ans[i] &gt; 9 { // \u8fdb\u4f4d\n                ans[i-1] += ans[i] / 10\n                ans[i] %= 10\n            }\n        }\n        for ans[0] == 0 {\n            ans = ans[1:] // \u53bb\u9664\u524d\u7f000\n        }\n        for i := range ans {\n            ans[i] += '0' // \u6570\u5b57\u8f6c\u4e3a\u5b57\u7b26\n        }\n        return string(ans)\n    }\n}\n</code></pre>"},{"location":"basic/simulate/#lc2532-\u8fc7\u6865\u7684\u65f6\u95f4","title":"LC2532. \u8fc7\u6865\u7684\u65f6\u95f4","text":"\u95ee\u9898\u63cf\u8ff0 <p>\u5171\u6709 \\(k\\) \u4f4d\u5de5\u4eba\u8ba1\u5212\u5c06 \\(n\\) \u4e2a\u7bb1\u5b50\u4ece\u65e7\u4ed3\u5e93\u79fb\u52a8\u5230\u65b0\u4ed3\u5e93\u3002 \u7ed9\u4f60\u4e24\u4e2a\u6574\u6570 \\(n(1\u2264n\u22641e4)\\) \u548c \\(k(1\u2264k\u22641e4)\\)\uff0c\u4ee5\u53ca\u4e00\u4e2a\u4e8c\u7ef4\u6574\u6570\u6570\u7ec4 \\(time\\) \uff0c\u6570\u7ec4\u7684\u5927\u5c0f\u4e3a \\(k \\times 4\\) \u3002 \u5176\u4e2d \\(time[i] = [leftToRight_i,\\ pickOld_i,\\ rightToLeft_i,\\ putNew_i]\\) \u4e14 \\(1\u2264time[i][j]\u22641e3\\) \u3002</p> \u7bb1\u5b50\u642c\u8fd0\u89c4\u5219 <p>\u4e00\u6761\u6cb3\u5c06\u4e24\u5ea7\u4ed3\u5e93\u5206\u9694\uff0c\u53ea\u80fd\u901a\u8fc7\u4e00\u5ea7\u6865\u901a\u884c\u3002\u65e7\u4ed3\u5e93\u4f4d\u4e8e\u6cb3\u7684\u53f3\u5cb8\uff0c\u65b0\u4ed3\u5e93\u5728\u6cb3\u7684\u5de6\u5cb8\u3002 \u5f00\u59cb\u65f6\uff0c\u6240\u6709 \\(k\\) \u4f4d\u5de5\u4eba\u90fd\u5728\u6865\u7684\u5de6\u4fa7\u7b49\u5f85\u3002\u4e3a\u4e86\u79fb\u52a8\u8fd9\u4e9b\u7bb1\u5b50\uff0c\u7b2c \\(i\\) \u4f4d\u5de5\u4eba\uff08\u4e0b\u6807\u4ece \\(0\\) \u5f00\u59cb\uff09\u53ef\u4ee5\uff1a</p> <ul> <li>\u4ece\u5de6\u5cb8\uff08\u65b0\u4ed3\u5e93\uff09\u8de8\u8fc7\u6865\u5230\u53f3\u5cb8\uff08\u65e7\u4ed3\u5e93\uff09\uff0c\u7528\u65f6 \\(leftToRight_i\\) \u5206\u949f\u3002</li> <li>\u4ece\u65e7\u4ed3\u5e93\u9009\u62e9\u4e00\u4e2a\u7bb1\u5b50\uff0c\u5e76\u8fd4\u56de\u5230\u6865\u8fb9\uff0c\u7528\u65f6 \\(pickOld_i\\) \u5206\u949f\u3002\u4e0d\u540c\u5de5\u4eba\u53ef\u4ee5\u540c\u65f6\u642c\u8d77\u6240\u9009\u7684\u7bb1\u5b50\u3002</li> <li>\u4ece\u53f3\u5cb8\uff08\u65e7\u4ed3\u5e93\uff09\u8de8\u8fc7\u6865\u5230\u5de6\u5cb8\uff08\u65b0\u4ed3\u5e93\uff09\uff0c\u7528\u65f6 \\(rightToLeft_i\\) \u5206\u949f\u3002</li> <li>\u5c06\u7bb1\u5b50\u653e\u5165\u65b0\u4ed3\u5e93\uff0c\u5e76\u8fd4\u56de\u5230\u6865\u8fb9\uff0c\u7528\u65f6 \\(putNew_i\\) \u5206\u949f\u3002\u4e0d\u540c\u5de5\u4eba\u53ef\u4ee5\u540c\u65f6\u653e\u4e0b\u6240\u9009\u7684\u7bb1\u5b50\u3002</li> </ul> <p>\u5982\u679c\u6ee1\u8db3\u4e0b\u9762\u4efb\u4e00\u6761\u4ef6\uff0c\u5219\u8ba4\u4e3a\u5de5\u4eba \\(i\\) \u7684\u6548\u7387\u4f4e\u4e8e\u5de5\u4eba \\(j\\) \uff1a</p> <ul> <li>\\(leftToRight_i + rightToLeft_i &gt; leftToRight_j + rightToLeft_j\\)</li> <li>\\(leftToRight_i + rightToLeft_i == leftToRight_j + rightToLeft_j\\) \u4e14 \\(i &gt; j\\)</li> </ul> <p>\u5de5\u4eba\u901a\u8fc7\u6865\u65f6\u9700\u8981\u9075\u5faa\u4ee5\u4e0b\u89c4\u5219\uff1a</p> <ul> <li>\u5982\u679c\u5de5\u4eba \\(x\\) \u5230\u8fbe\u6865\u8fb9\u65f6\uff0c\u5de5\u4eba \\(y\\) \u6b63\u5728\u8fc7\u6865\uff0c\u90a3\u4e48\u5de5\u4eba \\(x\\) \u9700\u8981\u5728\u6865\u8fb9\u7b49\u5f85\u3002</li> <li>\u5982\u679c\u6ca1\u6709\u6b63\u5728\u8fc7\u6865\u7684\u5de5\u4eba\uff0c\u90a3\u4e48\u5728\u6865\u53f3\u8fb9\u7b49\u5f85\u7684\u5de5\u4eba\u53ef\u4ee5\u5148\u8fc7\u6865\u3002\u5982\u679c\u540c\u65f6\u6709\u591a\u4e2a\u5de5\u4eba\u5728\u53f3\u8fb9\u7b49\u5f85\uff0c\u90a3\u4e48\u6548\u7387\u6700\u4f4e\u7684\u5de5\u4eba\u4f1a\u5148\u8fc7\u6865\u3002</li> <li>\u5982\u679c\u6ca1\u6709\u6b63\u5728\u8fc7\u6865\u7684\u5de5\u4eba\uff0c\u4e14\u6865\u53f3\u8fb9\u4e5f\u6ca1\u6709\u5728\u7b49\u5f85\u7684\u5de5\u4eba\uff0c\u540c\u65f6\u65e7\u4ed3\u5e93\u8fd8\u5269\u4e0b\u81f3\u5c11\u4e00\u4e2a\u7bb1\u5b50\u9700\u8981\u642c\u8fd0\uff0c\u6b64\u65f6\u5728\u6865\u5de6\u8fb9\u7684\u5de5\u4eba\u53ef\u4ee5\u8fc7\u6865\u3002\u5982\u679c\u540c\u65f6\u6709\u591a\u4e2a\u5de5\u4eba\u5728\u5de6\u8fb9\u7b49\u5f85\uff0c\u90a3\u4e48\u6548\u7387\u6700\u4f4e\u7684\u5de5\u4eba\u4f1a\u5148\u8fc7\u6865\u3002</li> </ul> <p>\u6240\u6709 \\(n\\) \u4e2a\u7bb1\u5b50\u90fd\u9700\u8981\u653e\u5165\u65b0\u4ed3\u5e93\uff0c\u8bf7\u4f60\u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u642c\u8fd0\u7bb1\u5b50\u7684\u5de5\u4eba\u5230\u8fbe\u6cb3\u5de6\u5cb8\u7684\u65f6\u95f4\u3002</p> <p>\u5728 LeetCode\u4e3b\u7ad9 \u6216 \u529b\u6263\u4e2d\u6587\u793e\u533a \u67e5\u770b\u8be5\u9898\u3002</p> \u89e3\u9898\u601d\u8def <p>\u65b9\u6cd5\u4e00\uff1a\u56db\u5806\u6a21\u62df</p> Go <pre><code>package main\n\nimport (\n    \"container/heap\"\n    \"sort\"\n)\n\nfunc findCrossingTime(n int, k int, time [][]int) (curr int) {\n    // \u6309\u7167\u4f18\u5148\u7ea7\u4ece\u4f4e\u5230\u9ad8\u6392\u5e8f\uff0c\u6392\u5e8f\u5b8c\u6210\u540e\uff0c\u7d22\u5f15\u8d8a\u5927\u6548\u7387\u8d8a\u4f4e\uff0c\u8fc7\u6865\u4f18\u5148\u7ea7\u8d8a\u9ad8\n    sort.SliceStable(time, func(i, j int) bool {\n        x, y := time[i], time[j]\n        return x[0]+x[2] &lt; y[0]+y[2]\n    })\n    // \u5de6\u53f3\u4e24\u5cb8\u6b63\u5728\u653e\u7bb1/\u642c\u7bb1\u7684\u5de5\u4eba\n    workL, workR := working{}, working{}\n    // \u5de6\u53f3\u4e24\u5cb8\u6b63\u5728\u7b49\u5f85\u8fc7\u6865\u7684\u5de5\u4eba\n    waitL, waitR := make(waiting, k), waiting{}\n    for i := range waitL {\n        waitL[i].i = k - 1 - i // \u7d22\u5f15\u8d8a\u5927\u6548\u7387\u8d8a\u4f4e\uff0c\u8fc7\u6865\u4f18\u5148\u7ea7\u8d8a\u9ad8\n    }\n    for n &gt; 0 {\n        // \u5de6\u5cb8\u5b8c\u6210\u653e\u7bb1\uff0c\u8fdb\u5165\u5de6\u5cb8\u7b49\u5f85\u8fc7\u6865\u961f\u5217\n        for workL.Len() &gt; 0 &amp;&amp; workL[0].t &lt;= curr {\n            heap.Push(&amp;waitL, heap.Pop(&amp;workL))\n        }\n        // \u53f3\u5cb8\u5b8c\u6210\u642c\u7bb1\uff0c\u8fdb\u5165\u53f3\u5cb8\u7b49\u5f85\u8fc7\u6865\u961f\u5217\n        for workR.Len() &gt; 0 &amp;&amp; workR[0].t &lt;= curr {\n            heap.Push(&amp;waitR, heap.Pop(&amp;workR))\n        }\n        if waitR.Len() &gt; 0 &amp;&amp; waitR[0].t &lt;= curr { // \u53f3\u5cb8\u7b49\u5f85\u8fc7\u6865\u7684\u5de5\u4eba\u8fc7\u6865\n            w := heap.Pop(&amp;waitR).(worker)\n            curr += time[w.i][2]                                // \u65f6\u95f4\u6765\u5230w\u8fc7\u6865\u7ed3\u675f\u6765\u5230\u5de6\u5cb8\u7684\u65f6\u523b\n            heap.Push(&amp;workL, worker{w.i, curr + time[w.i][3]}) // w\u8fdb\u5165\u653e\u7bb1\u961f\u5217\uff0c\u8bb0\u5f55\u653e\u7bb1\u5b8c\u6210\u65f6\u95f4\n        } else if waitL.Len() &gt; 0 &amp;&amp; waitL[0].t &lt;= curr { // \u5de6\u5cb8\u7b49\u5f85\u8fc7\u6865\u7684\u5de5\u4eba\u8fc7\u6865\n            w := heap.Pop(&amp;waitL).(worker)\n            curr += time[w.i][0]                                // \u65f6\u95f4\u6765\u5230w\u8fc7\u6865\u7ed3\u675f\u6765\u5230\u53f3\u5cb8\u7684\u65f6\u523b\n            heap.Push(&amp;workR, worker{w.i, curr + time[w.i][1]}) // w\u8fdb\u5165\u642c\u7bb1\u961f\u5217\uff0c\u8bb0\u5f55\u642c\u7bb1\u5b8c\u6210\u65f6\u95f4\n            n--                                                 // w\u5c06\u4f1a\u5b8c\u6210\u4e00\u4e2a\u7bb1\u5b50\u7684\u642c\u8fd0\n        } else {\n            // \u6b64\u65f6\u6240\u6709\u5de5\u4eba\u90fd\u5728\u8fdb\u884c\u653e\u7bb1/\u642c\u7bb1\u7684\u5de5\u4f5c\uff0c\u6ca1\u6709\u7b49\u5f85\u8fc7\u6865\u7684\u5de5\u4eba\n            // \u6211\u4eec\u8ba9\u65e0\u804a\u7684\u65f6\u95f4\u6765\u5230\u6240\u6709\u5de5\u4eba\u4e2d\u6700\u65e9\u5b8c\u6210\u5f53\u524d\u5de5\u4f5c\u51c6\u5907\u8fc7\u6865\u7684\u65f6\u523b\n            if workL.Len() == 0 {\n                curr = workR[0].t\n            } else if workR.Len() == 0 {\n                curr = workL[0].t\n            } else {\n                curr = min(workL[0].t, workR[0].t)\n            }\n        }\n    }\n    // \u6b64\u65f6\u642c\u8fd0\u6700\u540e\u4e00\u4e2a\u7bb1\u5b50\u7684\u5de5\u4eba\u5df2\u7ecf\u6765\u5230\u53f3\u5cb8\n    // \u7b49\u5f85\u6240\u6709\u53f3\u5cb8\u7684\u5de5\u4eba\u5b8c\u6210\u642c\u7bb1\u5e76\u8fc7\u6865\u524d\u5f80\u5de6\u5cb8\u5373\u53ef\uff0c\u7531\u4e8e\u6240\u6709\u53f3\u5cb8\u7684\u5de5\u4eba\u90fd\u8981\u524d\u5f80\u5de6\u5cb8\uff0c\u6240\u4ee5\u8fc7\u6865\u7684\u4f18\u5148\u7ea7\u987a\u5e8f\u5df2\u4e0d\u518d\u91cd\u8981\n    for workR.Len() &gt; 0 {\n        w := heap.Pop(&amp;workR).(worker)\n        curr = max(curr, w.t) + time[w.i][2]\n    }\n    return\n}\n\ntype worker struct{ i, t int } // \u5de5\u4eba\u7f16\u53f7\u53ca\u5b8c\u6210\u65f6\u95f4\n\ntype working []worker\n\nfunc (h working) Len() int            { return len(h) }\nfunc (h working) Less(i, j int) bool  { return h[i].t &lt; h[j].t }\nfunc (h working) Swap(i, j int)       { h[i], h[j] = h[j], h[i] }\nfunc (h *working) Push(x interface{}) { *h = append(*h, x.(worker)) }\nfunc (h *working) Pop() interface{} {\n    old := *h\n    n := len(old)\n    x := old[n-1]\n    *h = old[0 : n-1]\n    return x\n}\n\ntype waiting []worker\n\nfunc (h waiting) Len() int            { return len(h) }\nfunc (h waiting) Less(i, j int) bool  { return h[i].i &gt; h[j].i }\nfunc (h waiting) Swap(i, j int)       { h[i], h[j] = h[j], h[i] }\nfunc (h *waiting) Push(x interface{}) { *h = append(*h, x.(worker)) }\nfunc (h *waiting) Pop() interface{} {\n    old := *h\n    n := len(old)\n    x := old[n-1]\n    *h = old[0 : n-1]\n    return x\n}\n\nfunc min(x, y int) int {\n    if x &lt; y {\n        return x\n    } else {\n        return y\n    }\n}\n\nfunc max(x, y int) int {\n    if x &gt; y {\n        return x\n    } else {\n        return y\n    }\n}\n</code></pre>"},{"location":"basic/two-pointer/","title":"\u53cc\u6307\u9488","text":""},{"location":"basic/two-pointer/#\u6ed1\u52a8\u7a97\u53e3","title":"\u6ed1\u52a8\u7a97\u53e3","text":""},{"location":"basic/two-pointer/#lc713-\u4e58\u79ef\u5c0f\u4e8e-k-\u7684\u5b50\u6570\u7ec4","title":"LC713. \u4e58\u79ef\u5c0f\u4e8e K \u7684\u5b50\u6570\u7ec4","text":"\u95ee\u9898\u63cf\u8ff0 <p>\u7ed9\u4f60\u4e00\u4e2a\u957f\u5ea6\u4e3a <code>n(1\u2264n\u22643e4)</code> \u7684\u6574\u6570\u6570\u7ec4 <code>nums(1\u2264nums[i]\u22641e3)</code> \u548c\u4e00\u4e2a\u6574\u6570 <code>k(0\u2264k\u22641e6)</code> \u3002 \u8bf7\u4f60\u8fd4\u56de\u5b50\u6570\u7ec4\u5185\u6240\u6709\u5143\u7d20\u7684\u4e58\u79ef\u4e25\u683c\u5c0f\u4e8e <code>k</code> \u7684\u8fde\u7eed\u5b50\u6570\u7ec4\u7684\u6570\u76ee\u3002</p> <p>\u5728 LeetCode\u4e3b\u7ad9 \u6216 \u529b\u6263\u4e2d\u6587\u793e\u533a \u67e5\u770b\u8be5\u9898\u3002</p> \u89e3\u9898\u601d\u8def Go <pre><code>package main\n\nfunc numSubarrayProductLessThanK(nums []int, k int) (ans int) {\n    if k &lt; 2 {\n        return 0\n    } else {\n        l, product := -1, 1\n        for r, x := range nums {\n            for product *= x; product &gt;= k; product /= nums[l] {\n                l++\n            }\n            ans += r - l\n        }\n        return\n    }\n}\n</code></pre>"},{"location":"basic/two-pointer/#cf1535c-unstable-string","title":"CF1535C. Unstable String","text":"\u95ee\u9898\u63cf\u8ff0 <p>\u7b2c\u4e00\u884c\u8f93\u5165 <code>t(1\u2264t\u22641e4)</code> \u8868\u793a <code>t</code> \u7ec4\u6570\u636e\u3002\u6240\u6709\u6570\u636e\u7684\u5b57\u7b26\u4e32\u957f\u5ea6\u4e4b\u548c <code>\u22642e5</code>\u3002 \u6bcf\u7ec4\u6570\u636e\u8f93\u5165\u4e00\u4e2a\u957f\u5ea6\u4e0d\u8d85\u8fc7 <code>2e5</code> \u7684\u5b57\u7b26\u4e32 <code>s</code> \uff0c\u4ec5\u5305\u542b <code>'0'</code> <code>'1'</code> <code>'?'</code> \u4e09\u79cd\u5b57\u7b26\u3002</p> <p>\u5b9a\u4e49\u5b50\u4e32\u662f \u4e0d\u7a33\u5b9a\u7684 \u5f53\u4e14\u4ec5\u5f53\u5b50\u4e32\u4e2d\u4efb\u610f\u76f8\u90bb\u4e24\u6570\u5747\u4e0d\u76f8\u540c\uff0c\u5982 <code>101010\u22ef</code> \u6216 <code>010101\u22ef</code> \u3002 \u5b9a\u4e49\u5b50\u4e32\u662f \u597d\u770b\u7684 \u5f53\u4e14\u4ec5\u5f53\u53ef\u4ee5\u5c06\u5176\u4e2d\u7684 <code>?</code> \u6539\u4e3a <code>0</code> \u6216 <code>1</code>\uff08\u6bcf\u4e2a <code>?</code> \u600e\u4e48\u6539\u662f\u72ec\u7acb\u7684\uff09\u4f7f\u5f97\u8fd9\u4e2a\u5b50\u4e32\u662f\u4e0d\u7a33\u5b9a\u7684\u3002 \u6c42\u5b57\u7b26\u4e32\u4e2d\u597d\u770b\u7684\u5b50\u4e32\u4e2a\u6570\u4e4b\u548c\u3002</p> <p>\u5728 Codeforces \u6216 \u6d1b\u8c37 \u67e5\u770b\u8be5\u9898\u3002</p> \u89e3\u9898\u601d\u8def GoJava <pre><code>package main\n\nimport (\n    \"bufio\"\n    . \"fmt\"\n    \"os\"\n)\n\nfunc main() {\n    in := bufio.NewReader(os.Stdin)\n    out := bufio.NewWriter(os.Stdout)\n    defer out.Flush()\n\n    var T int\n    for Fscan(in, &amp;T); T &gt; 0; T-- {\n        var s string\n        Fscan(in, &amp;s)\n        var ans int64\n        // prev[0]\u8868\u793a\u524d\u4e00\u4e2a\u4e0e\u7d22\u5f15\u5947\u5076\u6027\u76f8\u540c\u7684\u975e'?'\u5b57\u7b26\uff08'0'\u6216'1'\uff09\u7684\u7d22\u5f15\n        // prev[1]\u8868\u793a\u524d\u4e00\u4e2a\u4e0e\u7d22\u5f15\u5947\u5076\u6027\u4e0d\u540c\u7684\u975e'?'\u5b57\u7b26\uff08'0'\u6216'1'\uff09\u7684\u7d22\u5f15\n        prev := []int{-1, -1}\n        for i, c := range s {\n            if c != '?' {\n                prev[(i&amp;1)^int(c&amp;1)] = i\n            }\n            // (prev[0], i]\u533a\u95f4\u5185\u7684\u975e'?'\u5b57\u7b26\uff08'0'\u6216'1'\uff09\u4e0e\u7d22\u5f15\u5947\u5076\u6027\u5747\u4e0d\u540c\n            // (prev[1], i]\u533a\u95f4\u5185\u7684\u975e'?'\u5b57\u7b26\uff08'0'\u6216'1'\uff09\u4e0e\u7d22\u5f15\u5947\u5076\u6027\u5747\u76f8\u540c\n            ans += int64(i - min(prev[0], prev[1]))\n        }\n        Fprintln(out, ans)\n    }\n}\n\nfunc min(x, y int) int {\n    if x &lt; y {\n        return x\n    } else {\n        return y\n    }\n}\n</code></pre> <pre><code>import java.io.*;\n\npublic class Main {\n\n    static BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n    static PrintWriter out = new PrintWriter(System.out);\n\n    public static void main(String[] args) throws Exception {\n        int T = Integer.parseInt(in.readLine());\n        for (; T &gt; 0; T--) {\n            char[] s = in.readLine().toCharArray();\n            long ans = 0;\n            // prev[0]\u8868\u793a\u524d\u4e00\u4e2a\u4e0e\u7d22\u5f15\u5947\u5076\u6027\u76f8\u540c\u7684\u975e'?'\u5b57\u7b26\uff08'0'\u6216'1'\uff09\u7684\u7d22\u5f15\n            // prev[1]\u8868\u793a\u524d\u4e00\u4e2a\u4e0e\u7d22\u5f15\u5947\u5076\u6027\u4e0d\u540c\u7684\u975e'?'\u5b57\u7b26\uff08'0'\u6216'1'\uff09\u7684\u7d22\u5f15\n            int[] prev = new int[] { -1, -1 };\n            for (int i = 0, n = s.length; i &lt; n; i++) {\n                if (s[i] != '?') {\n                    prev[(i &amp; 1) ^ (s[i] &amp; 1)] = i;\n                }\n                // (prev[0], i]\u533a\u95f4\u5185\u7684\u975e'?'\u5b57\u7b26\uff08'0'\u6216'1'\uff09\u4e0e\u7d22\u5f15\u5947\u5076\u6027\u5747\u4e0d\u540c\n                // (prev[1], i]\u533a\u95f4\u5185\u7684\u975e'?'\u5b57\u7b26\uff08'0'\u6216'1'\uff09\u4e0e\u7d22\u5f15\u5947\u5076\u6027\u5747\u76f8\u540c\n                ans += i - Math.min(prev[0], prev[1]);\n            }\n            out.println(ans);\n        }\n        out.flush();\n        out.close();\n        in.close();\n    }\n}\n</code></pre>"},{"location":"basic/two-pointer/#lc1574-\u5220\u9664\u6700\u77ed\u7684\u5b50\u6570\u7ec4\u4f7f\u5269\u4f59\u6570\u7ec4\u6709\u5e8f","title":"LC1574. \u5220\u9664\u6700\u77ed\u7684\u5b50\u6570\u7ec4\u4f7f\u5269\u4f59\u6570\u7ec4\u6709\u5e8f","text":"\u95ee\u9898\u63cf\u8ff0 <p>\u7ed9\u4f60\u4e00\u4e2a\u957f\u5ea6\u4e3a <code>n(1\u2264n\u22641e5)</code> \u7684\u6574\u6570\u6570\u7ec4 <code>arr(0\u2264arr[i]\u22641e9)</code> \u3002 \u8bf7\u4f60\u5220\u9664\u4e00\u4e2a\u5b50\u6570\u7ec4\uff08\u53ef\u4ee5\u4e3a\u7a7a\uff09\uff0c\u4f7f\u5f97 <code>arr</code> \u4e2d\u5269\u4e0b\u7684\u5143\u7d20\u662f \u975e\u9012\u51cf \u7684\u3002 \u8bf7\u4f60\u8fd4\u56de\u6ee1\u8db3\u9898\u76ee\u8981\u6c42\u7684\u6700\u77ed\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\u3002</p> <p>\u5728 LeetCode\u4e3b\u7ad9 \u6216 \u529b\u6263\u4e2d\u6587\u793e\u533a \u67e5\u770b\u8be5\u9898\u3002</p> \u89e3\u9898\u601d\u8def <p>\u65b9\u6cd5\u4e00\uff1a\u679a\u4e3e\u5de6\u7aef\u70b9\uff0c\u79fb\u52a8\u53f3\u7aef\u70b9</p> Go <pre><code>package main\n\nfunc findLengthOfShortestSubarray(arr []int) int {\n    n := len(arr)\n    r := n - 1\n    for ; r != 0 &amp;&amp; arr[r-1] &lt;= arr[r]; r-- {\n    }\n    if r == 0 {\n        return 0 // arr\u5df2\u7ecf\u975e\u9012\u51cf\n    } else {\n        ans := r            // \u5220\u9664\u533a\u95f4 [0, r)\n        for l := 0; ; l++ { // \u679a\u4e3e\u5de6\u7aef\u70b9\n            for ; r &lt; n &amp;&amp; arr[l] &gt; arr[r]; r++ { // \u79fb\u52a8\u53f3\u7aef\u70b9\n            }\n            ans = min(ans, r-l-1) // \u5220\u9664\u533a\u95f4 (l, r)\n            if arr[l] &gt; arr[l+1] {\n                return ans\n            }\n        }\n    }\n}\n\nfunc min(x, y int) int {\n    if x &lt; y {\n        return x\n    } else {\n        return y\n    }\n}\n</code></pre> <p>\u65b9\u6cd5\u4e8c\uff1a\u679a\u4e3e\u53f3\u7aef\u70b9\uff0c\u79fb\u52a8\u5de6\u7aef\u70b9</p> Go <pre><code>package main\n\nfunc findLengthOfShortestSubarray(arr []int) int {\n    n := len(arr)\n    r := n - 1\n    for ; r != 0 &amp;&amp; arr[r-1] &lt;= arr[r]; r-- {\n    }\n    if r == 0 {\n        return 0 // arr\u5df2\u7ecf\u975e\u9012\u51cf\n    } else {\n        ans := r            // \u5220\u9664\u533a\u95f4 [0, r)\n        for l := 0; ; r++ { // \u679a\u4e3e\u53f3\u7aef\u70b9\n            for ; r == n || arr[l] &lt;= arr[r]; l++ { // \u79fb\u52a8\u5de6\u7aef\u70b9\n                ans = min(ans, r-l-1) // \u5220\u9664\u533a\u95f4 (l, r)\n                if arr[l] &gt; arr[l+1] {\n                    return ans\n                }\n            }\n        }\n    }\n}\n\nfunc min(x, y int) int {\n    if x &lt; y {\n        return x\n    } else {\n        return y\n    }\n}\n</code></pre>"},{"location":"basic/two-pointer/#lc1040-\u79fb\u52a8\u77f3\u5b50\u76f4\u5230\u8fde\u7eed-ii","title":"LC1040. \u79fb\u52a8\u77f3\u5b50\u76f4\u5230\u8fde\u7eed II","text":"\u95ee\u9898\u63cf\u8ff0 <p>\u5728\u4e00\u4e2a\u957f\u5ea6 \u65e0\u9650 \u7684\u6570\u8f74\u4e0a\uff0c\u6709 <code>3\u2264n\u22641e4</code> \u9897\u4f4d\u7f6e\u4e92\u4e0d\u76f8\u540c\u7684\u77f3\u5b50\uff0c\u7b2c i \u9897\u77f3\u5b50\u7684\u4f4d\u7f6e\u4e3a <code>1\u2264stones[i]\u22641e9</code>\u3002 \u5982\u679c\u4e00\u9897\u77f3\u5b50\u7684\u4f4d\u7f6e\u6700\u5c0f/\u6700\u5927\uff0c\u90a3\u4e48\u8be5\u77f3\u5b50\u88ab\u79f0\u4f5c \u7aef\u70b9\u77f3\u5b50 \u3002 \u6bcf\u4e2a\u56de\u5408\uff0c\u4f60\u53ef\u4ee5\u5c06\u4e00\u9897\u7aef\u70b9\u77f3\u5b50\u62ff\u8d77\u5e76\u79fb\u52a8\u5230\u4e00\u4e2a\u672a\u5360\u7528\u7684\u4f4d\u7f6e\uff0c\u4f7f\u5f97\u8be5\u77f3\u5b50\u4e0d\u518d\u662f\u4e00\u9897\u7aef\u70b9\u77f3\u5b50\u3002 \u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u5982\u679c\u77f3\u5b50\u50cf <code>stones = [1,2,5]</code> \u8fd9\u6837\uff0c\u4f60\u5c06 \u65e0\u6cd5 \u79fb\u52a8\u4f4d\u4e8e\u4f4d\u7f6e 5 \u7684\u7aef\u70b9\u77f3\u5b50\uff0c\u56e0\u4e3a\u65e0\u8bba\u5c06\u5b83\u79fb\u52a8\u5230\u4efb\u4f55\u4f4d\u7f6e\uff08\u4f8b\u5982 0 \u6216 3\uff09\uff0c\u8be5\u77f3\u5b50\u90fd\u4ecd\u7136\u4f1a\u662f\u7aef\u70b9\u77f3\u5b50\u3002 \u5f53\u4f60\u65e0\u6cd5\u8fdb\u884c\u4efb\u4f55\u79fb\u52a8\u65f6\uff0c\u5373\u8fd9\u4e9b\u77f3\u5b50\u7684\u4f4d\u7f6e\u8fde\u7eed\u65f6\uff0c\u6e38\u620f\u7ed3\u675f\u3002\u8bf7\u8ba1\u7b97\u8981\u4f7f\u6e38\u620f\u7ed3\u675f\uff0c\u4f60\u53ef\u4ee5\u6267\u884c\u7684\u6700\u5c0f\u548c\u6700\u5927\u79fb\u52a8\u6b21\u6570\u5206\u522b\u662f\u591a\u5c11\uff1f\u4ee5\u957f\u5ea6\u4e3a 2 \u7684\u6570\u7ec4\u5f62\u5f0f\u8fd4\u56de\u7b54\u6848\uff1a<code>answer = [minimum_moves, maximum_moves]</code> \u3002</p> <p>\u5728 LeetCode\u4e3b\u7ad9 \u6216 \u529b\u6263\u4e2d\u6587\u793e\u533a \u67e5\u770b\u8be5\u9898\u3002</p> \u89e3\u9898\u601d\u8def Go <pre><code>package main\n\nimport \"sort\"\n\nfunc numMovesStonesII(stones []int) []int {\n    n := len(stones)\n    sort.Ints(stones)\n    if stones[n-1]-stones[0] == n-1 { // \u6240\u6709\u77f3\u5b50\u8fde\u7eed\n        return []int{0, 0}\n    } else {\n        le := stones[n-2] - stones[0] - n + 2 // \u524dn-1\u9897\u77f3\u5b50\u95f4\u672a\u5360\u7528\u7684\u4f4d\u7f6e\n        re := stones[n-1] - stones[1] - n + 2 // \u540en-1\u9897\u77f3\u5b50\u95f4\u672a\u5360\u7528\u7684\u4f4d\u7f6e\n        maxMoves := max(le, re)\n        if le == 0 || re == 0 { // \u524dn-1\u9897\u77f3\u5b50\u8fde\u7eed\u6216\u540en-1\u9897\u77f3\u5b50\u8fde\u7eed\n            return []int{min(2, maxMoves), maxMoves}\n        } else {\n            minMoves := maxMoves\n            for l, r := 0, 0; minMoves != 1 &amp;&amp; r &lt; n; r++ {\n                for ; stones[r]-stones[l] &gt;= n; l++ {\n                }\n                minMoves = min(minMoves, n-(r-l+1)) // [stones[r]-n+1, stones[r]]\u7a97\u53e3\u5185\u672a\u5360\u7528\u7684\u4f4d\u7f6e\n            }\n            return []int{minMoves, maxMoves}\n        }\n    }\n}\n\nfunc min(x, y int) int {\n    if x &lt; y {\n        return x\n    } else {\n        return y\n    }\n}\n\nfunc max(x, y int) int {\n    if x &gt; y {\n        return x\n    } else {\n        return y\n    }\n}\n</code></pre>"},{"location":"basic/two-pointer/#\u5feb\u6162\u6307\u9488","title":"\u5feb\u6162\u6307\u9488","text":""},{"location":"basic/two-pointer/#lc141-\u73af\u5f62\u94fe\u8868","title":"LC141. \u73af\u5f62\u94fe\u8868","text":"\u95ee\u9898\u63cf\u8ff0 <p>\u7ed9\u4f60\u4e00\u4e2a\u94fe\u8868\u7684\u5934\u8282\u70b9 <code>head</code> \uff0c\u5224\u65ad\u94fe\u8868\u4e2d\u662f\u5426\u6709\u73af\u3002\u94fe\u8868\u4e2d\u7684\u8282\u70b9\u6570\u76ee\u8303\u56f4\uff1a<code>[0,1e4]</code>\u3002 \u5982\u679c\u94fe\u8868\u4e2d\u5b58\u5728\u73af\uff0c\u5219\u8fd4\u56de <code>true</code> \uff1b\u5426\u5219\uff0c\u8fd4\u56de <code>false</code> \u3002</p> <p>\u5728 LeetCode\u4e3b\u7ad9 \u6216 \u529b\u6263\u4e2d\u6587\u793e\u533a \u67e5\u770b\u8be5\u9898\u3002</p> \u89e3\u9898\u601d\u8def Go <pre><code>package main\n\ntype ListNode struct {\n    Val  int\n    Next *ListNode\n}\n\nfunc hasCycle(head *ListNode) bool {\n    if head != nil {\n        slow, fast := head, head\n        for fast.Next != nil &amp;&amp; fast.Next.Next != nil {\n            slow, fast = slow.Next, fast.Next.Next\n            if slow == fast {\n                return true\n            }\n        }\n    }\n    return false\n}\n</code></pre>"},{"location":"basic/two-pointer/#\u5b50\u5e8f\u5217\u5339\u914d","title":"\u5b50\u5e8f\u5217\u5339\u914d","text":""},{"location":"basic/two-pointer/#lc524-\u901a\u8fc7\u5220\u9664\u5b57\u6bcd\u5339\u914d\u5230\u5b57\u5178\u91cc\u6700\u957f\u5355\u8bcd","title":"LC524. \u901a\u8fc7\u5220\u9664\u5b57\u6bcd\u5339\u914d\u5230\u5b57\u5178\u91cc\u6700\u957f\u5355\u8bcd","text":"\u95ee\u9898\u63cf\u8ff0 <p>\u7ed9\u4f60\u4e00\u4e2a\u957f\u5ea6\u4e3a <code>m(1\u2264m\u22641e3)</code> \u7684\u5b57\u7b26\u4e32 <code>s</code> \u3002 \u7ed9\u4f60\u4e00\u4e2a\u957f\u5ea6\u4e3a <code>n(1\u2264n\u22641e3)</code> \u7684\u5b57\u7b26\u4e32\u6570\u7ec4 <code>dictionary</code> \uff0c\u6bcf\u4e2a\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u4e3a <code>[1,1e3]</code> \u3002 \u627e\u51fa\u5e76\u8fd4\u56de <code>dictionary</code> \u4e2d\u6700\u957f\u7684\u5b57\u7b26\u4e32\uff0c\u8be5\u5b57\u7b26\u4e32\u53ef\u4ee5\u901a\u8fc7\u5220\u9664 <code>s</code> \u4e2d\u7684\u67d0\u4e9b\u5b57\u7b26\u5f97\u5230\u3002 \u5982\u679c\u7b54\u6848\u4e0d\u6b62\u4e00\u4e2a\uff0c\u8fd4\u56de\u957f\u5ea6\u6700\u957f\u4e14\u5b57\u6bcd\u5e8f\u6700\u5c0f\u7684\u5b57\u7b26\u4e32\u3002\u5982\u679c\u7b54\u6848\u4e0d\u5b58\u5728\uff0c\u5219\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\u3002</p> <p>\u5728 LeetCode\u4e3b\u7ad9 \u6216 \u529b\u6263\u4e2d\u6587\u793e\u533a \u67e5\u770b\u8be5\u9898\u3002</p> \u89e3\u9898\u601d\u8def <p>\u65b9\u6cd5\u4e00\uff1a\u53cc\u6307\u9488</p> Go <pre><code>package main\n\nfunc findLongestWord(s string, dictionary []string) (ans string) {\n    m := len(s)\n    for _, t := range dictionary {\n        i, j, n := 0, 0, len(t)\n        for ; i &lt; m &amp;&amp; j &lt; n; i++ {\n            if s[i] == t[j] {\n                j++\n            }\n        }\n        if j == n &amp;&amp; (n &gt; len(ans) || (n == len(ans) &amp;&amp; t &lt; ans)) {\n            ans = t\n        }\n    }\n    return\n}\n</code></pre> <p>\u65b9\u6cd5\u4e8c\uff1a\u9884\u5904\u7406 + \u53cc\u6307\u9488</p> Go <pre><code>package main\n\nfunc findLongestWord(s string, dictionary []string) (ans string) {\n    m := len(s)\n    var first [26]int\n    for i := range first {\n        first[i] = m\n    }\n    // next[i][j]\u8868\u793as[i]\u540e\u7b2c\u4e00\u4e2a\u5b57\u6bcdj+'a'\u7684\u7d22\u5f15\n    next := make([][]int, m)\n    for i := m - 1; i &gt;= 0; i-- {\n        next[i] = make([]int, 26)\n        copy(next[i], first[:])\n        first[s[i]-'a'] = i\n    }\n    for _, t := range dictionary {\n        j, n := 0, len(t)\n        for i := first[t[j]-'a']; i &lt; m; i = next[i][t[j]-'a'] {\n            if j++; j == n {\n                if n &gt; len(ans) || (n == len(ans) &amp;&amp; t &lt; ans) {\n                    ans = t\n                }\n                break\n            }\n        }\n    }\n    return\n}\n</code></pre>"},{"location":"basic/two-pointer/#lc2565-\u6700\u5c11\u5f97\u5206\u5b50\u5e8f\u5217","title":"LC2565. \u6700\u5c11\u5f97\u5206\u5b50\u5e8f\u5217","text":"\u95ee\u9898\u63cf\u8ff0 <p>\u7ed9\u4f60\u4e00\u4e2a\u957f\u5ea6\u4e3a <code>1\u2264m\u22641e5</code> \u5b57\u7b26\u4e32\u00a0<code>s</code> \u548c\u4e00\u4e2a\u957f\u5ea6\u4e3a <code>1\u2264n\u22641e5</code> \u5b57\u7b26\u4e32\u00a0<code>t</code>\u00a0\u3002 \u4f60\u53ef\u4ee5\u4ece\u5b57\u7b26\u4e32 <code>t</code>\u00a0\u4e2d\u5220\u9664\u4efb\u610f\u6570\u76ee\u7684\u5b57\u7b26\u3002 \u5982\u679c\u6ca1\u6709\u4ece\u5b57\u7b26\u4e32\u00a0<code>t</code>\u00a0\u4e2d\u5220\u9664\u5b57\u7b26\uff0c\u90a3\u4e48\u5f97\u5206\u4e3a\u00a00\u00a0\uff0c\u5426\u5219\u5b57\u7b26\u4e32\u7684\u5f97\u5206\u4e3a\u00a0<code>right - left + 1</code>\u00a0\uff0c\u5176\u4e2d\uff1a</p> <ul> <li><code>left</code>\u00a0\u4e3a\u5220\u9664\u5b57\u7b26\u4e2d\u7684\u6700\u5c0f\u4e0b\u6807\u3002</li> <li><code>right</code>\u00a0\u4e3a\u5220\u9664\u5b57\u7b26\u4e2d\u7684\u6700\u5927\u4e0b\u6807\u3002</li> </ul> <p>\u8bf7\u4f60\u8fd4\u56de\u4f7f\u00a0<code>t</code> \u6210\u4e3a\u00a0<code>s</code>\u00a0\u5b50\u5e8f\u5217\u7684\u6700\u5c0f\u5f97\u5206\u3002</p> <p>\u5728 LeetCode\u4e3b\u7ad9 \u6216 \u529b\u6263\u4e2d\u6587\u793e\u533a \u67e5\u770b\u8be5\u9898\u3002</p> \u89e3\u9898\u601d\u8def <p>\u65b9\u6cd5\u4e00\uff1a\u53cc\u6307\u9488 + \u4e8c\u5206\u67e5\u627e</p> Go <pre><code>package main\n\nimport \"sort\"\n\nfunc minimumScore(s string, t string) int {\n    m, n := len(s), len(t)\n    lIdx := make([]int, n)\n    for i, j := -1, 0; j &lt; n; j++ {\n        for i++; i &lt; m &amp;&amp; s[i] != t[j]; i++ {\n        }\n        lIdx[j] = i // s[:i+1]\u662f\u4e0et[:j+1]\u5339\u914d\uff08\u5b50\u5e8f\u5217\u5339\u914d\uff09\u7684\u6700\u77ed\u524d\u7f00\n    }\n    if lIdx[n-1] &lt; m {\n        return 0\n    }\n    rIdx := make([]int, n)\n    for i, j := m, n-1; j &gt;= 0; j-- {\n        for i--; i &gt;= 0 &amp;&amp; s[i] != t[j]; i-- {\n        }\n        rIdx[j] = i // s[i:]\u662f\u4e0et[j:]\u5339\u914d\uff08\u5b50\u5e8f\u5217\u5339\u914d\uff09\u7684\u6700\u77ed\u540e\u7f00\n    }\n    return sort.Search(n, func(x int) bool {\n        if rIdx[x] &gt; -1 || lIdx[n-1-x] &lt; m { // \u5220\u9664 t[:x] \u6216 t[n-x:]\n            return true\n        } else {\n            for r := x + 1; r &lt; n; r++ {\n                if rIdx[r] &gt; lIdx[r-x-1] { // \u5220\u9664 t[r-x:r]\n                    return true\n                }\n            }\n            return false\n        }\n    })\n}\n</code></pre> <p>\u65b9\u6cd5\u4e8c\uff1a\u53cc\u6307\u9488</p> Go <pre><code>package main\n\nfunc minimumScore(s string, t string) int {\n    m, n := len(s), len(t)\n    suf := make([]int, m+1)\n    suf[m] = n // \u54e8\u5175\uff0c\u9632\u6b62\u8d8a\u754c\n    for i, j := m-1, n-1; i &gt;= 0; i-- {\n        if j &gt;= 0 &amp;&amp; s[i] == t[j] {\n            j--\n        }\n        suf[i] = j + 1 // t[j+1:]\u662f\u4e0es[i:]\u5339\u914d\uff08\u5b50\u5e8f\u5217\u5339\u914d\uff09\u7684\u6700\u957f\u540e\u7f00\n    }\n    ans := suf[0]\n    if ans == 0 {\n        return 0 // t \u662f s \u7684\u5b50\u5e8f\u5217\n    }\n    for i, j := 0, 0; i &lt; m; i++ {\n        if s[i] == t[j] { // \u6ce8\u610f j \u4e00\u5b9a\u5c0f\u4e8e n \uff0c\u56e0\u4e3a j = n \u65f6\uff0ct \u662f s \u7684\u5b50\u5e8f\u5217\uff0c\u524d\u9762\u5df2\u7ecf\u5224\u65ad\u8fc7\n            j++ // t[:j]\u662f\u4e0es[:i+1]\u5339\u914d\uff08\u5b50\u5e8f\u5217\u5339\u914d\uff09\u7684\u6700\u957f\u524d\u7f00\n        }\n        ans = min(ans, suf[i+1]-j) // \u5220\u9664 t[j:suf[i+1]]\n    }\n    return ans\n}\n\nfunc min(x, y int) int {\n    if x &lt; y {\n        return x\n    } else {\n        return y\n    }\n}\n</code></pre>"},{"location":"basic/two-pointer/#\u5229\u7528\u5e8f\u5217\u6709\u5e8f\u6027","title":"\u5229\u7528\u5e8f\u5217\u6709\u5e8f\u6027","text":""},{"location":"basic/two-pointer/#lc167-\u4e24\u6570\u4e4b\u548c-ii---\u6709\u5e8f\u6570\u7ec4","title":"LC167. \u4e24\u6570\u4e4b\u548c II - \u6709\u5e8f\u6570\u7ec4","text":"\u95ee\u9898\u63cf\u8ff0 <p>\u7ed9\u4f60\u4e00\u4e2a\u957f\u5ea6\u4e3a <code>n(2\u2264n\u22643e4)</code> \u7684\u6574\u6570\u6570\u7ec4 <code>numbers</code>\uff08\u4e0b\u6807\u4ece <code>1</code> \u5f00\u59cb\uff09\uff0c\u8be5\u6570\u7ec4\u5df2\u6309\u975e\u9012\u51cf\u987a\u5e8f\u6392\u5217\u3002 \u8bf7\u4f60\u4ece\u6570\u7ec4\u4e2d\u627e\u51fa\u4e0b\u6807\u5206\u522b\u4e3a <code>i</code> \u548c <code>j</code> \u7684\u4e24\u4e2a\u6570\uff0c\u6ee1\u8db3\u4e24\u6570\u548c\u7b49\u4e8e <code>target</code> \u4e14 <code>i &lt; j</code>\u3002 \u4ee5\u957f\u5ea6\u4e3a <code>2</code> \u7684\u6574\u6570\u6570\u7ec4 <code>[i, j]</code> \u7684\u5f62\u5f0f\u8fd4\u56de\u8fd9\u4e24\u4e2a\u6570\u7684\u4e0b\u6807 <code>i</code> \u548c <code>j</code> \u3002 \u9898\u76ee\u4fdd\u8bc1\u5b58\u5728\u4e14\u4ec5\u5b58\u5728\u4e00\u4e2a\u6709\u6548\u7b54\u6848\u3002\u4f60\u6240\u8bbe\u8ba1\u7684\u89e3\u51b3\u65b9\u6848\u5fc5\u987b\u53ea\u4f7f\u7528\u5e38\u91cf\u7ea7\u7684\u989d\u5916\u7a7a\u95f4\u3002</p> <p>\u5728 LeetCode\u4e3b\u7ad9 \u6216 \u529b\u6263\u4e2d\u6587\u793e\u533a \u67e5\u770b\u8be5\u9898\u3002</p> \u89e3\u9898\u601d\u8def Go <pre><code>package main\n\nfunc twoSum(numbers []int, target int) []int {\n    l, r := 0, len(numbers)-1\n    for {\n        sum := numbers[l] + numbers[r]\n        if sum == target {\n            return []int{l + 1, r + 1} // \u4e0b\u6807\u4ece 1 \u5f00\u59cb\n        } else if sum &lt; target {\n            l++\n        } else {\n            r--\n        }\n    }\n}\n</code></pre>"},{"location":"basic/sort/permutation-circle/","title":"\u7f6e\u6362\u73af","text":"<p>\u7f6e\u6362\u73af \u7528\u4e8e\u8ba1\u7b97\u901a\u8fc7 \u4e24\u4e24\u4ea4\u6362 \u5c06\u6392\u5217\u53d8\u4e3a\u6709\u5e8f\u7684\u6700\u5c11\u4ea4\u6362\u6b21\u6570\u3002 \u5143\u7d20\u4e92\u4e0d\u76f8\u540c\u7684\u6570\u7ec4\u53ef\u4ee5\u901a\u8fc7\u79bb\u6563\u5316\u8f6c\u4e3a\u6392\u5217\u3002</p>"},{"location":"basic/sort/permutation-circle/#lc2471-\u9010\u5c42\u6392\u5e8f\u6240\u9700\u7684\u6700\u5c11\u64cd\u4f5c\u6570\u76ee","title":"LC2471. \u9010\u5c42\u6392\u5e8f\u6240\u9700\u7684\u6700\u5c11\u64cd\u4f5c\u6570\u76ee","text":"\u95ee\u9898\u63cf\u8ff0 <p>\u7ed9\u4f60\u4e00\u4e2a \u503c\u4e92\u4e0d\u76f8\u540c \u7684\u4e8c\u53c9\u6811\u7684\u6839\u8282\u70b9 <code>root</code> \uff0c\u8282\u70b9\u4e2a\u6570\u8303\u56f4\uff1a<code>[1, 1e5]</code> \uff0c\u8282\u70b9\u503c\u8303\u56f4\uff1a<code>[1, 1e5]</code> \u3002 \u5728\u4e00\u6b65\u64cd\u4f5c\u4e2d\uff0c\u4f60\u53ef\u4ee5\u9009\u62e9 \u540c\u4e00\u5c42 \u4e0a\u4efb\u610f\u4e24\u4e2a\u8282\u70b9\uff0c\u4ea4\u6362\u8fd9\u4e24\u4e2a\u8282\u70b9\u7684\u503c\u3002 \u8fd4\u56de\u6bcf\u4e00\u5c42\u6309 \u4e25\u683c\u9012\u589e\u987a\u5e8f \u6392\u5e8f\u6240\u9700\u7684\u6700\u5c11\u64cd\u4f5c\u6570\u76ee\u3002</p> <p>\u5728 LeetCode\u4e3b\u7ad9 \u6216 \u529b\u6263\u4e2d\u6587\u793e\u533a \u67e5\u770b\u8be5\u9898\u3002</p> \u89e3\u9898\u601d\u8def <p>\u65b9\u6cd5\u4e00\uff1aDFS + \u79bb\u6563\u5316 + \u7f6e\u6362\u73af</p> Go <pre><code>package main\n\nimport \"sort\"\n\ntype TreeNode struct {\n    Val   int\n    Left  *TreeNode\n    Right *TreeNode\n}\n\nfunc minimumOperations(root *TreeNode) (ans int) {\n    var arr [][]int\n    var dfs func(o *TreeNode, d int)\n    dfs = func(o *TreeNode, d int) {\n        if o != nil {\n            if d == len(arr) {\n                arr = append(arr, []int{o.Val})\n            } else {\n                arr[d] = append(arr[d], o.Val)\n            }\n            dfs(o.Left, d+1)\n            dfs(o.Right, d+1)\n        }\n    }\n    dfs(root, 0)\n    for _, values := range arr[1:] {\n        if n := len(values); n &gt; 1 {\n            // \u79bb\u6563\u5316\n            id := make([]int, n)\n            for i := range id {\n                id[i] = i\n            }\n            sort.Slice(id, func(i, j int) bool { return values[id[i]] &lt; values[id[j]] })\n\n            // \u7f6e\u6362\u73af\n            ans += n\n            vis := make([]bool, n)\n            for _, i := range id {\n                if !vis[i] {\n                    for ans--; !vis[i]; i = id[i] {\n                        vis[i] = true\n                    }\n                }\n            }\n        }\n    }\n    return\n}\n</code></pre> <p>\u65b9\u6cd5\u4e8c\uff1aBFS + \u79bb\u6563\u5316 + \u7f6e\u6362\u73af</p> Go <pre><code>package main\n\nimport \"sort\"\n\ntype TreeNode struct {\n    Val   int\n    Left  *TreeNode\n    Right *TreeNode\n}\n\nfunc minimumOperations(root *TreeNode) (ans int) {\n    var tmp []*TreeNode\n    q := []*TreeNode{root}\n    for n := len(q); n &gt; 0; n = len(q) {\n        tmp, q = q, nil\n        for _, o := range tmp {\n            if o.Left != nil {\n                q = append(q, o.Left)\n            }\n            if o.Right != nil {\n                q = append(q, o.Right)\n            }\n        }\n        if n != 1 {\n            // \u79bb\u6563\u5316\n            id := make([]int, n)\n            arr := make([]int, n)\n            for i, o := range tmp {\n                id[i] = i\n                arr[i] = o.Val\n            }\n            sort.Slice(id, func(i, j int) bool { return arr[id[i]] &lt; arr[id[j]] })\n\n            // \u7f6e\u6362\u73af\n            ans += n\n            vis := make([]bool, n)\n            for _, i := range id {\n                if !vis[i] {\n                    for ans--; !vis[i]; i = id[i] {\n                        vis[i] = true\n                    }\n                }\n            }\n        }\n    }\n    return\n}\n</code></pre>"},{"location":"dp/digital/","title":"\u6570\u4f4d DP","text":""},{"location":"dp/digital/#lc357-\u5404\u4f4d\u6570\u5b57\u90fd\u4e0d\u540c\u7684\u6570\u5b57","title":"LC357. \u5404\u4f4d\u6570\u5b57\u90fd\u4e0d\u540c\u7684\u6570\u5b57","text":"\u95ee\u9898\u63cf\u8ff0 <p>\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570 \\(n(0\u2264n\u22648)\\) \uff0c\u7edf\u8ba1\u5e76\u8fd4\u56de\u5404\u4f4d\u6570\u5b57\u90fd\u4e0d\u540c\u7684\u6570\u5b57 \\(x(0\u2264x&lt;10^n)\\) \u7684\u4e2a\u6570\u3002</p> <p>\u5728 LeetCode\u4e3b\u7ad9 \u6216 \u529b\u6263\u4e2d\u6587\u793e\u533a \u67e5\u770b\u8be5\u9898\u3002</p> \u89e3\u9898\u601d\u8def <p>\u6570\u4f4d DP + \u8bb0\u5fc6\u5316\u641c\u7d22</p> Go <pre><code>package main\n\nfunc countNumbersWithUniqueDigits(n int) int {\n    // memo[i][mask]\u8bb0\u5f55 f(i, mask) \u7684\u7ed3\u679c\n    memo := make([][]int, n)\n    for i := range memo {\n        memo[i] = make([]int, 1&lt;&lt;10)\n        for j := range memo[i] {\n            memo[i][j] = -1\n        }\n    }\n    // \u8bb0\u5fc6\u5316\u641c\u7d22\n    // i: \u5f53\u524d\u9009\u62e9\u4ece\u5de6\u81f3\u53f3\u7b2c\u51e0\u4f4d\n    // mask: \u8fdb\u5165\u7b2ci\u4f4d\u4e4b\u524d\u7684\u6570\u5b57\u9009\u62e9\u72b6\u6001\uff0cmask&gt;&gt;d&amp;1 == 1 \u8868\u793a\u6570\u5b57 d\uff080~9\uff09\u5df2\u88ab\u9009\u62e9\uff08\u6709\u6548\u9009\u62e9\uff0c\u524d\u5bfc0\u4e0d\u7b97\uff0c\u7b49\u540c\u4e8e\u672a\u9009\u62e90\uff09\n    var f func(i, mask int) int\n    f = func(i, mask int) (ans int) {\n        if i == n {\n            return 1\n        } else if memo[i][mask] != -1 {\n            return memo[i][mask]\n        } else {\n            // \u9009\u62e90\u4f5c\u4e3a\u5f53\u524d\u4f4d\n            if mask == 0 { // \u5f53\u524d\u4f4d\u9009\u62e90\u53ea\u80fd\u4f5c\u4e3a\u524d\u5bfc0\uff08\u524d\u5bfc0\u7b49\u540c\u4e8e\u672a\u4f7f\u75280\uff0c\u6240\u4ee5mask\u4f9d\u7136\u662f0\uff09\n                ans += f(i+1, mask)\n            } else if mask&amp;1 == 0 { // \u9ad8\u4f4d\u5df2\u7ecf\u9009\u4e86\u975e0\u7684\u6570\u5b57\uff0c\u4e140\u672a\u88ab\u4f7f\u7528\uff0c\u5219\u5f53\u524d\u4f4d\u53ef\u4ee5\u4f7f\u75280\n                ans += f(i+1, mask|1)\n            }\n            // \u9009\u62e91~9\u4f5c\u4e3a\u5f53\u524d\u4f4d\n            for d := 1; d &lt;= 9; d++ {\n                if mask&gt;&gt;d&amp;1 == 0 {\n                    ans += f(i+1, mask|(1&lt;&lt;d))\n                }\n            }\n            memo[i][mask] = ans\n            return ans\n        }\n    }\n    return f(0, 0)\n}\n</code></pre>"},{"location":"dp/digital/#lc1012-\u81f3\u5c11\u6709-1-\u4f4d\u91cd\u590d\u7684\u6570\u5b57","title":"LC1012. \u81f3\u5c11\u6709 1 \u4f4d\u91cd\u590d\u7684\u6570\u5b57","text":"\u95ee\u9898\u63cf\u8ff0 <p>\u7ed9\u5b9a\u6b63\u6574\u6570 \\(n(1\u2264n\u22641e9)\\)\uff0c\u8fd4\u56de\u5728 \\([1, n]\\) \u8303\u56f4\u5185\u5177\u6709 \u81f3\u5c11 \\(1\\) \u4f4d \u91cd\u590d\u6570\u5b57\u7684\u6b63\u6574\u6570\u7684\u4e2a\u6570\u3002</p> <p>\u5728 LeetCode\u4e3b\u7ad9 \u6216 \u529b\u6263\u4e2d\u6587\u793e\u533a \u67e5\u770b\u8be5\u9898\u3002</p> <p>\u5982\u679c\u8981\u7edf\u8ba1\u6bcf\u4e2a\u6570\u4f4d\u4e92\u4e0d\u76f8\u540c\u7684\u6b63\u6574\u6570\u7684\u4e2a\u6570\u5462\uff1f\u53c2\u8003 LC2376. \u7edf\u8ba1\u7279\u6b8a\u6574\u6570\u3002</p> \u89e3\u9898\u601d\u8def <p>\u6570\u4f4d DP + \u8bb0\u5fc6\u5316\u641c\u7d22</p> Go <pre><code>package main\n\nimport \"strconv\"\n\nfunc numDupDigitsAtMostN(n int) int {\n    return n - countSpecialNumbers(n)\n}\n\n// \u7edf\u8ba1[1, n]\u8303\u56f4\u5185\u6bcf\u4e2a\u6570\u4f4d\u4e92\u4e0d\u76f8\u540c\u7684\u6b63\u6574\u6570\u7684\u4e2a\u6570\nfunc countSpecialNumbers(n int) int {\n    s := strconv.Itoa(n)\n    m := len(s)\n    // memo[i][mask]\u8bb0\u5f55 f(i, mask, false) \u7684\u7ed3\u679c\n    memo := make([][]int, m)\n    for i := range memo {\n        memo[i] = make([]int, 1&lt;&lt;10)\n        for j := range memo[i] {\n            memo[i][j] = -1\n        }\n    }\n    // \u8bb0\u5fc6\u5316\u641c\u7d22\n    // i: \u5f53\u524d\u9009\u62e9\u4ece\u5de6\u81f3\u53f3\u7b2c\u51e0\u4f4d\n    // mask: \u8fdb\u5165\u7b2ci\u4f4d\u4e4b\u524d\u7684\u6570\u5b57\u9009\u62e9\u72b6\u6001\uff0cmask&gt;&gt;d&amp;1 == 1 \u8868\u793a\u6570\u5b57 d\uff080~9\uff09\u5df2\u88ab\u9009\u62e9\uff08\u6709\u6548\u9009\u62e9\uff0c\u524d\u5bfc0\u4e0d\u7b97\uff0c\u7b49\u540c\u4e8e\u672a\u9009\u62e90\uff09\n    // limit: \u5f53\u524d\u6570\u4f4d\u662f\u5426\u53d7n\u5bf9\u5e94\u6570\u4f4d\u7684\u9650\u5236\uff0c\u4f8b\u5982n=10\uff0c\u5219\u7b2c0\u4e2a\u6570\u4f4d\u53ea\u80fd\u9009\u62e90\u62161\uff1b\u5982\u679c\u9009\u62e91\uff0c\u5219\u7b2c1\u4e2a\u6570\u4f4d\u4e5f\u53d7\u9650\uff0c\u53ea\u80fd\u9009\u62e90\n    var f func(i, mask int, limit bool) int\n    f = func(i, mask int, limit bool) (ans int) {\n        if i == m {\n            return 1 // \u6682\u4e14\u628a0\uff08mask = 0\uff09\u7b97\u8fdb\u53bb\uff0c\u6700\u7ec8\u7ed3\u679c\u518d\u51cf\u53bb1\n        } else if !limit &amp;&amp; memo[i][mask] != -1 {\n            // limit\u4e3atrue\u65f6\uff0c\u4e0d\u80fd\u4f7f\u7528\u8bb0\u5fc6\u7684\u7ed3\u679c\uff0c\u4e5f\u4e0d\u80fd\u8bb0\u5fc6\u5176\u7ed3\u679c\uff0c\u56e0\u4e3a\u53d7\u9650\u60c5\u51b5\u4e0b\u7684\u7ed3\u679c\u662f\u4e0d\u5b8c\u6574\u7684\n            // \u4f8b\u5982n=210\uff0c\u8fdb\u5165\u6700\u53f3\u4fa7\u6570\u4f4d\u65f6\uff0c\u524d\u4e24\u4f4d\u5206\u522b\u9009\u62e92\u30011\u548c1\u30012\u5bf9\u5e94\u7684mask\u76f8\u540c\uff0c\u4f46\u662f\u9009\u62e92\u30011\u662f\u53d7\u9650\u72b6\u6001\uff0c\u6700\u53f3\u4fa7\u6570\u4f4d\u53ea\u80fd\u9009\u62e90\n            return memo[i][mask]\n        } else {\n            // \u9009\u62e90\u4f5c\u4e3a\u5f53\u524d\u4f4d\n            if mask == 0 { // \u5f53\u524d\u4f4d\u9009\u62e90\u53ea\u80fd\u4f5c\u4e3a\u524d\u5bfc0\uff08\u524d\u5bfc0\u7b49\u540c\u4e8e\u672a\u4f7f\u75280\uff0c\u6240\u4ee5mask\u4f9d\u7136\u662f0\uff09\n                ans += f(i+1, mask, false)\n            } else if mask&amp;1 == 0 { // \u9ad8\u4f4d\u5df2\u7ecf\u9009\u4e86\u975e0\u7684\u6570\u5b57\uff0c\u4e140\u672a\u88ab\u4f7f\u7528\uff0c\u5219\u5f53\u524d\u4f4d\u53ef\u4ee5\u4f7f\u75280\n                ans += f(i+1, mask|1, limit &amp;&amp; s[i] == '0')\n            }\n            // \u9009\u62e91~9\u4f5c\u4e3a\u5f53\u524d\u4f4d\n            upper := 9\n            if limit {\n                upper = int(s[i] &amp; 15)\n            }\n            for d := 1; d &lt;= upper; d++ {\n                if mask&gt;&gt;d&amp;1 == 0 { // 1~9\u53ea\u8981\u8fd8\u672a\u88ab\u4f7f\u7528\uff0c\u5f53\u524d\u4f4d\u5c31\u53ef\u4ee5\u4f7f\u7528\n                    ans += f(i+1, mask|(1&lt;&lt;d), limit &amp;&amp; d == upper)\n                }\n            }\n            if !limit {\n                memo[i][mask] = ans\n            }\n            return\n        }\n    }\n    return f(0, 0, true) - 1\n}\n</code></pre>"},{"location":"dp/digital/#lc600-\u4e0d\u542b\u8fde\u7eed-1-\u7684\u975e\u8d1f\u6574\u6570","title":"LC600. \u4e0d\u542b\u8fde\u7eed 1 \u7684\u975e\u8d1f\u6574\u6570","text":"\u95ee\u9898\u63cf\u8ff0 <p>\u7ed9\u5b9a\u4e00\u4e2a\u6b63\u6574\u6570 \\(n(1\u2264n\u22641e9)\\) \uff0c\u7edf\u8ba1\u5728 \\([0, n]\\) \u8303\u56f4\u7684\u6574\u6570\u4e2d\uff0c\u4e8c\u8fdb\u5236\u8868\u793a\u4e0d\u5b58\u5728 \u8fde\u7eed\u7684 \\(1\\) \u7684\u6574\u6570\u7684\u4e2a\u6570\u3002</p> <p>\u5728 LeetCode\u4e3b\u7ad9 \u6216 \u529b\u6263\u4e2d\u6587\u793e\u533a \u67e5\u770b\u8be5\u9898\u3002</p> \u89e3\u9898\u601d\u8def <p>\u65b9\u6cd5\u4e00\uff1a2\u8fdb\u5236 + \u6570\u4f4d DP + \u8bb0\u5fc6\u5316\u641c\u7d22</p> Go <pre><code>package main\n\nimport \"strconv\"\n\nfunc findIntegers(n int) int {\n    // \u8f6c\u4e3a\u4e8c\u8fdb\u5236\u5b57\u7b26\u4e32\n    s := strconv.FormatInt(int64(n), 2)\n    m := len(s)\n    // memo[i][prev]\u8bb0\u5f55 f(i, prev, false) \u7684\u7ed3\u679c\n    memo := make([][]int, m)\n    for i := range memo {\n        memo[i] = []int{-1, -1}\n    }\n    // \u8bb0\u5fc6\u5316\u641c\u7d22\n    // i: \u5f53\u524d\u9009\u62e9\u4ece\u5de6\u81f3\u53f3\u7b2c\u51e0\u4f4d\n    // prev: \u524d\u4e00\u4e2a2\u8fdb\u5236\u6570\u4f4d\u9009\u62e9\u7684\u6570\u5b57\n    // limit: \u5f53\u524d\u6570\u4f4d\u662f\u5426\u53d7n\u5bf9\u5e94\u6570\u4f4d\u7684\u9650\u5236\uff0c\u4f8b\u5982n=10\uff0c\u5219\u7b2c0\u4e2a\u6570\u4f4d\u53ea\u80fd\u9009\u62e90\u62161\uff1b\u5982\u679c\u9009\u62e91\uff0c\u5219\u7b2c1\u4e2a\u6570\u4f4d\u4e5f\u53d7\u9650\uff0c\u53ea\u80fd\u9009\u62e90\n    var f func(i, prev int, limit bool) int\n    f = func(i, prev int, limit bool) (ans int) {\n        if i == m {\n            return 1\n        } else if !limit &amp;&amp; memo[i][prev] != -1 {\n            return memo[i][prev]\n        } else {\n            // \u9009\u62e90\n            ans += f(i+1, 0, limit &amp;&amp; s[i] == '0')\n            // \u9009\u62e91\n            if prev == 0 &amp;&amp; (!limit || s[i] == '1') {\n                ans += f(i+1, 1, limit &amp;&amp; s[i] == '1')\n            }\n            if !limit {\n                memo[i][prev] = ans\n            }\n            return ans\n        }\n    }\n    return f(0, 0, true)\n}\n</code></pre> <p>\u65b9\u6cd5\u4e8c\uff1a4\u8fdb\u5236 + \u6570\u4f4d DP + \u8bb0\u5fc6\u5316\u641c\u7d22</p> Go <pre><code>package main\n\nimport \"strconv\"\n\nfunc findIntegers(n int) int {\n    // \u8f6c\u4e3a4\u8fdb\u5236\u5b57\u7b26\u4e32\n    s := strconv.FormatInt(int64(n), 4)\n    m := len(s)\n    // memo[i][prev]\u8bb0\u5f55 f(i, prev, false) \u7684\u7ed3\u679c\n    memo := make([][]int, m)\n    for i := range memo {\n        memo[i] = make([]int, 4)\n        for j := range memo[i] {\n            memo[i][j] = -1\n        }\n    }\n    // \u8bb0\u5fc6\u5316\u641c\u7d22\n    // i: \u5f53\u524d\u9009\u62e9\u4ece\u5de6\u81f3\u53f3\u7b2c\u51e0\u4f4d\n    // prev: \u524d\u4e00\u4e2a4\u8fdb\u5236\u6570\u4f4d\u9009\u62e9\u7684\u6570\u5b57\n    // limit: \u5f53\u524d\u6570\u4f4d\u662f\u5426\u53d7n\u5bf9\u5e94\u6570\u4f4d\u7684\u9650\u5236\uff0c\u4f8b\u5982n=10\uff0c\u5219\u7b2c0\u4e2a\u6570\u4f4d\u53ea\u80fd\u9009\u62e90\u62161\uff1b\u5982\u679c\u9009\u62e91\uff0c\u5219\u7b2c1\u4e2a\u6570\u4f4d\u4e5f\u53d7\u9650\uff0c\u53ea\u80fd\u9009\u62e90\n    var f func(i, prev int, limit bool) int\n    f = func(i, prev int, limit bool) (ans int) {\n        if i == m {\n            return 1\n        } else if !limit &amp;&amp; memo[i][prev] != -1 {\n            // limit\u4e3atrue\u65f6\uff0c\u4e0d\u80fd\u4f7f\u7528\u8bb0\u5fc6\u7684\u7ed3\u679c\uff0c\u4e5f\u4e0d\u80fd\u8bb0\u5fc6\u5176\u7ed3\u679c\uff0c\u56e0\u4e3a\u53d7\u9650\u60c5\u51b5\u4e0b\u7684\u7ed3\u679c\u662f\u4e0d\u5b8c\u6574\u7684\n            return memo[i][prev]\n        } else {\n            upper := 3\n            if limit {\n                upper = int(s[i] &amp; 15)\n            }\n            for d := 0; d &lt;= upper &amp;&amp; d &lt; 3; d++ {\n                if d &lt; 2 || prev != 1 { // \u5f53\u524d4\u8fdb\u5236\u4f4d\u53ef\u4ee5\u662f0\u30011\u30012\uff0c\u4e14\u524d\u4e00\u4f4d\u4e3a1\u65f6\uff0c\u5f53\u524d\u4f4d\u4e0d\u80fd\u662f2\n                    ans += f(i+1, d, limit &amp;&amp; d == upper)\n                }\n            }\n            if !limit {\n                memo[i][prev] = ans\n            }\n            return\n        }\n    }\n    return f(0, 0, true)\n}\n</code></pre>"},{"location":"dp/digital/#lc902-\u6700\u5927\u4e3a-n-\u7684\u6570\u5b57\u7ec4\u5408","title":"LC902. \u6700\u5927\u4e3a N \u7684\u6570\u5b57\u7ec4\u5408","text":"\u95ee\u9898\u63cf\u8ff0 <p>\u7ed9\u5b9a\u4e00\u4e2a\u6309 \u4e25\u683c\u9012\u589e\u987a\u5e8f \u6392\u5217\u7684\u6570\u5b57\u6570\u7ec4 <code>digits</code> \uff0c<code>'1'\u2264digits[i]\u2264'9'</code> \u3002 \u4f60\u53ef\u4ee5\u7528\u4efb\u610f\u6b21\u6570\u7684 <code>digits[i]</code> \u6765\u5199\u6570\u5b57\u3002\u4f8b\u5982\uff0c\u5982\u679c <code>digits = ['1','3','5']</code> \uff0c\u6211\u4eec\u53ef\u4ee5\u5199\u6570\u5b57\uff0c\u5982 <code>'13'</code>, <code>'551'</code>, \u548c <code>'1351315'</code> \u3002 \u8fd4\u56de\u53ef\u4ee5\u751f\u6210\u7684\u5c0f\u4e8e\u6216\u7b49\u4e8e\u7ed9\u5b9a\u6574\u6570 <code>n</code> \u7684\u6b63\u6574\u6570\u7684\u4e2a\u6570 \u3002</p> <p>\u5728 LeetCode\u4e3b\u7ad9 \u6216 \u529b\u6263\u4e2d\u6587\u793e\u533a \u67e5\u770b\u8be5\u9898\u3002</p> \u89e3\u9898\u601d\u8def <p>\u6570\u4f4d DP + \u8bb0\u5fc6\u5316\u641c\u7d22</p> Go <pre><code>package main\n\nimport \"strconv\"\n\nfunc atMostNGivenDigitSet(digits []string, n int) int {\n    s := strconv.Itoa(n)\n    m := len(s)\n    // \u9884\u5904\u7406\u53ef\u4ee5\u9009\u62e9\u7684\u6570\u5b57\n    ds := make([]int, len(digits))\n    for i, d := range digits {\n        ds[i] = int(d[0] &amp; 15)\n    }\n    // memo[i][selected]\u8bb0\u5f55 f(i, selected, false) \u7684\u7ed3\u679c\n    memo := make([][]int, m)\n    for i := range memo {\n        memo[i] = []int{-1, -1}\n    }\n    // \u8bb0\u5fc6\u5316\u641c\u7d22\n    // i: \u5f53\u524d\u9009\u62e9\u4ece\u5de6\u81f3\u53f3\u7b2c\u51e0\u4f4d\n    // selected: \u8fdb\u5165\u7b2ci\u4f4d\u4e4b\u524d\u662f\u5426\u5df2\u9009\u62e9digits\u4e2d\u7684\u6570\u5b57\uff0cselected==0\u8868\u793a\u672a\u9009\u62e9\uff0c\u53ea\u6709\u524d\u5bfc0\uff1bselected==1\u8868\u793a\u5df2\u9009\u62e9\u8fc7\n    // limit: \u5f53\u524d\u6570\u4f4d\u662f\u5426\u53d7n\u5bf9\u5e94\u6570\u4f4d\u7684\u9650\u5236\uff0c\u4f8b\u5982n=10\uff0c\u5219\u7b2c0\u4e2a\u6570\u4f4d\u53ea\u80fd\u9009\u62e90\u62161\uff1b\u5982\u679c\u9009\u62e91\uff0c\u5219\u7b2c1\u4e2a\u6570\u4f4d\u4e5f\u53d7\u9650\uff0c\u53ea\u80fd\u9009\u62e90\n    var f func(i, selected int, limit bool) int\n    f = func(i, selected int, limit bool) (ans int) {\n        if i == m {\n            return selected // \u8ba1\u7b97\u6b63\u6574\u6570\u7684\u4e2a\u6570\n        } else if !limit &amp;&amp; memo[i][selected] != -1 {\n            // limit\u4e3atrue\u65f6\uff0c\u4e0d\u80fd\u4f7f\u7528\u8bb0\u5fc6\u7684\u7ed3\u679c\uff0c\u4e5f\u4e0d\u80fd\u8bb0\u5fc6\u5176\u7ed3\u679c\uff0c\u56e0\u4e3a\u53d7\u9650\u60c5\u51b5\u4e0b\u7684\u7ed3\u679c\u662f\u4e0d\u5b8c\u6574\u7684\n            return memo[i][selected]\n        } else {\n            if selected == 0 {\n                ans += f(i+1, selected, false) // \u5f53\u524d\u6570\u4f4d\u7ee7\u7eed\u4e0d\u9009\u62e9\n            }\n            upper := 9\n            if limit {\n                upper = int(s[i] &amp; 15)\n            }\n            for _, d := range ds {\n                if d &gt; upper {\n                    break\n                } else {\n                    ans += f(i+1, 1, limit &amp;&amp; d == upper) // \u5f53\u524d\u6570\u4f4d\u9009\u62e9\u6570\u5b57d\n                }\n            }\n            if !limit {\n                memo[i][selected] = ans\n            }\n            return\n        }\n    }\n    return f(0, 0, true)\n}\n</code></pre>"},{"location":"dp/digital/#lc788-\u65cb\u8f6c\u6570\u5b57","title":"LC788. \u65cb\u8f6c\u6570\u5b57","text":"\u95ee\u9898\u63cf\u8ff0 <p>\u6211\u4eec\u79f0\u4e00\u4e2a\u6570 X \u4e3a\u597d\u6570, \u5982\u679c\u5b83\u7684\u6bcf\u4f4d\u6570\u5b57\u9010\u4e2a\u5730\u88ab\u65cb\u8f6c 180 \u5ea6\u540e\uff0c\u6211\u4eec\u4ecd\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u6709\u6548\u7684\uff0c\u4e14\u548c X \u4e0d\u540c\u7684\u6570\u3002\u8981\u6c42\u6bcf\u4f4d\u6570\u5b57\u90fd\u8981\u88ab\u65cb\u8f6c\u3002 \u5982\u679c\u4e00\u4e2a\u6570\u7684\u6bcf\u4f4d\u6570\u5b57\u88ab\u65cb\u8f6c\u4ee5\u540e\u4ecd\u7136\u8fd8\u662f\u4e00\u4e2a\u6570\u5b57\uff0c \u5219\u8fd9\u4e2a\u6570\u662f\u6709\u6548\u7684\u30020, 1, \u548c 8 \u88ab\u65cb\u8f6c\u540e\u4ecd\u7136\u662f\u5b83\u4eec\u81ea\u5df1\uff1b2 \u548c 5 \u53ef\u4ee5\u4e92\u76f8\u65cb\u8f6c\u6210\u5bf9\u65b9\uff08\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5b83\u4eec\u4ee5\u4e0d\u540c\u7684\u65b9\u5411\u65cb\u8f6c\uff0c\u6362\u53e5\u8bdd\u8bf4\uff0c2 \u548c 5 \u4e92\u4e3a\u955c\u50cf\uff09\uff1b6 \u548c 9 \u540c\u7406\uff0c\u9664\u4e86\u8fd9\u4e9b\u4ee5\u5916\u5176\u4ed6\u7684\u6570\u5b57\u65cb\u8f6c\u4ee5\u540e\u90fd\u4e0d\u518d\u662f\u6709\u6548\u7684\u6570\u5b57\u3002 \u73b0\u5728\u6211\u4eec\u6709\u4e00\u4e2a\u6b63\u6574\u6570 <code>N(1\u2264N\u22641e4)</code> , \u8ba1\u7b97\u4ece <code>1</code> \u5230 <code>N</code> \u4e2d\u6709\u591a\u5c11\u4e2a\u6570 X \u662f\u597d\u6570\uff1f</p> <p>\u5728 LeetCode\u4e3b\u7ad9 \u6216 \u529b\u6263\u4e2d\u6587\u793e\u533a \u67e5\u770b\u8be5\u9898\u3002</p> \u89e3\u9898\u601d\u8def <p>\u6570\u4f4d DP + \u8bb0\u5fc6\u5316\u641c\u7d22</p> <p>\u9898\u76ee\u6570\u636e\u8303\u56f4\u8f83\u5c0f\uff0c\u53ef\u4ee5\u76f4\u63a5\u679a\u4e3e\u7edf\u8ba1\u3002\u4f46\u5982\u679c\u6570\u636e\u8303\u56f4\u589e\u5927\u81f3 <code>1e9</code> \uff0c\u5219\u9700\u8981\u901a\u8fc7\u6570\u4f4d DP \u6c42\u89e3\u3002</p> Go <pre><code>package main\n\nimport \"strconv\"\n\n// score[d]==1\u8868\u793a\u81f3\u5c11\u9700\u8981\u5305\u542b\u4e00\u4e2a\u6570\u5b57d\uff0cscore[d]==-1\u8868\u793a\u4e0d\u80fd\u5305\u542b\u6570\u5b57d\nvar score = []int{0, 0, 1, -1, -1, 1, 1, -1, 0, 1}\n\nfunc rotatedDigits1(n int) int {\n    s := strconv.Itoa(n)\n    m := len(s)\n    // memo[i][diff]\u8bb0\u5f55 f(i, diff, false) \u7684\u7ed3\u679c\n    memo := make([][]int, m)\n    for i := range memo {\n        memo[i] = []int{-1, -1}\n    }\n    // \u8bb0\u5fc6\u5316\u641c\u7d22\n    // i: \u5f53\u524d\u9009\u62e9\u4ece\u5de6\u81f3\u53f3\u7b2c\u51e0\u4f4d\n    // diff: \u8fdb\u5165\u7b2ci\u4f4d\u4e4b\u524d\u662f\u5426\u5df2\u9009\u62e9\u8fc72\u30015\u30016\u30019\uff0cdiff==0\u8868\u793a\u672a\u9009\u62e9\u8fc7\uff0cdiff==1\u8868\u793a\u9009\u62e9\u8fc7\n    // limit: \u5f53\u524d\u6570\u4f4d\u662f\u5426\u53d7n\u5bf9\u5e94\u6570\u4f4d\u7684\u9650\u5236\uff0c\u4f8b\u5982n=10\uff0c\u5219\u7b2c0\u4e2a\u6570\u4f4d\u53ea\u80fd\u9009\u62e90\u62161\uff1b\u5982\u679c\u9009\u62e91\uff0c\u5219\u7b2c1\u4e2a\u6570\u4f4d\u4e5f\u53d7\u9650\uff0c\u53ea\u80fd\u9009\u62e90\n    var f func(i, diff int, limit bool) int\n    f = func(i, diff int, limit bool) (ans int) {\n        if i == m {\n            return diff\n        } else if !limit &amp;&amp; memo[i][diff] != -1 {\n            // limit\u4e3atrue\u65f6\uff0c\u4e0d\u80fd\u4f7f\u7528\u8bb0\u5fc6\u7684\u7ed3\u679c\uff0c\u4e5f\u4e0d\u80fd\u8bb0\u5fc6\u5176\u7ed3\u679c\uff0c\u56e0\u4e3a\u53d7\u9650\u60c5\u51b5\u4e0b\u7684\u7ed3\u679c\u662f\u4e0d\u5b8c\u6574\u7684\n            return memo[i][diff]\n        } else {\n            upper := 9\n            if limit {\n                upper = int(s[i] &amp; 15)\n            }\n            for d := 0; d &lt;= upper; d++ {\n                if score[d] != -1 {\n                    ans += f(i+1, diff|score[d], limit &amp;&amp; d == upper)\n                }\n            }\n            if !limit {\n                memo[i][diff] = ans\n            }\n            return ans\n        }\n    }\n    return f(0, 0, true)\n}\n</code></pre>"},{"location":"dp/digital/#lc233-\u6570\u5b57-1-\u7684\u4e2a\u6570","title":"LC233. \u6570\u5b57 1 \u7684\u4e2a\u6570","text":"\u95ee\u9898\u63cf\u8ff0 <p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570 \\(n(0\u2264n\u22641e9)\\) \uff0c\u8ba1\u7b97\u6240\u6709\u5c0f\u4e8e\u7b49\u4e8e \\(n\\) \u7684\u975e\u8d1f\u6574\u6570\u4e2d\u6570\u5b57 \\(1\\) \u51fa\u73b0\u7684\u4e2a\u6570\u3002</p> <p>\u5728 LeetCode\u4e3b\u7ad9 \u6216 \u529b\u6263\u4e2d\u6587\u793e\u533a \u67e5\u770b\u8be5\u9898\u3002</p> <p>\u5982\u679c\u8981\u7edf\u8ba1\u6570\u5b57 \\(2\\) \u51fa\u73b0\u7684\u4e2a\u6570\u5462\uff1f\u53c2\u8003 LC\u9762\u8bd5\u9898 17.06. 2\u51fa\u73b0\u7684\u6b21\u6570\u3002</p> \u89e3\u9898\u601d\u8def <p>\u65b9\u6cd5\u4e00\uff1a\u6570\u5b66</p> <p>\u7d2f\u52a0\u6bcf\u4e00\u4e2a\u6570\u4f4d\u4e0a\u6570\u5b57 \\(d\\) \u51fa\u73b0\u7684\u4e2a\u6570\uff0c\u672c\u9898\u4e2d \\(d = 1\\) \u3002 \u4ee5 \\(n = 1234567\\) \u4e3a\u4f8b\uff0c\u8ba1\u7b97\u767e\u4f4d\u4e0a\u51fa\u73b0\u6570\u5b57 \\(d\\) \u7684\u6b21\u6570\u3002 \u9996\u5148 \\(n\\) \u6709 \\(1234\\) \u4e2a\u5b8c\u6574\u7684 \\([000,999]\\) \u7684\u5faa\u73af\uff0c\u6bcf\u4e2a\u5faa\u73af\u767e\u4f4d\u4e0a\u90fd\u4f1a\u51fa\u73b0 \\(100\\) \u6b21\u6570\u5b57 \\(d\\) \u3002 \u5bf9\u4e8e\u5269\u4f59\u7684 \\(m = 567\\) \uff0c\u5206\u60c5\u51b5\u8ba8\u8bba\uff1a</p> <ul> <li>\u5982\u679c \\(m&lt;d*100\\) \uff0c\u5219\u767e\u4f4d\u4e0a\u4e0d\u4f1a\u51fa\u73b0\u6570\u5b57 \\(d\\) \uff1b</li> <li>\u5982\u679c \\(d*100\u2264m&lt;(d+1)*100\\) \uff0c\u5219\u767e\u4f4d\u4e0a\u4f1a\u51fa\u73b0 \\(m-d*100+1\\) \u6b21\u6570\u5b57 \\(d\\) \uff1b</li> <li>\u5982\u679c \\(m\u2265(d+1)*100\\) \uff0c\u5219\u767e\u4f4d\u4e0a\u4f1a\u51fa\u73b0\u5168\u90e8\u7684 \\(100\\) \u6b21\u6570\u5b57 \\(d\\) \u3002</li> </ul> Go <pre><code>package main\n\nfunc countDigitOne(n int) int {\n    return countDigit(n, 1)\n}\n\nfunc countDigit(n, d int) (ans int) {\n    // pow10k\u8868\u793a10^k\n    for pow10k := 1; n &gt;= pow10k; pow10k *= 10 {\n        // \u7d2f\u52a0pow10k\u6570\u4f4d\u51fa\u73b0\u6570\u5b57d\u7684\u4e2a\u6570\n        // pow10k == 1, 10, 100, ... \u5206\u522b\u7d2f\u52a0 \u4e2a\u4f4d, \u5341\u4f4d, \u767e\u4f4d, ... \u51fa\u73b0\u6570\u5b57d\u7684\u4e2a\u6570\n        ans += n/(10*pow10k)*pow10k + min(max(n%(10*pow10k)-d*pow10k+1, 0), pow10k)\n    }\n    return\n}\n\nfunc min(x, y int) int {\n    if x &lt; y {\n        return x\n    } else {\n        return y\n    }\n}\n\nfunc max(x, y int) int {\n    if x &gt; y {\n        return x\n    } else {\n        return y\n    }\n}\n</code></pre> <p>\u65b9\u6cd5\u4e8c\uff1a\u6570\u4f4d DP + \u8bb0\u5fc6\u5316\u641c\u7d22</p> Go <pre><code>package main\n\nimport \"strconv\"\n\nfunc countDigitOne(n int) int {\n    s := strconv.Itoa(n)\n    m := len(s)\n    // memo[i][cnt]\u8bb0\u5f55 f(i, cnt, false) \u7684\u7ed3\u679c\n    memo := make([][]int, m)\n    for i := range memo {\n        memo[i] = make([]int, m)\n        for j := range memo[i] {\n            memo[i][j] = -1\n        }\n    }\n    // \u8bb0\u5fc6\u5316\u641c\u7d22\n    // i: \u5f53\u524d\u9009\u62e9\u4ece\u5de6\u81f3\u53f3\u7b2c\u51e0\u4f4d\n    // cnt: \u8fdb\u5165\u7b2ci\u4f4d\u4e4b\u524d\u6570\u5b571\u51fa\u73b0\u7684\u6b21\u6570\n    // limit: \u5f53\u524d\u6570\u4f4d\u662f\u5426\u53d7n\u5bf9\u5e94\u6570\u4f4d\u7684\u9650\u5236\uff0c\u4f8b\u5982n=10\uff0c\u5219\u7b2c0\u4e2a\u6570\u4f4d\u53ea\u80fd\u9009\u62e90\u62161\uff1b\u5982\u679c\u9009\u62e91\uff0c\u5219\u7b2c1\u4e2a\u6570\u4f4d\u4e5f\u53d7\u9650\uff0c\u53ea\u80fd\u9009\u62e90\n    var f func(i, cnt int, limit bool) int\n    f = func(i, cnt int, limit bool) (ans int) {\n        if i == m {\n            return cnt\n        } else if !limit &amp;&amp; memo[i][cnt] != -1 {\n            // limit\u4e3atrue\u65f6\uff0c\u4e0d\u80fd\u4f7f\u7528\u8bb0\u5fc6\u7684\u7ed3\u679c\uff0c\u4e5f\u4e0d\u80fd\u8bb0\u5fc6\u5176\u7ed3\u679c\uff0c\u56e0\u4e3a\u53d7\u9650\u60c5\u51b5\u4e0b\u7684\u7ed3\u679c\u662f\u4e0d\u5b8c\u6574\u7684\n            return memo[i][cnt]\n        } else {\n            upper := 9\n            if limit {\n                upper = int(s[i] &amp; 15)\n            }\n            for d := 0; d &lt;= upper; d++ {\n                if d == 1 {\n                    ans += f(i+1, cnt+1, limit &amp;&amp; d == upper)\n                } else {\n                    ans += f(i+1, cnt, limit &amp;&amp; d == upper)\n                }\n            }\n            if !limit {\n                memo[i][cnt] = ans\n            }\n            return\n        }\n    }\n    return f(0, 0, true)\n}\n</code></pre>"},{"location":"dp/digital/#lg2602-zjoi2010-\u6570\u5b57\u8ba1\u6570","title":"LG2602. [ZJOI2010] \u6570\u5b57\u8ba1\u6570","text":"\u95ee\u9898\u63cf\u8ff0 <p>\u8f93\u5165\u4e24\u4e2a\u6b63\u6574\u6570 \\(a\\) \u548c \\(b\\) \uff0c\\(1\u2264a\u2264b\u22641e12\\)\uff0c\u6c42\u5728 \\([a,b]\\) \u4e2d\u7684\u6240\u6709\u6574\u6570\u4e2d\uff0c\u6bcf\u4e2a\u6570\u7801(digit)\u5404\u51fa\u73b0\u4e86\u591a\u5c11\u6b21\u3002</p> <p>\u5728 \u6d1b\u8c37 \u67e5\u770b\u8be5\u9898\u3002</p> \u89e3\u9898\u601d\u8def <p>\u6570\u4f4d DP + \u8bb0\u5fc6\u5316\u641c\u7d22</p> GoJava <pre><code>package main\n\nimport (\n    \"bufio\"\n    . \"fmt\"\n    \"os\"\n    \"strconv\"\n    \"strings\"\n)\n\nfunc main() {\n    in := bufio.NewReader(os.Stdin)\n    out := bufio.NewWriter(os.Stdout)\n    defer out.Flush()\n\n    var a, b int\n    Fscan(in, &amp;a, &amp;b)\n    low, high := strconv.Itoa(a), strconv.Itoa(b)\n    m, n := len(low), len(high)\n    if m &lt; n {\n        low = strings.Repeat(\"0\", n-m) + low\n    }\n    for d := byte('0'); d &lt;= '9'; d++ {\n        Fprint(out, countDigit(d, n, low, high), \" \")\n    }\n}\n\nfunc countDigit(d byte, n int, low, high string) int {\n    // memo[i][cnt]\u8bb0\u5f55 f(i, cnt, false, false, false) \u7684\u7ed3\u679c\n    memo := make([][]int, n)\n    for i := range memo {\n        memo[i] = make([]int, n)\n        for j := range memo[i] {\n            memo[i][j] = -1\n        }\n    }\n    // \u8bb0\u5fc6\u5316\u641c\u7d22\n    // i: \u5f53\u524d\u9009\u62e9\u4ece\u5de6\u81f3\u53f3\u7b2c\u51e0\u4f4d\n    // cnt: \u8fdb\u5165\u7b2ci\u4f4d\u4e4b\u524d\u6570\u5b57d\u51fa\u73b0\u7684\u6b21\u6570\n    // zero: \u8fdb\u5165\u7b2ci\u4f4d\u4e4b\u524d\u662f\u5426\u672a\u9009\u62e9\u975e0\u6570\u5b57\uff0c\u5982\u679c\u672a\u9009\u62e9\u5219\u5f53\u524d\u4f4d\u53ef\u4ee5\u9009\u62e90\u4f5c\u4e3a\u524d\u7f000\n    // limitLower: \u5f53\u524d\u4f4d\u662f\u5426\u53d7low\u5bf9\u5e94\u4f4d\u7684\u9650\u5236\uff0c\u5982\u679c\u53d7\u9650\u5219\u5f53\u524d\u4f4d\u53ea\u80fd\u9009\u62e9\u5927\u4e8e\u7b49\u4e8elow[i]\u7684\u5b57\u7b26\n    // limitUpper: \u5f53\u524d\u4f4d\u662f\u5426\u53d7high\u5bf9\u5e94\u4f4d\u7684\u9650\u5236\uff0c\u5982\u679c\u53d7\u9650\u5219\u5f53\u524d\u4f4d\u53ea\u80fd\u9009\u62e9\u5c0f\u4e8e\u7b49\u4e8ehigh[i]\u7684\u5b57\u7b26\n    var f func(i, cnt int, zero, limitLower, limitUpper bool) int\n    f = func(i, cnt int, zero, limitLower, limitUpper bool) (ans int) {\n        if i == n {\n            return cnt\n        } else if !zero &amp;&amp; !limitLower &amp;&amp; !limitUpper &amp;&amp; memo[i][cnt] != -1 {\n            // \u53d7\u9650\u60c5\u51b5\u4e0b\uff0c\u4e0d\u80fd\u4f7f\u7528\u8bb0\u5fc6\u7684\u7ed3\u679c\uff0c\u4e5f\u4e0d\u80fd\u8bb0\u5fc6\u5176\u7ed3\u679c\uff0c\u56e0\u4e3a\u53d7\u9650\u60c5\u51b5\u4e0b\u7684\u7ed3\u679c\u662f\u4e0d\u5b8c\u6574\u7684\n            return memo[i][cnt]\n        } else {\n            var lower, upper byte = '0', '9'\n            if limitLower {\n                lower = low[i]\n            }\n            if limitUpper {\n                upper = high[i]\n            }\n            for b := lower; b &lt;= upper; b++ {\n                zo := zero &amp;&amp; b == '0'\n                ll := limitLower &amp;&amp; b == lower\n                lu := limitUpper &amp;&amp; b == upper\n                if !zo &amp;&amp; b == d {\n                    ans += f(i+1, cnt+1, zo, ll, lu)\n                } else {\n                    ans += f(i+1, cnt, zo, ll, lu)\n                }\n            }\n            if !zero &amp;&amp; !limitLower &amp;&amp; !limitUpper {\n                memo[i][cnt] = ans\n            }\n            return ans\n        }\n    }\n    return f(0, 0, true, true, true)\n}\n</code></pre> <pre><code>import java.io.*;\nimport java.util.*;\n\npublic class Main {\n\n    static BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n    static PrintWriter out = new PrintWriter(System.out);\n\n    public static void main(String[] args) throws Exception {\n        StringTokenizer ab = new StringTokenizer(in.readLine());\n        long a = Long.parseLong(ab.nextToken());\n        long b = Long.parseLong(ab.nextToken());\n        high = String.valueOf(b).toCharArray();\n        n = high.length;\n        String s = String.format(\"%013d\", a);\n        low = s.substring(13 - n, 13).toCharArray();\n        memo = new long[n][n];\n        for (d = '0'; d &lt;= '9'; d++) {\n            out.printf(\"%d \", countDigit());\n        }\n        out.flush();\n        out.close();\n        in.close();\n    }\n\n    static int n;\n    static char[] low, high;\n    static long[][] memo;\n    static char d;\n\n    private static long countDigit() {\n        // memo[i][cnt]\u8bb0\u5f55 f(i, cnt, false, false, false) \u7684\u7ed3\u679c\n        for (int i = 0; i &lt; n; i++) {\n            for (int j = 0; j &lt; n; j++) {\n                memo[i][j] = -1;\n            }\n        }\n        return f(0, 0, true, true, true);\n    }\n\n    /**\n     * \u8bb0\u5fc6\u5316\u641c\u7d22\n     * \n     * @param i          \u5f53\u524d\u9009\u62e9\u4ece\u5de6\u81f3\u53f3\u7b2c\u51e0\u4f4d\n     * @param cnt        \u8fdb\u5165\u7b2ci\u4f4d\u4e4b\u524d\u6570\u5b57d\u51fa\u73b0\u7684\u6b21\u6570\n     * @param zero       \u8fdb\u5165\u7b2ci\u4f4d\u4e4b\u524d\u662f\u5426\u672a\u9009\u62e9\u975e0\u6570\u5b57\uff0c\u5982\u679c\u672a\u9009\u62e9\u5219\u5f53\u524d\u4f4d\u53ef\u4ee5\u9009\u62e90\u4f5c\u4e3a\u524d\u7f000\n     * @param limitLower \u5f53\u524d\u4f4d\u662f\u5426\u53d7low\u5bf9\u5e94\u4f4d\u7684\u9650\u5236\uff0c\u5982\u679c\u53d7\u9650\u5219\u5f53\u524d\u4f4d\u53ea\u80fd\u9009\u62e9\u5927\u4e8e\u7b49\u4e8elow[i]\u7684\u5b57\u7b26\n     * @param limitUpper \u5f53\u524d\u4f4d\u662f\u5426\u53d7high\u5bf9\u5e94\u4f4d\u7684\u9650\u5236\uff0c\u5982\u679c\u53d7\u9650\u5219\u5f53\u524d\u4f4d\u53ea\u80fd\u9009\u62e9\u5c0f\u4e8e\u7b49\u4e8ehigh[i]\u7684\u5b57\u7b26\n     */\n    private static long f(int i, int cnt, boolean zero, boolean limitLower, boolean limitUpper) {\n        if (i == n) {\n            return cnt;\n        } else if (!zero &amp;&amp; !limitLower &amp;&amp; !limitUpper &amp;&amp; memo[i][cnt] != -1) {\n            // \u53d7\u9650\u60c5\u51b5\u4e0b\uff0c\u4e0d\u80fd\u4f7f\u7528\u8bb0\u5fc6\u7684\u7ed3\u679c\uff0c\u4e5f\u4e0d\u80fd\u8bb0\u5fc6\u5176\u7ed3\u679c\uff0c\u56e0\u4e3a\u53d7\u9650\u60c5\u51b5\u4e0b\u7684\u7ed3\u679c\u662f\u4e0d\u5b8c\u6574\u7684\n            return memo[i][cnt];\n        } else {\n            long ans = 0;\n            char lower = limitLower ? low[i] : '0';\n            char upper = limitUpper ? high[i] : '9';\n            for (char c = lower; c &lt;= upper; c++) {\n                boolean zo = zero &amp;&amp; c == '0';\n                boolean ll = limitLower &amp;&amp; c == lower;\n                boolean lu = limitUpper &amp;&amp; c == upper;\n                if (!zo &amp;&amp; c == d) {\n                    ans += f(i + 1, cnt + 1, zo, ll, lu);\n                } else {\n                    ans += f(i + 1, cnt, zo, ll, lu);\n                }\n            }\n            if (!zero &amp;&amp; !limitLower &amp;&amp; !limitUpper) {\n                memo[i][cnt] = ans;\n            }\n            return ans;\n        }\n    }\n}\n</code></pre>"},{"location":"dp/digital/#lc1397-\u627e\u5230\u6240\u6709\u597d\u5b57\u7b26\u4e32","title":"LC1397. \u627e\u5230\u6240\u6709\u597d\u5b57\u7b26\u4e32","text":"\u95ee\u9898\u63cf\u8ff0 <p>\u7ed9\u4f60\u4e24\u4e2a\u957f\u5ea6\u4e3a <code>n(1\u2264n\u2264500)</code> \u7684\u5b57\u7b26\u4e32 <code>s1</code> \u548c <code>s2</code> \uff0c<code>s1&lt;=s2</code> \uff0c\u4ee5\u53ca\u4e00\u4e2a\u5b57\u7b26\u4e32 <code>evil</code> \u3002 \u597d\u5b57\u7b26\u4e32 \u7684\u5b9a\u4e49\u4e3a\uff1a\u957f\u5ea6\u4e3a <code>n</code> \uff0c\u5b57\u5178\u5e8f\u5927\u4e8e\u7b49\u4e8e <code>s1</code> \u5c0f\u4e8e\u7b49\u4e8e <code>s2</code> \uff0c\u4e14\u4e0d\u5305\u542b <code>evil</code> \u4e3a\u5b50\u5b57\u7b26\u4e32\u3002 \u8bf7\u4f60\u8fd4\u56de\u597d\u5b57\u7b26\u4e32\u7684\u6570\u76ee\u3002\u7531\u4e8e\u7b54\u6848\u53ef\u80fd\u5f88\u5927\uff0c\u8bf7\u4f60\u8fd4\u56de\u7b54\u6848\u5bf9 <code>1e9 + 7</code> \u53d6\u4f59\u7684\u7ed3\u679c\u3002</p> <p>\u5728 LeetCode\u4e3b\u7ad9 \u6216 \u529b\u6263\u4e2d\u6587\u793e\u533a \u67e5\u770b\u8be5\u9898\u3002</p> \u89e3\u9898\u601d\u8def <p>KMP + \u6570\u4f4d DP + \u8bb0\u5fc6\u5316\u641c\u7d22</p> Go <pre><code>package main\n\nfunc findGoodStrings(n int, s1 string, s2 string, evil string) int {\n    const mod = 1e9 + 7\n    maxMatchLens := calcMaxMatchLens(evil)\n    m := len(evil)\n    // memo[i][matchLen]\u8bb0\u5f55 f(i, matchLen, false, false) \u7684\u7ed3\u679c\n    memo := make([][]int, n)\n    for i := range memo {\n        memo[i] = make([]int, m)\n        for j := range memo[i] {\n            memo[i][j] = -1\n        }\n    }\n    // \u8bb0\u5fc6\u5316\u641c\u7d22\n    // i: \u5f53\u524d\u9009\u62e9\u4ece\u5de6\u81f3\u53f3\u7b2c\u51e0\u4f4d\n    // matchLen: \u8fdb\u5165\u7b2ci\u4f4d\u4e4b\u524d\u9009\u62e9\u7684\u5b57\u7b26\u4e32\u7684\u540e\u7f00\u4e0e\u6a21\u5f0f\u4e32evil\u7684\u6700\u5927\u5339\u914d\u957f\u5ea6\n    // limitLower: \u5f53\u524d\u4f4d\u662f\u5426\u53d7s1\u5bf9\u5e94\u4f4d\u7684\u9650\u5236\uff0c\u5982\u679c\u53d7\u9650\u5219\u5f53\u524d\u4f4d\u53ea\u80fd\u9009\u62e9\u5927\u4e8e\u7b49\u4e8es1[i]\u7684\u5b57\u7b26\n    // limitUpper: \u5f53\u524d\u4f4d\u662f\u5426\u53d7s2\u5bf9\u5e94\u4f4d\u7684\u9650\u5236\uff0c\u5982\u679c\u53d7\u9650\u5219\u5f53\u524d\u4f4d\u53ea\u80fd\u9009\u62e9\u5c0f\u4e8e\u7b49\u4e8es2[i]\u7684\u5b57\u7b26\n    var f func(i, matchLen int, limitLower, limitUpper bool) int\n    f = func(i, matchLen int, limitLower, limitUpper bool) (ans int) {\n        if i == n {\n            return 1\n        } else if !limitLower &amp;&amp; !limitUpper &amp;&amp; memo[i][matchLen] != -1 {\n            // \u53d7\u9650\u60c5\u51b5\u4e0b\uff0c\u4e0d\u80fd\u4f7f\u7528\u8bb0\u5fc6\u7684\u7ed3\u679c\uff0c\u4e5f\u4e0d\u80fd\u8bb0\u5fc6\u5176\u7ed3\u679c\uff0c\u56e0\u4e3a\u53d7\u9650\u60c5\u51b5\u4e0b\u7684\u7ed3\u679c\u662f\u4e0d\u5b8c\u6574\u7684\n            return memo[i][matchLen]\n        } else {\n            var lower, upper byte = 'a', 'z'\n            if limitLower {\n                lower = s1[i]\n            }\n            if limitUpper {\n                upper = s2[i]\n            }\n            for b := lower; b &lt;= upper; b++ {\n                ml := matchLen\n                for ml &gt; 0 &amp;&amp; evil[ml] != b {\n                    ml = maxMatchLens[ml-1]\n                }\n                if evil[ml] == b {\n                    ml++\n                }\n                if ml &lt; m {\n                    ll := limitLower &amp;&amp; b == lower\n                    lu := limitUpper &amp;&amp; b == upper\n                    ans = (ans + f(i+1, ml, ll, lu)) % mod\n                }\n            }\n            if !limitLower &amp;&amp; !limitUpper {\n                memo[i][matchLen] = ans\n            }\n            return\n        }\n    }\n    return f(0, 0, true, true)\n}\n\n// \u6784\u9020\u6a21\u5f0f\u4e32pattern\u7684\u6700\u5927\u5339\u914d\u6570\u8868\nfunc calcMaxMatchLens(pattern string) []int {\n    n := len(pattern)\n    maxMatchLens := make([]int, n)\n    maxLen := 0\n    for i := 1; i &lt; n; i++ {\n        for maxLen &gt; 0 &amp;&amp; pattern[maxLen] != pattern[i] {\n            maxLen = maxMatchLens[maxLen-1]\n        }\n        if pattern[maxLen] == pattern[i] {\n            maxLen++\n        }\n        maxMatchLens[i] = maxLen\n    }\n    return maxMatchLens\n}\n</code></pre>"},{"location":"dp/interval/","title":"\u533a\u95f4 DP","text":""},{"location":"dp/interval/#lc516-\u6700\u957f\u56de\u6587\u5b50\u5e8f\u5217","title":"LC516. \u6700\u957f\u56de\u6587\u5b50\u5e8f\u5217","text":"\u95ee\u9898\u63cf\u8ff0 <p>\u7ed9\u4f60\u4e00\u4e2a\u4ec5\u7531\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\u7ec4\u6210\u7684\u5b57\u7b26\u4e32 <code>s(1\u2264|s|\u22641e3)</code> \uff0c\u8ba1\u7b97\u5176\u6700\u957f\u7684\u56de\u6587\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\u3002</p> <p>\u5728 LeetCode\u4e3b\u7ad9 \u6216 \u529b\u6263\u4e2d\u6587\u793e\u533a \u67e5\u770b\u8be5\u9898\u3002</p> \u89e3\u9898\u601d\u8def <p>\u65b9\u6cd5\u4e00\uff1a\u6700\u957f\u516c\u5171\u5b50\u5e8f\u5217</p> <p>\u8bb0 <code>t = reverse(s)</code> \uff0c\u5219\u95ee\u9898\u8f6c\u5316\u4e3a\u8ba1\u7b97 <code>s</code> \u548c <code>t</code> \u7684\u6700\u957f\u516c\u5171\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\u3002 \u5b9a\u4e49 <code>f[i][j]</code> \u8868\u793a <code>s[:i]</code> \u548c <code>t[:j]</code> \u7684\u6700\u957f\u516c\u5171\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\uff0c\u5219\u72b6\u6001\u8f6c\u79fb\u5982\u4e0b\uff1a</p> <ul> <li>\u5982\u679c <code>s[i] == t[j]</code> \uff0c\u5219 <code>f[i+1][j+1] = f[i][j] + 1</code> \uff1b</li> <li>\u5982\u679c <code>s[i] != t[j]</code> \uff0c\u5219 <code>f[i+1][j+1] = max(f[i][j+1], f[i+1][j])</code> \u3002</li> </ul> <p>\u5b9e\u73b0\u65f6\u53ef\u4ee5\u4f7f\u7528\u6eda\u52a8\u6570\u7ec4\u4f18\u5316\u6389\u7b2c\u4e00\u4e2a\u7ef4\u5ea6\u3002</p> Go <pre><code>package main\n\nfunc longestPalindromeSubseq(s string) int {\n    n := len(s)\n    f := make([]int, n+1)\n    pre := make([]int, n+1)\n    for i := 0; i &lt; n; i++ {\n        for j := 0; j &lt; n; j++ {\n            if s[i] == s[n-1-j] { // t[j] = s[n-1-j]\n                f[j+1] = pre[j] + 1\n            } else {\n                f[j+1] = max(pre[j+1], f[j])\n            }\n        }\n        f, pre = pre, f // \u6eda\u52a8\u6570\u7ec4\u4f18\u5316\n    }\n    return pre[n]\n}\n\nfunc max(x, y int) int {\n    if x &gt; y {\n        return x\n    } else {\n        return y\n    }\n}\n</code></pre> <p>\u65b9\u6cd5\u4e8c\uff1a\u533a\u95f4 DP</p> <p>\u5b9a\u4e49 <code>f[i][j]</code> \u8868\u793a <code>s[i:j+1]</code> \u7684\u6700\u957f\u56de\u6587\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\uff0c\u5219\u72b6\u6001\u8f6c\u79fb\u5982\u4e0b\uff1a</p> <ul> <li>\u5982\u679c <code>s[i] == s[j]</code> \uff0c\u5219 <code>f[i][j] = f[i+1][j-1] + 2</code> \uff1b</li> <li>\u5982\u679c <code>s[i] != s[j]</code> \uff0c\u5219 <code>f[i][j] = max(f[i+1][j], f[i][j-1])</code> \u3002</li> </ul> <p>\u5b9e\u73b0\u65f6\u53ef\u4ee5\u4f7f\u7528\u6eda\u52a8\u6570\u7ec4\u4f18\u5316\u6389\u7b2c\u4e00\u4e2a\u7ef4\u5ea6\u3002</p> Go <pre><code>package main\n\nfunc longestPalindromeSubseq(s string) int {\n    n := len(s)\n    f := make([]int, n)\n    pre := make([]int, n)\n    for i := n - 1; i &gt;= 0; i-- {\n        f[i] = 1\n        for j := i + 1; j &lt; n; j++ {\n            if s[i] == s[j] {\n                f[j] = pre[j-1] + 2\n            } else {\n                f[j] = max(pre[j], f[j-1])\n            }\n        }\n        f, pre = pre, f // \u6eda\u52a8\u6570\u7ec4\u4f18\u5316\n    }\n    return pre[n-1]\n}\n\nfunc max(x, y int) int {\n    if x &gt; y {\n        return x\n    } else {\n        return y\n    }\n}\n</code></pre>"},{"location":"dp/interval/#lc1039-\u4e09\u89d2\u5256\u5206\u7684\u6700\u4f4e\u5f97\u5206","title":"LC1039. \u4e09\u89d2\u5256\u5206\u7684\u6700\u4f4e\u5f97\u5206","text":"\u95ee\u9898\u63cf\u8ff0 <p>\u7ed9\u5b9a\u4e00\u4e2a\u51f8 <code>n(3\u2264n\u226450)</code> \u8fb9\u5f62\u548c\u4e00\u4e2a\u957f\u5ea6\u4e3a <code>n</code> \u7684\u6574\u6570\u6570\u7ec4 <code>values</code> \u3002 \u5176\u4e2d <code>1\u2264values[i]\u2264100</code> \u662f\u51f8 <code>n</code> \u8fb9\u5f62\u7b2c <code>i</code> \u4e2a\u9876\u70b9\u7684\u503c\uff08\u4ece\u67d0\u4e00\u9876\u70b9\u5f00\u59cb\uff0c\u6309\u7167\u987a\u65f6\u9488\u987a\u5e8f\uff09\u3002 \u5c06\u51f8 <code>n</code> \u8fb9\u5f62\u5256\u5206\u4e3a <code>n - 2</code> \u4e2a\u4e09\u89d2\u5f62\uff0c\u6bcf\u4e2a\u4e09\u89d2\u5f62\u7684\u503c\u662f\u8be5\u4e09\u89d2\u5f62\u4e09\u4e2a\u9876\u70b9\u503c\u7684\u4e58\u79ef\u3002 \u51f8 <code>n</code> \u8fb9\u5f62\u4e09\u89d2\u5256\u5206\u7684\u5206\u6570\u662f\u8fdb\u884c\u4e09\u89d2\u5256\u5206\u540e\u6240\u6709 <code>n - 2</code> \u4e2a\u4e09\u89d2\u5f62\u7684\u503c\u4e4b\u548c\u3002 \u8fd4\u56de\u51f8 <code>n</code> \u8fb9\u5f62\u8fdb\u884c\u4e09\u89d2\u5256\u5206\u540e\u53ef\u4ee5\u5f97\u5230\u7684\u6700\u4f4e\u5206\u3002</p> <p>\u5728 LeetCode\u4e3b\u7ad9 \u6216 \u529b\u6263\u4e2d\u6587\u793e\u533a \u67e5\u770b\u8be5\u9898\u3002</p> \u89e3\u9898\u601d\u8def <p>\u5b9a\u4e49 <code>f[i][j]</code> \u8868\u793a\u7531\u9876\u70b9 <code>i, ..., j</code> \u6784\u6210\u7684\u591a\u8fb9\u5f62\u7684\u6700\u4f4e\u5f97\u5206\uff0c\u5219\u72b6\u6001\u8f6c\u79fb\u5982\u4e0b\uff1a</p> \\[f[i][j] = \\min\\limits_{k=i+1}^{j-1}\\{f[i][k]+f[k][j]+values[i]\\cdot values[j]\\cdot values[k]\\}\\] <p>\u5176\u4e2d <code>i, k, j</code> \u4e09\u4e2a\u9876\u70b9\u6784\u6210\u4e09\u89d2\u5f62\u3002</p> Go <pre><code>package main\n\nimport \"math\"\n\nfunc minScoreTriangulation(values []int) int {\n    n := len(values)\n    f := make([][]int, n)\n    for i := range f {\n        f[i] = make([]int, n)\n    }\n    for i := n - 3; i &gt;= 0; i-- {\n        for j := i + 2; j &lt; n; j++ {\n            f[i][j] = math.MaxInt\n            for k := i + 1; k &lt; j; k++ {\n                f[i][j] = min(f[i][j], f[i][k]+f[k][j]+values[i]*values[j]*values[k])\n            }\n        }\n    }\n    return f[0][n-1]\n}\n\nfunc min(x, y int) int {\n    if x &lt; y {\n        return x\n    } else {\n        return y\n    }\n}\n</code></pre>"},{"location":"dp/interval/#lg1880-noi1995-\u77f3\u5b50\u5408\u5e76","title":"LG1880. [NOI1995] \u77f3\u5b50\u5408\u5e76","text":"\u95ee\u9898\u63cf\u8ff0 <p>\u7b2c\u4e00\u884c\u8f93\u5165\u6b63\u6574\u6570 \\(n(1\u2264n\u2264100)\\) \u8868\u793a\u6709 \\(n\\) \u5806\u77f3\u5b50\u5f62\u6210\u4e00\u4e2a\u73af\u3002 \u7b2c\u4e8c\u884c\u8f93\u5165\u957f\u4e3a \\(n\\) \u7684\u6570\u7ec4 \\(a\\) \uff0c\u5176\u4e2d \\(0\u2264a_i\u226420\\) \u8868\u793a\u7b2c \\(i\\) \u5806\u77f3\u5b50\u7684\u4e2a\u6570\u3002 \u73b0\u8981\u5c06\u77f3\u5b50\u6709\u6b21\u5e8f\u5730\u5408\u5e76\u6210\u4e00\u5806\uff0c\u89c4\u5b9a\u6bcf\u6b21\u53ea\u80fd\u9009\u76f8\u90bb\u7684 \\(2\\) \u5806\u5408\u5e76\u6210\u65b0\u7684\u4e00\u5806\uff0c\u5e76\u5c06\u65b0\u7684\u4e00\u5806\u7684\u77f3\u5b50\u6570\uff0c\u8bb0\u4e3a\u8be5\u6b21\u5408\u5e76\u7684\u5f97\u5206\u3002 \u8bf7\u8ba1\u7b97\u5c06 \\(n\\) \u5806\u77f3\u5b50\u5408\u5e76\u6210 \\(1\\) \u5806\u7684\u6700\u5c0f\u5f97\u5206\u548c\u6700\u5927\u5f97\u5206\u3002\u7b2c\u4e00\u884c\u8f93\u51fa\u6700\u5c0f\u5f97\u5206\uff0c\u7b2c\u4e8c\u884c\u8f93\u51fa\u6700\u5927\u5f97\u5206\u3002</p> <p>\u5728 \u6d1b\u8c37 \u67e5\u770b\u8be5\u9898\u3002</p> \u89e3\u9898\u601d\u8def <p>\u590d\u5236\u4e00\u500d\uff0c\u65ad\u73af\u6210\u94fe\u3002</p> GoJava <pre><code>package main\n\nimport (\n    \"bufio\"\n    . \"fmt\"\n    \"os\"\n)\n\nfunc main() {\n    in := bufio.NewReader(os.Stdin)\n    out := bufio.NewWriter(os.Stdout)\n    defer out.Flush()\n\n    var n int\n    Fscan(in, &amp;n)\n    a := make([]int, n)\n    s := make([]int, n&lt;&lt;1+1)\n    for i := range a {\n        Fscan(in, &amp;a[i])\n        s[i+1] = s[i] + a[i]\n    }\n    for i, x := range a {\n        i += n\n        s[i+1] = s[i] + x\n    }\n    mn := make([][]int, n&lt;&lt;1)\n    mx := make([][]int, n&lt;&lt;1)\n    for i := n&lt;&lt;1 - 1; i &gt;= 0; i-- {\n        mn[i] = make([]int, n&lt;&lt;1)\n        mx[i] = make([]int, n&lt;&lt;1)\n        for j := i + 1; j &lt; i+n &amp;&amp; j &lt; n&lt;&lt;1; j++ {\n            mn[i][j] = 1e6\n            for k := i; k &lt; j; k++ {\n                mn[i][j] = min(mn[i][j], mn[i][k]+mn[k+1][j])\n                mx[i][j] = max(mx[i][j], mx[i][k]+mx[k+1][j])\n            }\n            // \u5408\u5e76\u6210\u4e00\u5806\n            score := s[j+1] - s[i]\n            mn[i][j] += score\n            mx[i][j] += score\n        }\n    }\n    x := mn[0][n-1]\n    y := mx[0][n-1]\n    for i := 1; i &lt; n; i++ {\n        x = min(x, mn[i][i+n-1])\n        y = max(y, mx[i][i+n-1])\n    }\n    Fprintln(out, x)\n    Fprintln(out, y)\n}\n\nfunc min(x, y int) int {\n    if x &lt; y {\n        return x\n    } else {\n        return y\n    }\n}\n\nfunc max(x, y int) int {\n    if x &gt; y {\n        return x\n    } else {\n        return y\n    }\n}\n</code></pre> <pre><code>import java.io.*;\nimport java.util.*;\n\npublic class Main {\n\n    static BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n    static PrintWriter out = new PrintWriter(System.out);\n\n    public static void main(String[] args) throws Exception {\n        int n = Integer.parseInt(in.readLine());\n        int[] a = new int[n];\n        int m = n &lt;&lt; 1;\n        int[] s = new int[m + 1];\n        StringTokenizer at = new StringTokenizer(in.readLine());\n        for (int i = 0; i &lt; n; i++) {\n            a[i] = Integer.parseInt(at.nextToken());\n            s[i + 1] = s[i] + a[i];\n        }\n        for (int i = 0; i &lt; n; i++) {\n            int j = i + n;\n            s[j + 1] = s[j] + a[i];\n        }\n        int[][] mn = new int[m][m];\n        int[][] mx = new int[m][m];\n        for (int i = m - 1; i &gt;= 0; i--) {\n            for (int j = i + 1; j &lt; i + n &amp;&amp; j &lt; m; j++) {\n                mn[i][j] = (int) 1e6;\n                for (int k = i; k &lt; j; k++) {\n                    mn[i][j] = Math.min(mn[i][j], mn[i][k] + mn[k + 1][j]);\n                    mx[i][j] = Math.max(mx[i][j], mx[i][k] + mx[k + 1][j]);\n                }\n                // \u5408\u5e76\u6210\u4e00\u5806\n                int score = s[j + 1] - s[i];\n                mn[i][j] += score;\n                mx[i][j] += score;\n            }\n        }\n        int x = mn[0][n - 1], y = mx[0][n - 1];\n        for (int i = 1; i &lt; n; i++) {\n            x = Math.min(x, mn[i][i + n - 1]);\n            y = Math.max(y, mx[i][i + n - 1]);\n        }\n        out.printf(\"%d%n%d\", x, y);\n        out.flush();\n        out.close();\n        in.close();\n    }\n}\n</code></pre>"},{"location":"dp/interval/#lc1000-\u5408\u5e76\u77f3\u5934\u7684\u6700\u4f4e\u6210\u672c","title":"LC1000. \u5408\u5e76\u77f3\u5934\u7684\u6700\u4f4e\u6210\u672c","text":"\u95ee\u9898\u63cf\u8ff0 <p>\u6709 <code>n(1\u2264n\u226430)</code> \u5806\u77f3\u5934\u6392\u6210\u4e00\u6392\uff0c\u7b2c <code>i</code> \u5806\u4e2d\u6709 <code>1\u2264stones[i]\u2264100</code> \u5757\u77f3\u5934\u3002 \u6bcf\u6b21\u79fb\u52a8\u9700\u8981\u5c06\u8fde\u7eed\u7684 <code>k(2\u2264k\u226430)</code> \u5806\u77f3\u5934\u5408\u5e76\u4e3a\u4e00\u5806\uff0c\u800c\u8fd9\u6b21\u79fb\u52a8\u7684\u6210\u672c\u4e3a\u8fd9 <code>k</code> \u5806\u77f3\u5934\u7684\u603b\u5757\u6570\u3002 \u627e\u51fa\u628a\u6240\u6709\u77f3\u5934\u5408\u5e76\u6210\u4e00\u5806\u7684\u6700\u4f4e\u6210\u672c\u3002\u5982\u679c\u4e0d\u53ef\u80fd\uff0c\u8fd4\u56de <code>-1</code> \u3002</p> <p>\u5728 LeetCode\u4e3b\u7ad9 \u6216 \u529b\u6263\u4e2d\u6587\u793e\u533a \u67e5\u770b\u8be5\u9898\u3002</p> \u89e3\u9898\u601d\u8def <p>\u5b9a\u4e49 \\(f[i][j]\\) \u8868\u793a\u5c06 \\([i, j]\\) \u533a\u95f4\u5185\u7684\u77f3\u5934\u5408\u5e76\u81f3\u4e0d\u80fd\u518d\u5408\u5e76\u7684\u6700\u4f4e\u6210\u672c\u3002</p> <p>\u9996\u5148\u679a\u4e3e \\(i\u2264x&lt;j\\) \u5206\u522b\u5c06 \\([i, x]\\) \u548c \\([x+1, j]\\) \u533a\u95f4\u5185\u7684\u77f3\u5934\u5408\u5e76\u81f3\u4e0d\u80fd\u518d\u5408\u5e76\uff1a</p> \\[f[i][j] = \\min\\limits_{x=i+q\\times (k-1)}^{j-1}\\{f[i][x]+f[x+1][j]\\}\\] <p>\u5982\u679c <code>(j-i)%(k-1) == 0</code> \uff0c\u5219 \\([i, j]\\) \u533a\u95f4\u5185\u7684\u77f3\u5934\u9700\u8981\u5408\u5e76\u6210\u4e00\u5806\uff0c\u6700\u4f4e\u6210\u672c\u4e3a\uff1a</p> \\[f[i][j] = f[i][j] + \\sum\\limits_{p=i}^j stones[p]\\] <p>\u5176\u4e2d\u5b50\u6570\u7ec4\u548c\u53ef\u4ee5\u901a\u8fc7\u524d\u7f00\u548c\u4f18\u5316\u3002</p> Go <pre><code>package main\n\nfunc mergeStones(stones []int, k int) int {\n    if n := len(stones); (n-1)%(k-1) != 0 {\n        return -1\n    } else {\n        s := make([]int, n+1)\n        for i, x := range stones {\n            s[i+1] = s[i] + x\n        }\n        f := make([][]int, n)\n        for i := n - 1; i &gt;= 0; i-- {\n            f[i] = make([]int, n)\n            for j := i + 1; j &lt; n; j++ {\n                f[i][j] = 1e8\n                for x := i; x &lt; j; x += k - 1 {\n                    f[i][j] = min(f[i][j], f[i][x]+f[x+1][j])\n                }\n                if (j-i)%(k-1) == 0 {\n                    f[i][j] += s[j+1] - s[i] // \u5408\u5e76\u6210\u4e00\u5806\n                }\n            }\n        }\n        return f[0][n-1]\n    }\n}\n\nfunc min(x, y int) int {\n    if x &lt; y {\n        return x\n    } else {\n        return y\n    }\n}\n</code></pre>"},{"location":"dp/basic/rob/","title":"\u6253\u5bb6\u52ab\u820d","text":""},{"location":"dp/basic/rob/#lc198-\u6253\u5bb6\u52ab\u820d-i","title":"LC198. \u6253\u5bb6\u52ab\u820d I","text":"\u95ee\u9898\u63cf\u8ff0 <p>\u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a <code>n(1\u2264n\u2264100)</code> \u7684\u6574\u6570\u6570\u7ec4 <code>nums</code> \uff0c<code>0\u2264nums[i]\u2264400</code> \u8868\u793a\u6cbf\u8857\u7b2c <code>i</code> \u95f4\u623f\u5c4b\u5185\u7684\u5b58\u653e\u91d1\u989d\u3002 \u5982\u679c\u4e24\u95f4\u76f8\u90bb\u7684\u623f\u5c4b\u90fd\u88ab\u5077\uff0c\u7cfb\u7edf\u4f1a\u81ea\u52a8\u62a5\u8b66\u3002\u8ba1\u7b97\u4e0d\u89e6\u53d1\u62a5\u8b66\u7684\u60c5\u51b5\u4e0b\uff0c\u80fd\u591f\u5077\u7a83\u5230\u7684\u6700\u9ad8\u91d1\u989d\u3002</p> <p>\u5728 LeetCode\u4e3b\u7ad9 \u6216 \u529b\u6263\u4e2d\u6587\u793e\u533a \u67e5\u770b\u8be5\u9898\u3002</p> \u89e3\u9898\u601d\u8def Go <pre><code>package main\n\nfunc rob(nums []int) int {\n    with, skip := 0, 0\n    for _, x := range nums {\n        with, skip = skip+x, max(with, skip)\n    }\n    return max(with, skip)\n}\n\nfunc max(x, y int) int {\n    if x &gt; y {\n        return x\n    } else {\n        return y\n    }\n}\n</code></pre>"},{"location":"dp/basic/rob/#lc213-\u6253\u5bb6\u52ab\u820d-ii","title":"LC213. \u6253\u5bb6\u52ab\u820d II","text":"\u95ee\u9898\u63cf\u8ff0 <p>\u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a <code>n(1\u2264n\u2264100)</code> \u7684\u6574\u6570\u6570\u7ec4 <code>nums</code> \uff0c<code>0\u2264nums[i]\u22641000</code> \u8868\u793a \u56f4\u6210\u4e00\u5708 \u7684\u7b2c <code>i</code> \u95f4\u623f\u5c4b\u5185\u7684\u5b58\u653e\u91d1\u989d\u3002 \u5982\u679c\u4e24\u95f4\u76f8\u90bb\u7684\u623f\u5c4b\u90fd\u88ab\u5077\uff0c\u7cfb\u7edf\u4f1a\u81ea\u52a8\u62a5\u8b66\u3002\u8ba1\u7b97\u4e0d\u89e6\u53d1\u62a5\u8b66\u7684\u60c5\u51b5\u4e0b\uff0c\u80fd\u591f\u5077\u7a83\u5230\u7684\u6700\u9ad8\u91d1\u989d\u3002</p> <p>\u5728 LeetCode\u4e3b\u7ad9 \u6216 \u529b\u6263\u4e2d\u6587\u793e\u533a \u67e5\u770b\u8be5\u9898\u3002</p> \u89e3\u9898\u601d\u8def Go <pre><code>package main\n\nfunc rob(nums []int) int {\n    if n := len(nums); n == 1 {\n        return nums[0]\n    } else {\n        f := func(arr []int) int {\n            with, skip := 0, 0\n            for _, x := range arr {\n                with, skip = skip+x, max(with, skip)\n            }\n            return max(with, skip)\n        }\n        return max(f(nums[1:]), f(nums[:n-1]))\n    }\n}\n\nfunc max(x, y int) int {\n    if x &gt; y {\n        return x\n    } else {\n        return y\n    }\n}\n</code></pre>"},{"location":"dp/basic/rob/#lc337-\u6253\u5bb6\u52ab\u820d-iii","title":"LC337. \u6253\u5bb6\u52ab\u820d III","text":"\u95ee\u9898\u63cf\u8ff0 <p>\u6240\u6709\u623f\u5c4b\u7ec4\u6210\u4e00\u9897\u4e8c\u53c9\u6811\uff0c\u8282\u70b9\u6570\u5728 <code>[1, 1e4]</code> \u8303\u56f4\u5185\uff0c\u8282\u70b9\u503c\u5728 <code>[0, 1e4]</code> \u8303\u56f4\u5185\uff0c\u8868\u793a\u623f\u5c4b\u5185\u7684\u5b58\u653e\u91d1\u989d\u3002 \u53ea\u80fd\u4ece\u6839\u8282\u70b9\u8fdb\u5165\u8be5\u5730\u533a\uff0c\u5982\u679c\u4e24\u95f4\u76f4\u63a5\u76f8\u8fde\u7684\u623f\u5c4b\u90fd\u88ab\u5077\uff0c\u7cfb\u7edf\u4f1a\u81ea\u52a8\u62a5\u8b66\u3002\u8ba1\u7b97\u4e0d\u89e6\u53d1\u62a5\u8b66\u7684\u60c5\u51b5\u4e0b\uff0c\u80fd\u591f\u5077\u7a83\u5230\u7684\u6700\u9ad8\u91d1\u989d\u3002</p> <p>\u5728 LeetCode\u4e3b\u7ad9 \u6216 \u529b\u6263\u4e2d\u6587\u793e\u533a \u67e5\u770b\u8be5\u9898\u3002</p> \u89e3\u9898\u601d\u8def <p>\u6811\u5f62 DP</p> Go <pre><code>package main\n\ntype TreeNode struct {\n    Val   int\n    Left  *TreeNode\n    Right *TreeNode\n}\n\nfunc rob(root *TreeNode) int {\n    var dfs func(o *TreeNode) (with, skip int)\n    dfs = func(o *TreeNode) (with int, skip int) {\n        if o != nil {\n            withL, skipL := dfs(o.Left)\n            withR, skipR := dfs(o.Right)\n            with = skipL + skipR + o.Val\n            skip = max(withL, skipL) + max(withR, skipR)\n        }\n        return\n    }\n    with, skip := dfs(root)\n    return max(with, skip)\n}\n\nfunc max(x, y int) int {\n    if x &gt; y {\n        return x\n    } else {\n        return y\n    }\n}\n</code></pre>"},{"location":"dp/basic/rob/#lc2560-\u6253\u5bb6\u52ab\u820d-iv","title":"LC2560. \u6253\u5bb6\u52ab\u820d IV","text":"\u95ee\u9898\u63cf\u8ff0 <p>\u6cbf\u8857\u6709\u4e00\u6392\u8fde\u7eed\u7684\u623f\u5c4b\u3002\u6bcf\u95f4\u623f\u5c4b\u5185\u90fd\u85cf\u6709\u4e00\u5b9a\u7684\u73b0\u91d1\u3002\u73b0\u5728\u6709\u4e00\u4f4d\u5c0f\u5077\u8ba1\u5212\u4ece\u8fd9\u4e9b\u623f\u5c4b\u4e2d\u7a83\u53d6\u73b0\u91d1\u3002 \u7531\u4e8e\u76f8\u90bb\u7684\u623f\u5c4b\u88c5\u6709\u76f8\u4e92\u8fde\u901a\u7684\u9632\u76d7\u7cfb\u7edf\uff0c\u6240\u4ee5\u5c0f\u5077 \u4e0d\u4f1a\u7a83\u53d6\u76f8\u90bb\u7684\u623f\u5c4b \u3002 \u5c0f\u5077\u7684 \u7a83\u53d6\u80fd\u529b \u5b9a\u4e49\u4e3a\u4ed6\u5728\u7a83\u53d6\u8fc7\u7a0b\u4e2d\u80fd\u4ece\u5355\u95f4\u623f\u5c4b\u4e2d\u7a83\u53d6\u7684 \u6700\u5927\u91d1\u989d \u3002 \u7ed9\u4f60\u4e00\u4e2a\u957f\u5ea6\u4e3a <code>1\u2264n\u22641e5</code> \u7684\u6574\u6570\u6570\u7ec4 <code>nums</code> \uff0c<code>1\u2264nums[i]\u22641e9</code> \u8868\u793a\u7b2c <code>i</code> \u95f4\u623f\u5c4b\u4e2d\u5b58\u653e\u7684\u73b0\u91d1\u91d1\u989d\u3002 \u53e6\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570 <code>k(1\u2264k\u2264(n+1)/2)</code> \uff0c\u8868\u793a\u7a83\u8d3c\u5c06\u4f1a\u7a83\u53d6\u7684 \u6700\u5c11 \u623f\u5c4b\u6570\u3002\u5c0f\u5077\u603b\u80fd\u7a83\u53d6\u81f3\u5c11 <code>k</code> \u95f4\u623f\u5c4b\u3002 \u8fd4\u56de\u5c0f\u5077\u7684 \u6700\u5c0f \u7a83\u53d6\u80fd\u529b\u3002</p> <p>\u5728 LeetCode\u4e3b\u7ad9 \u6216 \u529b\u6263\u4e2d\u6587\u793e\u533a \u67e5\u770b\u8be5\u9898\u3002</p> \u89e3\u9898\u601d\u8def <p>\u65b9\u6cd5\u4e00\uff1a\u4e8c\u5206\u67e5\u627e + DP</p> Go <pre><code>package main\n\nimport \"sort\"\n\nfunc minCapability(nums []int, k int) int {\n    return sort.Search(1e9, func(limit int) bool {\n        f0, f1 := 0, 0\n        for _, x := range nums {\n            if x &gt; limit {\n                f0 = f1\n            } else {\n                f0, f1 = f1, f0+1\n            }\n        }\n        return f1 &gt;= k\n    })\n}\n</code></pre> <p>\u65b9\u6cd5\u4e8c\uff1a\u4e8c\u5206\u67e5\u627e + \u8d2a\u5fc3</p> Go <pre><code>package main\n\nimport \"sort\"\n\nfunc minCapability(nums []int, k int) int {\n    return sort.Search(1e9, func(limit int) bool {\n        cnt, pre := 0, -2\n        for i, x := range nums {\n            if x &lt;= limit &amp;&amp; i-pre != 1 {\n                cnt++\n                pre = i\n            }\n        }\n        return cnt &gt;= k\n    })\n}\n</code></pre>"},{"location":"dp/basic/rob/#lc2597-\u7f8e\u4e3d\u5b50\u96c6\u7684\u6570\u76ee","title":"LC2597. \u7f8e\u4e3d\u5b50\u96c6\u7684\u6570\u76ee","text":"\u95ee\u9898\u63cf\u8ff0 <p>\u7ed9\u4f60\u4e00\u4e2a\u957f\u5ea6\u4e3a <code>1\u2264n\u226420</code> \u7684\u6b63\u6574\u6570\u6570\u7ec4 <code>nums</code> \u548c\u4e00\u4e2a\u6b63\u6574\u6570 <code>k</code> \uff0c<code>1\u2264nums[i],k\u22641000</code> \u3002 \u5982\u679c <code>nums</code> \u7684\u5b50\u96c6\u4e2d\uff0c\u4efb\u610f\u4e24\u4e2a\u6574\u6570\u7684\u7edd\u5bf9\u5dee\u5747\u4e0d\u7b49\u4e8e <code>k</code> \uff0c\u5219\u8ba4\u4e3a\u8be5\u5b50\u96c6\u662f\u4e00\u4e2a \u7f8e\u4e3d \u5b50\u96c6\u3002 \u8fd4\u56de\u6570\u7ec4 <code>nums</code> \u4e2d \u975e\u7a7a \u4e14 \u7f8e\u4e3d \u7684\u5b50\u96c6\u6570\u76ee\u3002</p> <p>\u5728 LeetCode\u4e3b\u7ad9 \u6216 \u529b\u6263\u4e2d\u6587\u793e\u533a \u67e5\u770b\u8be5\u9898\u3002</p> \u89e3\u9898\u601d\u8def <p>\u65b9\u6cd5\u4e00\uff1a\u56de\u6eaf</p> Go <pre><code>package main\n\nfunc beautifulSubsets(nums []int, k int) (ans int) {\n    n := len(nums)\n    for i := range nums {\n        nums[i] += k\n    }\n    // [-k, 1000+k] =&gt; [0, 1000+k&lt;&lt;1]\n    cnt := make([]int, 1001+k&lt;&lt;1)\n    var dfs func(i int)\n    dfs = func(i int) {\n        if i == n {\n            ans++\n        } else {\n            // \u4e0d\u9009nums[i]\n            dfs(i + 1)\n            // \u9009nums[i]\n            if x := nums[i]; cnt[x-k] == 0 &amp;&amp; cnt[x+k] == 0 {\n                cnt[x]++\n                dfs(i + 1)\n                cnt[x]--\n            }\n        }\n    }\n    dfs(0)\n    return ans - 1 // \u53bb\u9664\u7a7a\u96c6\n}\n</code></pre> <p>\u65b9\u6cd5\u4e8c\uff1a\u540c\u4f59\u5206\u7ec4 + \u6253\u5bb6\u52ab\u820d + \u4e58\u6cd5\u539f\u7406</p> Go <pre><code>package main\n\nimport \"sort\"\n\nconst shift, mask = 5, 1&lt;&lt;5 - 1\n\nfunc beautifulSubsets(nums []int, k int) int {\n    // \u540c\u4f59\u5206\u7ec4\n    groups := make(map[int]map[int]int)\n    for _, x := range nums {\n        if groups[x%k] == nil {\n            groups[x%k] = make(map[int]int)\n        }\n        groups[x%k][x]++\n    }\n    ans := 1\n    for _, g := range groups {\n        n := len(g)\n        xcs := make([]int, 0, n)\n        for x, c := range g {\n            xcs = append(xcs, x&lt;&lt;shift|c)\n        }\n        sort.Ints(xcs)\n        // \u6253\u5bb6\u52ab\u820d\n        f0, f1 := 1, 1&lt;&lt;(xcs[0]&amp;mask)\n        for i := 1; i &lt; n; i++ {\n            x, c := xcs[i]&gt;&gt;shift, xcs[i]&amp;mask\n            if x-xcs[i-1]&gt;&gt;shift == k {\n                f0, f1 = f1, f1+f0*(1&lt;&lt;c-1)\n            } else {\n                f0, f1 = f1, f1&lt;&lt;c\n            }\n        }\n        ans *= f1 // \u4e58\u6cd5\u539f\u7406\uff0c\u4e0d\u540c\u5206\u7ec4\u7684\u7f8e\u4e3d\u5b50\u96c6\u53ef\u4ee5\u4efb\u610f\u7ec4\u5408\n    }\n    return ans - 1 // \u53bb\u9664\u7a7a\u96c6\n}\n</code></pre>"},{"location":"dp/basic/stock/","title":"\u4e70\u5356\u80a1\u7968","text":""},{"location":"dp/basic/stock/#lc121-\u4e70\u5356\u80a1\u7968-i","title":"LC121. \u4e70\u5356\u80a1\u7968 I","text":"\u95ee\u9898\u63cf\u8ff0\uff1a\u5355\u6b21\u4e70\u5356\u80fd\u83b7\u5f97\u7684\u6700\u5927\u5229\u6da6 <p>\u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a <code>n(1\u2264n\u22641e5)</code> \u7684\u6574\u6570\u6570\u7ec4 <code>prices</code> \uff0c<code>0\u2264prices[i]\u22641e4</code> \u8868\u793a\u4e00\u652f\u80a1\u7968\u7b2c <code>i</code> \u5929\u7684\u4ef7\u683c\u3002 \u4f60\u53ea\u80fd\u9009\u62e9 \u67d0\u4e00\u5929 \u4e70\u5165\u8fd9\u53ea\u80a1\u7968\uff0c\u5e76\u9009\u62e9\u5728 \u672a\u6765\u7684\u67d0\u4e00\u4e2a\u4e0d\u540c\u7684\u65e5\u5b50 \u5356\u51fa\u8be5\u80a1\u7968\u3002 \u8fd4\u56de\u4f60\u53ef\u4ee5\u4ece\u8fd9\u7b14\u4ea4\u6613\u4e2d\u83b7\u53d6\u7684\u6700\u5927\u5229\u6da6\u3002\u5982\u679c\u4f60\u4e0d\u80fd\u83b7\u53d6\u4efb\u4f55\u5229\u6da6\uff0c\u8fd4\u56de <code>0</code> \u3002</p> <p>\u5728 LeetCode\u4e3b\u7ad9 \u6216 \u529b\u6263\u4e2d\u6587\u793e\u533a \u67e5\u770b\u8be5\u9898\u3002</p> \u89e3\u9898\u601d\u8def Go <pre><code>package main\n\nfunc maxProfit(prices []int) int {\n    n := len(prices)\n    // buy: \u6bcf\u5929\u7ed3\u675f\u65f6, \u6301\u6709\u80a1\u7968\uff08\u4e70\u5165\u540e\u672a\u5356\u51fa\uff09\u7684\u6700\u5927\u6536\u76ca\n    // sell: \u6bcf\u5929\u7ed3\u675f\u65f6, \u4e0d\u6301\u6709\u80a1\u7968\uff08\u672a\u4e70\u5165\u6216\u5356\u51fa\uff09\u7684\u6700\u5927\u6536\u76ca\n    buy, sell := -prices[0], 0\n    for i := 1; i &lt; n; i++ {\n        buy = max(buy, -prices[i])\n        sell = max(sell, buy+prices[i])\n    }\n    return sell\n}\n\nfunc max(x, y int) int {\n    if x &gt; y {\n        return x\n    } else {\n        return y\n    }\n}\n</code></pre>"},{"location":"dp/basic/stock/#lc122-\u4e70\u5356\u80a1\u7968-ii","title":"LC122. \u4e70\u5356\u80a1\u7968 II","text":"\u95ee\u9898\u63cf\u8ff0\uff1a\u591a\u6b21\u4e70\u5356\u80fd\u83b7\u5f97\u7684\u6700\u5927\u5229\u6da6 <p>\u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a <code>n(1\u2264n\u22643e4)</code> \u7684\u6574\u6570\u6570\u7ec4 <code>prices</code> \uff0c<code>0\u2264prices[i]\u22641e4</code> \u8868\u793a\u4e00\u652f\u80a1\u7968\u7b2c <code>i</code> \u5929\u7684\u4ef7\u683c\u3002 \u5728\u6bcf\u4e00\u5929\uff0c\u4f60\u53ef\u4ee5\u51b3\u5b9a\u662f\u5426\u8d2d\u4e70\u3001\u51fa\u552e\u80a1\u7968\u3002\u4f60\u5728\u4efb\u4f55\u65f6\u5019 \u6700\u591a \u53ea\u80fd\u6301\u6709 \u4e00\u80a1 \u80a1\u7968\u3002\u4f60\u4e5f\u53ef\u4ee5\u5148\u8d2d\u4e70\uff0c\u7136\u540e\u5728 \u540c\u4e00\u5929 \u51fa\u552e\u3002 \u8fd4\u56de\u4f60\u80fd\u83b7\u5f97\u7684\u6700\u5927\u5229\u6da6\u3002</p> <p>\u5728 LeetCode\u4e3b\u7ad9 \u6216 \u529b\u6263\u4e2d\u6587\u793e\u533a \u67e5\u770b\u8be5\u9898\u3002</p> \u89e3\u9898\u601d\u8def <p>\u65b9\u6cd5\u4e00\uff1a\u52a8\u6001\u89c4\u5212</p> Go <pre><code>package main\n\nfunc maxProfitII(prices []int) int {\n    n := len(prices)\n    // buy: \u6bcf\u5929\u7ed3\u675f\u65f6, \u624b\u4e2d\u6301\u6709\u80a1\u7968\u7684\u7d2f\u8ba1\u6700\u5927\u6536\u76ca\n    // sell: \u6bcf\u5929\u7ed3\u675f\u65f6, \u624b\u4e2d\u4e0d\u6301\u6709\u80a1\u7968\u7684\u7d2f\u8ba1\u6700\u5927\u6536\u76ca\n    buy, sell := -prices[0], 0\n    for i := 1; i &lt; n; i++ {\n        buy = max(buy, sell-prices[i])\n        sell = max(sell, buy+prices[i])\n    }\n    return sell\n}\n\nfunc max(x, y int) int {\n    if x &gt; y {\n        return x\n    } else {\n        return y\n    }\n}\n</code></pre> <p>\u65b9\u6cd5\u4e8c\uff1a\u8d2a\u5fc3</p> Go <pre><code>package main\n\nfunc maxProfitII(prices []int) (ans int) {\n    n := len(prices)\n    for i := 1; i &lt; n; i++ {\n        // \u8d2a\u5fc3\uff0c\u80fd\u8d5a\u5c31\u8d5a\n        ans += max(0, prices[i]-prices[i-1])\n    }\n    return\n}\n\nfunc max(x, y int) int {\n    if x &gt; y {\n        return x\n    } else {\n        return y\n    }\n}\n</code></pre>"},{"location":"dp/basic/stock/#lc123-\u4e70\u5356\u80a1\u7968-iii","title":"LC123. \u4e70\u5356\u80a1\u7968 III","text":"\u95ee\u9898\u63cf\u8ff0\uff1a\u6700\u591a\u4e70\u5356\u4e24\u6b21\u80fd\u83b7\u5f97\u7684\u6700\u5927\u5229\u6da6 <p>\u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a <code>n(1\u2264n\u22641e5)</code> \u7684\u6574\u6570\u6570\u7ec4 <code>prices</code> \uff0c<code>0\u2264prices[i]\u22641e5</code> \u8868\u793a\u4e00\u652f\u80a1\u7968\u7b2c <code>i</code> \u5929\u7684\u4ef7\u683c\u3002 \u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\u6765\u8ba1\u7b97\u4f60\u6240\u80fd\u83b7\u53d6\u7684\u6700\u5927\u5229\u6da6\u3002\u4f60\u6700\u591a\u53ef\u4ee5\u5b8c\u6210 \u4e24\u7b14 \u4ea4\u6613\u3002 \u6ce8\u610f\uff1a\u4f60\u4e0d\u80fd\u540c\u65f6\u53c2\u4e0e\u591a\u7b14\u4ea4\u6613\uff0c\u5fc5\u987b\u5728\u518d\u6b21\u8d2d\u4e70\u524d\u51fa\u552e\u6389\u4e4b\u524d\u7684\u80a1\u7968\u3002</p> <p>\u5728 LeetCode\u4e3b\u7ad9 \u6216 \u529b\u6263\u4e2d\u6587\u793e\u533a \u67e5\u770b\u8be5\u9898\u3002</p> \u89e3\u9898\u601d\u8def Go <pre><code>package main\n\nfunc maxProfitIII(prices []int) int {\n    n := len(prices)\n    // \u7b2c\u4e00\u6b21\u4e70\u3001\u5356\u540e\u7684\u6700\u5927\u5229\u6da6\n    buy1, sell1 := -prices[0], 0\n    // \u7b2c\u4e8c\u6b21\u4e70\u3001\u5356\u540e\u7684\u6700\u5927\u5229\u6da6\n    buy2, sell2 := -prices[0], 0\n    for i := 1; i &lt; n; i++ {\n        // \u4f7f\u7b2c\u4e00\u6b21\u4e70\u3001\u5356\u540e\u7684\u5229\u6da6\u6700\u5927\u5316\n        buy1 = max(buy1, -prices[i])\n        sell1 = max(sell1, buy1+prices[i])\n        // \u4f7f\u7b2c\u4e8c\u6b21\u4e70\u3001\u5356\u540e\u7684\u5229\u6da6\u6700\u5927\u5316\n        buy2 = max(buy2, sell1-prices[i])\n        sell2 = max(sell2, buy2+prices[i])\n    }\n    return sell2\n}\n\nfunc max(x, y int) int {\n    if x &gt; y {\n        return x\n    } else {\n        return y\n    }\n}\n</code></pre>"},{"location":"dp/basic/stock/#lc188-\u4e70\u5356\u80a1\u7968-iv","title":"LC188. \u4e70\u5356\u80a1\u7968 IV","text":"\u95ee\u9898\u63cf\u8ff0\uff1a\u6700\u591a\u4e70\u5356k\u6b21\u80fd\u83b7\u5f97\u7684\u6700\u5927\u5229\u6da6 <p>\u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a <code>n(0\u2264n\u22641e3)</code> \u7684\u6574\u6570\u6570\u7ec4 <code>prices</code> \uff0c<code>0\u2264prices[i]\u22641e3</code> \u8868\u793a\u4e00\u652f\u80a1\u7968\u7b2c <code>i</code> \u5929\u7684\u4ef7\u683c\u3002 \u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\u6765\u8ba1\u7b97\u4f60\u6240\u80fd\u83b7\u53d6\u7684\u6700\u5927\u5229\u6da6\u3002\u4f60\u6700\u591a\u53ef\u4ee5\u5b8c\u6210 <code>k(0\u2264k\u2264100)</code> \u7b14\u4ea4\u6613\u3002 \u6ce8\u610f\uff1a\u4f60\u4e0d\u80fd\u540c\u65f6\u53c2\u4e0e\u591a\u7b14\u4ea4\u6613\uff0c\u5fc5\u987b\u5728\u518d\u6b21\u8d2d\u4e70\u524d\u51fa\u552e\u6389\u4e4b\u524d\u7684\u80a1\u7968\u3002</p> <p>\u5728 LeetCode\u4e3b\u7ad9 \u6216 \u529b\u6263\u4e2d\u6587\u793e\u533a \u67e5\u770b\u8be5\u9898\u3002</p> \u89e3\u9898\u601d\u8def Go <pre><code>package main\n\nfunc maxProfitIV(k int, prices []int) int {\n    n := len(prices)\n    // buy[i]\u8868\u793a\u7b2ci\u6b21\u4e70\u5165\u540e\u7684\u6700\u5927\u5229\u6da6\n    buy := make([]int, k+1)\n    // sell[i]\u8868\u793a\u7b2ci\u6b21\u5356\u51fa\u540e\u7684\u6700\u5927\u5229\u6da6\n    sell := make([]int, k+1)\n    for i := 1; i &lt;= k; i++ {\n        buy[i] = -prices[0]\n    }\n    for day := 1; day &lt; n; day++ {\n        for i := 0; i &lt; k; i++ {\n            buy[i+1] = max(buy[i+1], sell[i]-prices[day])\n            sell[i+1] = max(sell[i+1], buy[i+1]+prices[day])\n        }\n    }\n    return sell[k]\n}\n\nfunc max(x, y int) int {\n    if x &gt; y {\n        return x\n    } else {\n        return y\n    }\n}\n</code></pre>"},{"location":"dp/basic/stock/#lc309-\u4e70\u5356\u80a1\u7968\u542b\u51b7\u51bb\u671f","title":"LC309. \u4e70\u5356\u80a1\u7968\u542b\u51b7\u51bb\u671f","text":"\u95ee\u9898\u63cf\u8ff0 <p>\u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a <code>n(1\u2264n\u22645e3)</code> \u7684\u6574\u6570\u6570\u7ec4 <code>prices</code> \uff0c<code>0\u2264prices[i]\u22641e3</code> \u8868\u793a\u4e00\u652f\u80a1\u7968\u7b2c <code>i</code> \u5929\u7684\u4ef7\u683c\u3002 \u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\u8ba1\u7b97\u51fa\u6700\u5927\u5229\u6da6\u3002\u5728\u6ee1\u8db3\u4ee5\u4e0b\u7ea6\u675f\u6761\u4ef6\u4e0b\uff0c\u4f60\u53ef\u4ee5\u5c3d\u53ef\u80fd\u5730\u5b8c\u6210\u66f4\u591a\u7684\u4ea4\u6613\uff08\u591a\u6b21\u4e70\u5356\u4e00\u652f\u80a1\u7968\uff09:</p> <ul> <li>\u5356\u51fa\u80a1\u7968\u540e\uff0c\u4f60\u65e0\u6cd5\u5728\u7b2c\u4e8c\u5929\u4e70\u5165\u80a1\u7968 (\u5373\u51b7\u51bb\u671f\u4e3a 1 \u5929)\u3002</li> </ul> <p>\u6ce8\u610f\uff1a\u4f60\u4e0d\u80fd\u540c\u65f6\u53c2\u4e0e\u591a\u7b14\u4ea4\u6613\uff0c\u5fc5\u987b\u5728\u518d\u6b21\u8d2d\u4e70\u524d\u51fa\u552e\u6389\u4e4b\u524d\u7684\u80a1\u7968\u3002</p> <p>\u5728 LeetCode\u4e3b\u7ad9 \u6216 \u529b\u6263\u4e2d\u6587\u793e\u533a \u67e5\u770b\u8be5\u9898\u3002</p> \u89e3\u9898\u601d\u8def Go <pre><code>package main\n\nfunc maxProfit(prices []int) int {\n    n := len(prices)\n    // buy: \u6bcf\u5929\u7ed3\u675f\u65f6\uff0c\u624b\u4e2d\u6301\u6709\u80a1\u7968\u7684\u7d2f\u8ba1\u6700\u5927\u6536\u76ca\n    // cool: \u6bcf\u5929\u7ed3\u675f\u65f6\uff0c\u624b\u4e2d\u4e0d\u6301\u6709\u80a1\u7968\uff0c\u4e14\u5904\u4e8e\u51b7\u51bb\u671f\u4e2d\uff08\u524d\u4e00\u5929\u5356\u51fa\u4e86\u80a1\u7968\uff09\u7684\u7d2f\u8ba1\u6700\u5927\u6536\u76ca\n    // sell: \u6bcf\u5929\u7ed3\u675f\u65f6\uff0c\u624b\u4e2d\u4e0d\u6301\u6709\u80a1\u7968\uff0c\u4e14\u4e0d\u5728\u51b7\u51bb\u671f\u4e2d\uff08\u524d\u4e00\u5929\u4e4b\u524d\u5356\u51fa\u4e86\u80a1\u7968\uff09\u7684\u7d2f\u8ba1\u6700\u5927\u6536\u76ca\n    buy, cool, sell := -prices[0], 0, 0\n    for i := 1; i &lt; n; i++ {\n        buy, sell = max(buy, sell-prices[i]), max(sell, cool)\n        cool = buy + prices[i]\n    }\n    return max(cool, sell)\n}\n\nfunc max(x, y int) int {\n    if x &gt; y {\n        return x\n    } else {\n        return y\n    }\n}\n</code></pre>"},{"location":"dp/basic/stock/#lc714-\u4e70\u5356\u80a1\u7968\u542b\u624b\u7eed\u8d39","title":"LC714. \u4e70\u5356\u80a1\u7968\u542b\u624b\u7eed\u8d39","text":"\u95ee\u9898\u63cf\u8ff0 <p>\u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a <code>n(1\u2264n\u22645e4)</code> \u7684\u6574\u6570\u6570\u7ec4 <code>prices</code> \uff0c<code>1\u2264prices[i]\u22645e4</code> \u8868\u793a\u4e00\u652f\u80a1\u7968\u7b2c <code>i</code> \u5929\u7684\u4ef7\u683c\u3002\u6574\u6570 <code>fee(0\u2264fee\u22645e4)</code> \u4ee3\u8868\u4e86\u4ea4\u6613\u80a1\u7968\u7684\u624b\u7eed\u8d39\u7528\u3002 \u4f60\u53ef\u4ee5\u65e0\u9650\u6b21\u5730\u5b8c\u6210\u4ea4\u6613\uff0c\u4f46\u662f\u4f60\u6bcf\u7b14\u4ea4\u6613\u90fd\u9700\u8981\u4ed8\u624b\u7eed\u8d39\u3002\u4f60\u4e0d\u80fd\u540c\u65f6\u53c2\u4e0e\u591a\u7b14\u4ea4\u6613\uff0c\u5fc5\u987b\u5728\u518d\u6b21\u8d2d\u4e70\u524d\u51fa\u552e\u6389\u4e4b\u524d\u7684\u80a1\u7968\u3002 \u8fd4\u56de\u4f60\u80fd\u83b7\u5f97\u7684\u6700\u5927\u5229\u6da6\u3002</p> <p>\u5728 LeetCode\u4e3b\u7ad9 \u6216 \u529b\u6263\u4e2d\u6587\u793e\u533a \u67e5\u770b\u8be5\u9898\u3002</p> \u89e3\u9898\u601d\u8def <p>\u65b9\u6cd5\u4e00\uff1a\u52a8\u6001\u89c4\u5212</p> Go <pre><code>package main\n\nfunc maxProfit(prices []int, fee int) int {\n    n := len(prices)\n    // buy: \u6bcf\u5929\u7ed3\u675f\u65f6, \u624b\u4e2d\u6301\u6709\u80a1\u7968\u7684\u7d2f\u8ba1\u6700\u5927\u6536\u76ca\n    // sell: \u6bcf\u5929\u7ed3\u675f\u65f6, \u624b\u4e2d\u4e0d\u6301\u6709\u80a1\u7968\u7684\u7d2f\u8ba1\u6700\u5927\u6536\u76ca\n    buy, sell := -prices[0], 0\n    for i := 1; i &lt; n; i++ {\n        buy = max(buy, sell-prices[i])\n        sell = max(sell, buy+prices[i]-fee)\n    }\n    return sell\n}\n\nfunc max(x, y int) int {\n    if x &gt; y {\n        return x\n    } else {\n        return y\n    }\n}\n</code></pre> <p>\u65b9\u6cd5\u4e8c\uff1a\u8d2a\u5fc3</p> Go <pre><code>package main\n\nfunc maxProfit(prices []int, fee int) int {\n    n := len(prices)\n    cost, profit := prices[0]+fee, 0\n    for i := 1; i &lt; n; i++ {\n        if prices[i]+fee &lt; cost {\n            // \u964d\u4f4e\u6301\u4ed3\u6210\u672c\n            cost = prices[i] + fee\n        } else if prices[i] &gt; cost {\n            // \u8d2a\u5fc3\uff0c\u80fd\u8d5a\u5c31\u8d5a\n            profit += prices[i] - cost\n            // \u5356\u5728\u6700\u9ad8\u70b9\uff0c\u4e0d\u91cd\u590d\u4ea4\u624b\u7eed\u8d39\n            cost = prices[i]\n        }\n    }\n    return profit\n}\n</code></pre>"},{"location":"dp/knapsack/","title":"\u80cc\u5305 DP","text":""},{"location":"dp/knapsack/#0-1-\u80cc\u5305","title":"0-1 \u80cc\u5305","text":""},{"location":"dp/knapsack/#t-acwing2-0-1-\u80cc\u5305","title":"[T] AcWing2. 0-1 \u80cc\u5305","text":"\u95ee\u9898\u63cf\u8ff0 <p>\u7b2c\u4e00\u884c\u8f93\u5165 \\(n\\) \u548c \\(m\\) \u4e24\u4e2a\u6574\u6570\uff0c\\(1\u2264n,m\u22641e3\\) \u3002\u8868\u793a\u6709 \\(n\\) \u4ef6\u7269\u54c1\u548c\u4e00\u4e2a\u5bb9\u91cf\u4e3a \\(m\\) \u7684\u80cc\u5305\u3002 \u63a5\u4e0b\u6765 \\(n\\) \u884c\uff0c\u6bcf\u884c\u8f93\u5165 \\(v_i\\) \u548c \\(w_i\\) \u4e24\u4e2a\u6574\u6570\uff0c\u8868\u793a\u7b2c \\(i\\) \u4ef6\u7269\u54c1\u7684\u4f53\u79ef\u662f \\(v_i\\) \uff0c\u4ef7\u503c\u662f \\(w_i\\) \uff0c\\(1\u2264v_i,w_i\u22641e3\\) \u3002 \u6c42\u89e3\u5c06\u54ea\u4e9b\u7269\u54c1\u88c5\u5165\u80cc\u5305\uff0c\u53ef\u4f7f\u8fd9\u4e9b\u7269\u54c1\u7684\u603b\u4f53\u79ef\u4e0d\u8d85\u8fc7\u80cc\u5305\u5bb9\u91cf\uff0c\u4e14\u603b\u4ef7\u503c\u6700\u5927\u3002\u8f93\u51fa\u6700\u5927\u603b\u4ef7\u503c\u3002</p> <p>\u5728 AcWing \u67e5\u770b\u8be5\u9898\u3002</p> \u89e3\u9898\u601d\u8def <p>\u5b9a\u4e49 \\(f[i][j]\\) \u8868\u793a\u53ea\u4ece\u524d \\(i\\) \u4e2a\u7269\u54c1\u4e2d\u9009\u62e9\u7684\u60c5\u51b5\u4e0b\uff0c\u5bb9\u91cf\u4e3a \\(j\\) \u7684\u80cc\u5305\u6240\u80fd\u8fbe\u5230\u7684\u6700\u5927\u603b\u4ef7\u503c\u3002 \u6839\u636e\u7b2c \\(i\\) \u4ef6\u7269\u54c1\u662f\u5426\u653e\u5165\uff0c\u72b6\u6001\u8f6c\u79fb\u5982\u4e0b\uff1a</p> \\[f[i][j] = {max}(f[i-1][j], f[i-1][j-v_i] + w_i)\\] <p>\u5b9e\u73b0\u65f6\u53ef\u4ee5\u4f18\u5316\u6389\u7b2c\u4e00\u4e2a\u7ef4\u5ea6\uff0c\u6ce8\u610f\u5faa\u73af\u679a\u4e3e\u987a\u5e8f\u3002</p> GoJava <pre><code>package main\n\nimport (\n    \"bufio\"\n    . \"fmt\"\n    \"os\"\n)\n\nfunc main() {\n    in := bufio.NewReader(os.Stdin)\n    out := bufio.NewWriter(os.Stdout)\n    defer out.Flush()\n\n    var n, m int\n    Fscan(in, &amp;n, &amp;m)\n    arr := make([][2]int, n)\n    for i := range arr {\n        Fscan(in, &amp;arr[i][0], &amp;arr[i][1])\n    }\n\n    dp := make([]int, m+1)\n    for _, item := range arr { // \u679a\u4e3e\u7269\u54c1\n        v, w := item[0], item[1]\n        for j := m; j &gt;= v; j-- { // \u679a\u4e3e\u80cc\u5305\u5bb9\u91cf\n            dp[j] = max(dp[j], dp[j-v]+w)\n        }\n    }\n    Fprintln(out, dp[m])\n}\n\nfunc max(x, y int) int {\n    if x &gt; y {\n        return x\n    } else {\n        return y\n    }\n}\n</code></pre> <pre><code>import java.io.*;\nimport java.util.*;\n\npublic class Main {\n\n    static BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n\n    public static void main(String[] args) throws Exception {\n        StringTokenizer nm = new StringTokenizer(in.readLine());\n        int n = Integer.parseInt(nm.nextToken());\n        int m = Integer.parseInt(nm.nextToken());\n        int[][] items = new int[n][2];\n        for (int i = 0; i &lt; n; i++) {\n            StringTokenizer item = new StringTokenizer(in.readLine());\n            items[i][0] = Integer.parseInt(item.nextToken());\n            items[i][1] = Integer.parseInt(item.nextToken());\n        }\n\n        int[] dp = new int[m + 1];\n        for (int[] item : items) { // \u679a\u4e3e\u7269\u54c1\n            int v = item[0], w = item[1];\n            for (int j = m; j &gt;= v; j--) { // \u679a\u4e3e\u80cc\u5305\u5bb9\u91cf\n                dp[j] = Math.max(dp[j], dp[j - v] + w);\n            }\n        }\n        System.out.println(dp[m]);\n        in.close();\n    }\n}\n</code></pre>"},{"location":"dp/knapsack/#lc2742-\u7ed9\u5899\u58c1\u5237\u6cb9\u6f06","title":"LC2742. \u7ed9\u5899\u58c1\u5237\u6cb9\u6f06","text":"\u95ee\u9898\u63cf\u8ff0 <p>\u7ed9\u4f60\u4e24\u4e2a\u957f\u5ea6\u4e3a \\(n(1\u2264n\u2264500)\\) \u7684\u6574\u6570\u6570\u7ec4 \\(cost\\) \u548c \\(time\\) \u3002 \u73b0\u9700\u8981\u7ed9 \\(n\\) \u5835\u5899\u5237\u6cb9\u6f06\uff0c\u4f60\u6709\u4e24\u540d\u6cb9\u6f06\u5320\uff1a</p> <ul> <li>\u4e00\u4f4d\u9700\u8981 \u4ed8\u8d39 \u7684\u6cb9\u6f06\u5320\uff0c\u5237\u7b2c \\(i\\) \u5835\u5899\u9700\u8981\u82b1\u8d39 \\(1\u2264time[i]\u22641e6\\) \u5355\u4f4d\u7684\u65f6\u95f4\uff0c\u5f00\u9500\u4e3a \\(1\u2264cost[i]\u2264500\\) \u5355\u4f4d\u7684\u94b1\uff1b</li> <li>\u4e00\u4f4d \u514d\u8d39 \u7684\u6cb9\u6f06\u5320\uff0c\u5237 \u4efb\u610f \u4e00\u5835\u5899\u7684\u65f6\u95f4\u4e3a \\(1\\) \u5355\u4f4d\uff0c\u5f00\u9500\u4e3a \\(0\\) \u3002\u4f46\u662f\u5fc5\u987b\u5728\u4ed8\u8d39\u6cb9\u6f06\u5320 \u5de5\u4f5c \u65f6\uff0c\u514d\u8d39\u6cb9\u6f06\u5320\u624d\u4f1a\u5de5\u4f5c\u3002</li> </ul> <p>\u8bf7\u4f60\u8fd4\u56de\u5237\u5b8c \\(n\\) \u5835\u5899\u6700\u5c11\u5f00\u9500\u4e3a\u591a\u5c11\u3002</p> <p>\u5728 LeetCode\u4e3b\u7ad9 \u6216 \u529b\u6263\u4e2d\u6587\u793e\u533a \u67e5\u770b\u8be5\u9898\u3002</p> \u89e3\u9898\u601d\u8def <p>\u8bb0\u4ed8\u8d39\u5237\u5899\u4e2a\u6570\u4e3a \\(c\\) \uff0c\u4ed8\u8d39\u5237\u5899\u65f6\u95f4\u4e4b\u548c\u4e3a \\(t\\) \uff0c\u9898\u76ee\u8981\u6c42\uff1a\\(t &gt;= n-c\\) \u3002 \u79fb\u9879\u5f97\uff1a\\(t + c &gt;= n\\) \uff0c\u628a \\(c\\) \u62c6\u5206\u5230\u6bcf\u4e2a\u4ed8\u8d39\u5237\u5899\u65f6\u95f4\u4e0a\u53ef\u5f97\uff1a\\(\\sum(time[i] + 1) &gt;= n\\) \u3002</p> <p>\u81f3\u6b64\uff0c\u95ee\u9898\u8f6c\u5316\u4e3a 0-1 \u80cc\u5305\u95ee\u9898\uff1a \u6709 \\(n\\) \u4e2a\u7269\u54c1\uff0c\u6bcf\u4e2a\u7269\u54c1\u7684\u4f53\u79ef\u4e3a \\(time[i] + 1\\) \uff0c\u4ef7\u503c\u4e3a \\(cost[i]\\)\uff0c\u9009\u62e9\u4f53\u79ef\u548c \u81f3\u5c11 \u4e3a \\(n\\) \u7684\u7269\u54c1\uff0c\u4ef7\u503c\u548c \u6700\u5c0f \u662f\u591a\u5c11\uff1f</p> <p>\\(dp[i][j]\\) \u8868\u793a\u53ea\u4ece\u524d \\(i\\) \u4e2a\u7269\u54c1\u4e2d\u9009\u62e9\u7684\u60c5\u51b5\u4e0b\uff0c\u9009\u62e9\u4f53\u79ef\u548c\u81f3\u5c11\u4e3a \\(j\\) \u7684\u7269\u54c1\u7684\u6700\u5c0f\u4ef7\u503c\u548c\u3002 \u5b9e\u73b0\u65f6\u53ef\u4ee5\u4f18\u5316\u6389\u7b2c\u4e00\u4e2a\u7ef4\u5ea6\uff0c\u6ce8\u610f\u5faa\u73af\u679a\u4e3e\u987a\u5e8f\u3002</p> Go <pre><code>package main\n\nimport \"math\"\n\nfunc paintWalls(cost []int, time []int) int {\n    n := len(cost)\n    dp := make([]int, n+1)\n    for i := 1; i &lt;= n; i++ {\n        dp[i] = math.MaxInt32\n    }\n    for i, c := range cost { // \u679a\u4e3e\u7269\u54c1\n        t := time[i] + 1         // \u7269\u54c1\u4f53\u79ef\n        for j := n; j &gt; 0; j-- { // \u679a\u4e3e\u80cc\u5305\u5bb9\u91cf\n            dp[j] = min(dp[j], dp[max(j-t, 0)]+c)\n        }\n    }\n    return dp[n]\n}\n\nfunc min(x, y int) int {\n    if x &lt; y {\n        return x\n    } else {\n        return y\n    }\n}\n\nfunc max(x, y int) int {\n    if x &gt; y {\n        return x\n    } else {\n        return y\n    }\n}\n</code></pre>"},{"location":"dp/knapsack/#\u5b8c\u5168\u80cc\u5305","title":"\u5b8c\u5168\u80cc\u5305","text":""},{"location":"dp/knapsack/#t-acwing3-\u5b8c\u5168\u80cc\u5305","title":"[T] AcWing3. \u5b8c\u5168\u80cc\u5305","text":"\u95ee\u9898\u63cf\u8ff0 <p>\u7b2c\u4e00\u884c\u8f93\u5165 \\(n\\) \u548c \\(m\\) \u4e24\u4e2a\u6574\u6570\uff0c\\(1\u2264n,m\u22641e3\\) \u3002\u8868\u793a\u6709 \\(n\\) \u79cd\u7269\u54c1\u548c\u4e00\u4e2a\u5bb9\u91cf\u4e3a \\(m\\) \u7684\u80cc\u5305\u3002 \u63a5\u4e0b\u6765 \\(n\\) \u884c\uff0c\u6bcf\u884c\u8f93\u5165 \\(v_i\\) \u548c \\(w_i\\) \u4e24\u4e2a\u6574\u6570\uff0c\u8868\u793a\u7b2c \\(i\\) \u79cd\u7269\u54c1\u7684\u4f53\u79ef\u662f \\(v_i\\) \uff0c\u4ef7\u503c\u662f \\(w_i\\) \uff0c\\(1\u2264v_i,w_i\u22641e3\\) \u3002 \u6bcf\u79cd\u7269\u54c1\u90fd\u6709\u65e0\u9650\u4ef6\u53ef\u4f9b\u9009\u62e9\u3002 \u6c42\u89e3\u5c06\u54ea\u4e9b\u7269\u54c1\u88c5\u5165\u80cc\u5305\uff0c\u53ef\u4f7f\u8fd9\u4e9b\u7269\u54c1\u7684\u603b\u4f53\u79ef\u4e0d\u8d85\u8fc7\u80cc\u5305\u5bb9\u91cf\uff0c\u4e14\u603b\u4ef7\u503c\u6700\u5927\u3002\u8f93\u51fa\u6700\u5927\u603b\u4ef7\u503c\u3002</p> <p>\u5728 AcWing \u67e5\u770b\u8be5\u9898\u3002</p> \u89e3\u9898\u601d\u8def <p>\u5b9a\u4e49 \\(f[i][j]\\) \u8868\u793a\u53ea\u4ece\u524d \\(i\\) \u79cd\u7269\u54c1\u4e2d\u9009\u62e9\u7684\u60c5\u51b5\u4e0b\uff0c\u5bb9\u91cf\u4e3a \\(j\\) \u7684\u80cc\u5305\u6240\u80fd\u8fbe\u5230\u7684\u6700\u5927\u603b\u4ef7\u503c\u3002 \u6839\u636e\u7b2c \\(i\\) \u4ef6\u7269\u54c1\u653e\u5165 \\(k\\) \u4ef6\uff0c\u72b6\u6001\u8f6c\u79fb\u5982\u4e0b\uff1a</p> \\[f[i][j] = {max}\\{f[i-1][j-k \\times v_i] + k \\times w_i\\} \\qquad 0\u2264k \\times v_i\u2264m\\] <p>\u5f53 \\(k = 0\\) \u65f6\uff0c\\(f[i][j] = f[i-1][j]\\) \uff1b\u5f53 \\(k &gt; 1\\) \u65f6\uff0c\u6709</p> \\[ \\begin{align*}     f[i][j] &amp;= {max}\\{f[i-1][j-v_i-(k-1) \\times v_i] + (k-1) \\times w_i + w_i\\} \\\\             \\\\             &amp;= f[i][j-v_i] + w_i \\end{align*} \\] <p>\u56e0\u6b64\uff0c\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u53ef\u4ee5\u4f18\u5316\u4e3a\uff1a</p> \\[f[i][j] = {max}(f[i-1][j], f[i][j-v_i]+w_i)\\] <p>\u5b9e\u73b0\u65f6\u53ef\u4ee5\u4f18\u5316\u6389\u7b2c\u4e00\u4e2a\u7ef4\u5ea6\uff0c\u6ce8\u610f\u5faa\u73af\u679a\u4e3e\u987a\u5e8f\u3002</p> GoJava <pre><code>package main\n\nimport (\n    \"bufio\"\n    . \"fmt\"\n    \"os\"\n)\n\nfunc main() {\n    in := bufio.NewReader(os.Stdin)\n\n    var n, m int\n    Fscan(in, &amp;n, &amp;m)\n    items := make([][2]int, n)\n    for i := range items {\n        Fscan(in, &amp;items[i][0], &amp;items[i][1])\n    }\n\n    dp := make([]int, m+1)\n    for _, item := range items { // \u679a\u4e3e\u7269\u54c1\n        v, w := item[0], item[1]\n        for j := v; j &lt;= m; j++ { // \u679a\u4e3e\u80cc\u5305\u5bb9\u91cf\n            dp[j] = max(dp[j], dp[j-v]+w)\n        }\n    }\n    Println(dp[m])\n}\n\nfunc max(x, y int) int {\n    if x &gt; y {\n        return x\n    } else {\n        return y\n    }\n}\n</code></pre> <pre><code>import java.io.*;\nimport java.util.*;\n\npublic class Main {\n\n    static BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n\n    public static void main(String[] args) throws Exception {\n        StringTokenizer nm = new StringTokenizer(in.readLine());\n        int n = Integer.parseInt(nm.nextToken());\n        int m = Integer.parseInt(nm.nextToken());\n        int[][] items = new int[n][2];\n        for (int i = 0; i &lt; n; i++) {\n            StringTokenizer tokenizer = new StringTokenizer(in.readLine());\n            items[i][0] = Integer.parseInt(tokenizer.nextToken());\n            items[i][1] = Integer.parseInt(tokenizer.nextToken());\n        }\n        int[] dp = new int[m + 1];\n        for (int[] item : items) { // \u679a\u4e3e\u7269\u54c1\n            int v = item[0], w = item[1];\n            for (int j = v; j &lt;= m; j++) { // \u679a\u4e3e\u80cc\u5305\u5bb9\u91cf\n                dp[j] = Math.max(dp[j], dp[j - v] + w);\n            }\n        }\n        System.out.println(dp[m]);\n        in.close();\n    }\n}\n</code></pre>"},{"location":"dp/knapsack/#\u591a\u91cd\u80cc\u5305","title":"\u591a\u91cd\u80cc\u5305","text":""},{"location":"dp/knapsack/#t-acwing4-\u591a\u91cd\u80cc\u5305-i","title":"[T] AcWing4. \u591a\u91cd\u80cc\u5305 I","text":"\u95ee\u9898\u63cf\u8ff0 <p>\u7b2c\u4e00\u884c\u8f93\u5165 \\(n\\) \u548c \\(m\\) \u4e24\u4e2a\u6574\u6570\uff0c\\(1\u2264n,m\u2264100\\) \u3002\u8868\u793a\u6709 \\(n\\) \u79cd\u7269\u54c1\u548c\u4e00\u4e2a\u5bb9\u91cf\u4e3a \\(m\\) \u7684\u80cc\u5305\u3002 \u63a5\u4e0b\u6765 \\(n\\) \u884c\uff0c\u6bcf\u884c\u8f93\u5165 \\(v_i\\ \\ w_i\\ \\ c_i\\) \u4e09\u4e2a\u6574\u6570\uff0c\u8868\u793a\u7b2c i \u79cd\u7269\u54c1\u7684\u4f53\u79ef\u662f \\(v_i\\) \uff0c\u4ef7\u503c\u662f \\(w_i\\) \uff0c\u6709 \\(c_i\\) \u4ef6\uff0c\\(1\u2264v_i,w_i,c_i\u2264100\\) \u3002 \u6c42\u89e3\u5c06\u54ea\u4e9b\u7269\u54c1\u88c5\u5165\u80cc\u5305\uff0c\u53ef\u4f7f\u8fd9\u4e9b\u7269\u54c1\u7684\u603b\u4f53\u79ef\u4e0d\u8d85\u8fc7\u80cc\u5305\u5bb9\u91cf\uff0c\u4e14\u603b\u4ef7\u503c\u6700\u5927\u3002\u8f93\u51fa\u6700\u5927\u603b\u4ef7\u503c\u3002</p> <p>\u5728 AcWing \u67e5\u770b\u8be5\u9898\u3002</p> \u89e3\u9898\u601d\u8def <p>\u7531\u4e8e\u6bcf\u79cd\u7269\u54c1\u7684\u6570\u91cf\u6709\u9650\uff0c\u4e0d\u80fd\u6309\u7167\u5b8c\u5168\u80cc\u5305\u8fdb\u884c\u4f18\u5316\uff0c\u539f\u56e0\u662f\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u4e0d\u4e00\u5b9a\u6210\u7acb\u3002</p> \u8f6c\u5316\u4e3a 0-1 \u80cc\u5305\u95ee\u9898 <p>\u6bcf\u79cd\u7269\u54c1\u9009 \\(c_i\\) \u6b21 \u7b49\u4ef7\u4e8e \u6709 \\(c_i\\) \u4ef6\u76f8\u540c\u7269\u54c1\uff0c\u6bcf\u4ef6\u7269\u54c1\u6700\u591a\u9009\u4e00\u6b21 \u3002 \u95ee\u9898\u8f6c\u6362\u4e3a 0-1 \u80cc\u5305\u95ee\u9898\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\uff1a\\(O(m\\sum{c_i})\\) \u3002</p> GoJava <pre><code>package main\n\nimport (\n    \"bufio\"\n    . \"fmt\"\n    \"os\"\n)\n\nfunc main() {\n    in := bufio.NewReader(os.Stdin)\n\n    var n, m int\n    Fscan(in, &amp;n, &amp;m)\n    items := make([][3]int, n)\n    for i := range items {\n        Fscan(in, &amp;items[i][0], &amp;items[i][1], &amp;items[i][2])\n    }\n\n    dp := make([]int, m+1)\n    for _, item := range items { // \u679a\u4e3e\u6bcf\u79cd\u5546\u54c1\n        v, w, c := item[0], item[1], item[2]\n        for ; c &gt; 0; c-- { // \u679a\u4e3e\u8be5\u79cd\u5546\u54c1\u7684\u6bcf\u4e00\u4ef6\uff0c\u8f6c\u5316\u4e3a0-1\u80cc\u5305\n            for j := m; j &gt;= v; j-- { // \u679a\u4e3e\u80cc\u5305\u5bb9\u91cf\n                dp[j] = max(dp[j], dp[j-v]+w)\n            }\n        }\n    }\n    Println(dp[m])\n}\n\nfunc max(x, y int) int {\n    if x &gt; y {\n        return x\n    } else {\n        return y\n    }\n}\n</code></pre> <pre><code>import java.io.*;\nimport java.util.*;\n\npublic class Main {\n\n    static BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n\n    public static void main(String[] args) throws Exception {\n        StringTokenizer nm = new StringTokenizer(in.readLine());\n        int n = Integer.parseInt(nm.nextToken());\n        int m = Integer.parseInt(nm.nextToken());\n        int[][] items = new int[n][3];\n        for (int i = 0; i &lt; n; i++) {\n            StringTokenizer tokenizer = new StringTokenizer(in.readLine());\n            items[i][0] = Integer.parseInt(tokenizer.nextToken());\n            items[i][1] = Integer.parseInt(tokenizer.nextToken());\n            items[i][2] = Integer.parseInt(tokenizer.nextToken());\n        }\n\n        int[] dp = new int[m + 1];\n        for (int[] item : items) { // \u679a\u4e3e\u6bcf\u79cd\u7269\u54c1\n            int v = item[0], w = item[1], c = item[2];\n            for (; c &gt; 0; c--) { // \u679a\u4e3e\u8be5\u79cd\u5546\u54c1\u7684\u6bcf\u4e00\u4ef6\uff0c\u8f6c\u5316\u4e3a0-1\u80cc\u5305\n                for (int j = m; j &gt;= v; j--) { // \u679a\u4e3e\u80cc\u5305\u5bb9\u91cf\n                    dp[j] = Math.max(dp[j], dp[j - v] + w);\n                }\n            }\n        }\n        System.out.println(dp[m]);\n        in.close();\n    }\n}\n</code></pre> \u8f6c\u5316\u4e3a\u5206\u7ec4\u80cc\u5305\u95ee\u9898 <p>\u628a\u6bcf\u79cd\u7269\u54c1\u770b\u6210\u4e00\u4e2a\u5206\u7ec4\uff0c\u5206\u7ec4\u5185\u5305\u542b\u5206\u522b\u7531 \\(1, 2, ..., c_i\\) \u4ef6\u8be5\u79cd\u7269\u54c1\u7ec4\u6210\u7684 \\(c_i\\) \u4ef6\u7269\u54c1\uff0c\u6700\u591a\u9009\u62e9\u4e00\u4ef6\u3002 \u95ee\u9898\u8f6c\u6362\u4e3a\u5206\u7ec4\u80cc\u5305\u95ee\u9898\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\uff1a\\(O(m\\sum{c_i})\\) \u3002</p> GoJava <pre><code>package main\n\nimport (\n    \"bufio\"\n    . \"fmt\"\n    \"os\"\n)\n\nfunc main() {\n    in := bufio.NewReader(os.Stdin)\n\n    var n, m int\n    Fscan(in, &amp;n, &amp;m)\n    items := make([][3]int, n)\n    for i := range items {\n        Fscan(in, &amp;items[i][0], &amp;items[i][1], &amp;items[i][2])\n    }\n\n    dp := make([]int, m+1)\n    for _, item := range items { // \u679a\u4e3e\u6bcf\u79cd\u7269\u54c1\n        v, w, c := item[0], item[1], item[2]\n        for j := m; j &gt;= v; j-- { // \u679a\u4e3e\u80cc\u5305\u5bb9\u91cf\n            for k := 1; k &lt;= c &amp;&amp; k*v &lt;= j; k++ { // \u679a\u4e3e\u5206\u7ec4\u5185\u7684\u6bcf\u4e00\u4ef6\u7269\u54c1\n                dp[j] = max(dp[j], dp[j-k*v]+k*w)\n            }\n        }\n    }\n    Println(dp[m])\n}\n\nfunc max(x, y int) int {\n    if x &gt; y {\n        return x\n    } else {\n        return y\n    }\n}\n</code></pre> <pre><code>import java.io.*;\nimport java.util.*;\n\npublic class Main {\n\n    static BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n\n    public static void main(String[] args) throws Exception {\n        StringTokenizer nm = new StringTokenizer(in.readLine());\n        int n = Integer.parseInt(nm.nextToken());\n        int m = Integer.parseInt(nm.nextToken());\n        int[][] items = new int[n][3];\n        for (int i = 0; i &lt; n; i++) {\n            StringTokenizer tokenizer = new StringTokenizer(in.readLine());\n            items[i][0] = Integer.parseInt(tokenizer.nextToken());\n            items[i][1] = Integer.parseInt(tokenizer.nextToken());\n            items[i][2] = Integer.parseInt(tokenizer.nextToken());\n        }\n\n        int[] dp = new int[m + 1];\n        for (int[] item : items) { // \u679a\u4e3e\u6bcf\u79cd\u7269\u54c1\n            int v = item[0], w = item[1], c = item[2];\n            for (int j = m; j &gt;= v; j--) { // \u679a\u4e3e\u80cc\u5305\u5bb9\u91cf\n                for (int k = 1; k &lt;= c &amp;&amp; k * v &lt;= j; k++) { // \u679a\u4e3e\u5206\u7ec4\u5185\u7684\u6bcf\u4e00\u4ef6\u7269\u54c1\n                    dp[j] = Math.max(dp[j], dp[j - k * v] + k * w);\n                }\n            }\n        }\n        System.out.println(dp[m]);\n        in.close();\n    }\n}\n</code></pre> \u8fdb\u9636\u4e00\uff1a\u4e8c\u8fdb\u5236\u5206\u7ec4\u4f18\u5316 <p>AcWing5. \u591a\u91cd\u80cc\u5305\u95ee\u9898 II \u5c06\u6570\u636e\u8303\u56f4\u589e\u5927\u4e3a\uff1a\\(1\u2264n\u22641e3\\) \uff1b\\(1\u2264m\u22642e3\\) \uff1b\\(1\u2264v_i,w_i,c_i\u22642e3\\) \u3002 \u91c7\u7528\u4e0a\u8ff0\u65b9\u6cd5\u5c06\u4f1a\u8d85\u51fa\u65f6\u95f4\u9650\u5236\uff0c\u53ef\u4ee5\u901a\u8fc7\u4e8c\u8fdb\u5236\u5206\u7ec4\u8fdb\u884c\u4f18\u5316\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\uff1a\\(O(m\\sum{\\log{c_i}})\\) \u3002</p> GoJava <pre><code>package main\n\nimport (\n    \"bufio\"\n    . \"fmt\"\n    \"os\"\n)\n\nfunc main() {\n    in := bufio.NewReader(os.Stdin)\n\n    var n, m int\n    Fscan(in, &amp;n, &amp;m)\n    items := make([][3]int, n)\n    for i := range items {\n        Fscan(in, &amp;items[i][0], &amp;items[i][1], &amp;items[i][2])\n    }\n\n    dp := make([]int, m+1)\n    for _, item := range items {\n        v, w, c := item[0], item[1], item[2]\n        if c*v &gt;= m { // \u8f6c\u5316\u4e3a\u5b8c\u5168\u80cc\u5305\n            for j := v; j &lt;= m; j++ {\n                dp[j] = max(dp[j], dp[j-v]+w)\n            }\n        } else { // \u4e0d\u80fd\u8f6c\u5316\u4e3a\u5b8c\u5168\u80cc\u5305\uff0c\u4f7f\u7528\u4e8c\u8fdb\u5236\u5206\u7ec4\u4f18\u5316\n            // \u6bcf\u4e2a\u5206\u7ec4\u770b\u4f5c\u72ec\u7acb\u7684\u4e00\u4ef6\u7269\u54c1\uff0c\u8f6c\u5316\u4e3a0-1\u80cc\u5305\uff0c\u7ec4\u5408\u5206\u7ec4\u53ef\u4ee5\u7ec4\u5408\u51fa[1, c]\u8303\u56f4\u5185\u7684\u4efb\u4e00\u4ef6\u6570\n            for k := 1; k &lt;= c; k &lt;&lt;= 1 {\n                c -= k\n                kv, kw := k*v, k*w\n                for j := m; j &gt;= kv; j-- {\n                    dp[j] = max(dp[j], dp[j-kv]+kw)\n                }\n            }\n            if c != 0 {\n                cv, cw := c*v, c*w\n                for j := m; j &gt;= cv; j-- {\n                    dp[j] = max(dp[j], dp[j-cv]+cw)\n                }\n            }\n        }\n    }\n    Println(dp[m])\n}\n\nfunc max(x, y int) int {\n    if x &gt; y {\n        return x\n    } else {\n        return y\n    }\n}\n</code></pre> <pre><code>import java.io.*;\nimport java.util.*;\n\npublic class Main {\n\n    static BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n\n    public static void main(String[] args) throws Exception {\n        StringTokenizer nm = new StringTokenizer(in.readLine());\n        int n = Integer.parseInt(nm.nextToken());\n        int m = Integer.parseInt(nm.nextToken());\n        int[][] items = new int[n][3];\n        for (int i = 0; i &lt; n; i++) {\n            StringTokenizer tokenizer = new StringTokenizer(in.readLine());\n            items[i][0] = Integer.parseInt(tokenizer.nextToken());\n            items[i][1] = Integer.parseInt(tokenizer.nextToken());\n            items[i][2] = Integer.parseInt(tokenizer.nextToken());\n        }\n\n        int[] dp = new int[m + 1];\n        for (int[] item : items) {\n            int v = item[0], w = item[1], c = item[2];\n            if (c * v &gt;= m) { // \u8f6c\u5316\u4e3a\u5b8c\u5168\u80cc\u5305\n                for (int j = v; j &lt;= m; j++) {\n                    dp[j] = Math.max(dp[j], dp[j - v] + w);\n                }\n            } else { // \u4e0d\u80fd\u8f6c\u5316\u4e3a\u5b8c\u5168\u80cc\u5305\uff0c\u4f7f\u7528\u4e8c\u8fdb\u5236\u5206\u7ec4\u4f18\u5316\n                // \u6bcf\u4e2a\u5206\u7ec4\u770b\u4f5c\u72ec\u7acb\u7684\u4e00\u4ef6\u7269\u54c1\uff0c\u8f6c\u5316\u4e3a0-1\u80cc\u5305\uff0c\u7ec4\u5408\u5206\u7ec4\u53ef\u4ee5\u7ec4\u5408\u51fa[1, c]\u8303\u56f4\u5185\u7684\u4efb\u4e00\u4ef6\u6570\n                for (int k = 1; k &lt;= c; k &lt;&lt;= 1) {\n                    c -= k;\n                    int kv = k * v, kw = k * w;\n                    for (int j = m; j &gt;= kv; j--) {\n                        dp[j] = Math.max(dp[j], dp[j - kv] + kw);\n                    }\n                }\n                if (c != 0) {\n                    int cv = c * v, cw = c * w;\n                    for (int j = m; j &gt;= cv; j--) {\n                        dp[j] = Math.max(dp[j], dp[j - cv] + cw);\n                    }\n                }\n            }\n        }\n        System.out.println(dp[m]);\n        in.close();\n    }\n}\n</code></pre> \u8fdb\u9636\u4e8c\uff1a\u5355\u8c03\u961f\u5217\u4f18\u5316 <p>AcWing6. \u591a\u91cd\u80cc\u5305\u95ee\u9898 III \u5c06\u6570\u636e\u8303\u56f4\u589e\u5927\u4e3a\uff1a\\(1\u2264n\u22641e3\\) \uff1b\\(1\u2264m\u22642e4\\) \uff1b\\(1\u2264v_i,w_i,c_i\u22642e4\\) \u3002 \u91c7\u7528\u4e8c\u8fdb\u5236\u5206\u7ec4\u4f18\u5316\u4e5f\u4f1a\u8d85\u51fa\u65f6\u95f4\u9650\u5236\uff0c\u9700\u8981\u901a\u8fc7\u5355\u8c03\u961f\u5217\u8fdb\u884c\u4f18\u5316\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\uff1a\\(O(nm)\\) \u3002</p> GoJava <pre><code>package main\n\nimport (\n    \"bufio\"\n    . \"fmt\"\n    \"os\"\n)\n\nfunc main() {\n    in := bufio.NewReader(os.Stdin)\n\n    var n, m int\n    Fscan(in, &amp;n, &amp;m)\n    items := make([][3]int, n)\n    for i := range items {\n        Fscan(in, &amp;items[i][0], &amp;items[i][1], &amp;items[i][2])\n    }\n\n    // \u6eda\u52a8\u6570\u7ec4\u4f18\u5316\n    cur := make([]int, m+1)\n    pre := make([]int, m+1)\n    // \u5355\u8c03\u9012\u51cf\u7d22\u5f15\u961f\u5217\n    q := make([]int, m+1)\n    for _, item := range items {\n        v, w, c := item[0], item[1], item[2]\n        if cv := c * v; cv &gt;= m { // \u8f6c\u5316\u4e3a\u5b8c\u5168\u80cc\u5305\n            for j := v; j &lt;= m; j++ {\n                cur[j] = max(cur[j], cur[j-v]+w)\n            }\n        } else { // \u4e0d\u80fd\u8f6c\u5316\u4e3a\u5b8c\u5168\u80cc\u5305\uff0c\u4f7f\u7528\u5355\u8c03\u961f\u5217\u4f18\u5316\n            // \u6eda\u52a8\u6570\u7ec4\n            pre, cur = cur, pre\n            // \u679a\u4e3e\u4f59\u6570\n            for j := 0; j &lt; v; j++ {\n                head, tail := 0, -1\n                // \u679a\u4e3e\u4f59\u6570j\u7684\u65b9\u6848\uff1aj+v, j+2*v, j+3*v, ...\n                for k := j; k &lt;= m; k += v {\n                    // \u521d\u59cb\u5316\u4e3a\u4e0a\u6b21\u8ba1\u7b97\u7684\u7ed3\u679c\n                    cur[k] = pre[k]\n                    // \u5c06\u4e0d\u5728\u7a97\u53e3\u5185\u7684\u7d22\u5f15\u4ece\u961f\u9996\u51fa\u961f\n                    for ; head &lt;= tail &amp;&amp; k-q[head] &gt; cv; head++ {\n                    }\n                    // \u4f7f\u7528\u961f\u9996\u7684\u6700\u5927\u503c\u66f4\u65b0\u7ed3\u679c\n                    if head &lt;= tail {\n                        // \u4f7f\u7528k-q[head]\u7684\u5bb9\u91cf\u88c5\u5165\u5f53\u524d\u7269\u54c1\n                        cur[k] = max(cur[k], pre[q[head]]+(k-q[head])/v*w)\n                    }\n                    // \u5c06\u961f\u5c3e\u7684\u4ef7\u503c\u5c0f\u4e8e\u5f53\u524d\u65b9\u6848\u7684\u7d22\u5f15\u79fb\u9664\uff0c\u4fdd\u8bc1\u5355\u8c03\u9012\u51cf\n                    for ; head &lt;= tail &amp;&amp; pre[q[tail]]+(k-q[tail])/v*w &lt;= pre[k]; tail-- {\n                    }\n                    // \u5c06\u5f53\u524d\u65b9\u6848\u7684\u7d22\u5f15\u5165\u961f\u5c3e\n                    tail++\n                    q[tail] = k\n                }\n            }\n        }\n    }\n\n    Println(cur[m])\n}\n\nfunc max(x, y int) int {\n    if x &gt; y {\n        return x\n    } else {\n        return y\n    }\n}\n</code></pre> <pre><code>import java.io.*;\nimport java.util.*;\n\npublic class Main {\n\n    static BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n\n    public static void main(String[] args) throws Exception {\n        StringTokenizer nm = new StringTokenizer(in.readLine());\n        int n = Integer.parseInt(nm.nextToken());\n        int m = Integer.parseInt(nm.nextToken());\n        int[][] items = new int[n][3];\n        for (int i = 0; i &lt; n; i++) {\n            StringTokenizer vwc = new StringTokenizer(in.readLine());\n            items[i][0] = Integer.parseInt(vwc.nextToken());\n            items[i][1] = Integer.parseInt(vwc.nextToken());\n            items[i][2] = Integer.parseInt(vwc.nextToken());\n        }\n\n        // \u6eda\u52a8\u6570\u7ec4\u4f18\u5316\n        int i = 1;\n        int[][] f = new int[2][m + 1];\n        // \u5355\u8c03\u9012\u51cf\u7d22\u5f15\u961f\u5217\n        int[] q = new int[m + 1];\n        for (int[] item : items) {\n            int v = item[0], w = item[1], c = item[2];\n            int cv = c * v;\n            if (cv &gt;= m) { // \u8f6c\u5316\u4e3a\u5b8c\u5168\u80cc\u5305\n                int[] cur = f[i &amp; 1];\n                for (int j = v; j &lt;= m; j++) {\n                    cur[j] = Math.max(cur[j], cur[j - v] + w);\n                }\n            } else { // \u4e0d\u80fd\u8f6c\u5316\u4e3a\u5b8c\u5168\u80cc\u5305\uff0c\u4f7f\u7528\u5355\u8c03\u961f\u5217\u4f18\u5316\n                // \u6eda\u52a8\u6570\u7ec4\n                int[] cur = f[++i &amp; 1], pre = f[(i &amp; 1) ^ 1];\n                // \u679a\u4e3e\u4f59\u6570\n                for (int j = 0; j &lt; v; j++) {\n                    int head = 0, tail = -1;\n                    // \u679a\u4e3e\u4f59\u6570j\u7684\u65b9\u6848\uff1aj+v, j+2*v, j+3*v, ...\n                    for (int k = j; k &lt;= m; k += v) {\n                        // \u521d\u59cb\u5316\u4e3a\u4e0a\u6b21\u8ba1\u7b97\u7684\u7ed3\u679c\n                        cur[k] = pre[k];\n                        // \u5c06\u4e0d\u5728\u7a97\u53e3\u5185\u7684\u7d22\u5f15\u4ece\u961f\u9996\u51fa\u961f\n                        for (; head &lt;= tail &amp;&amp; k - q[head] &gt; cv; head++) {\n                        }\n                        // \u4f7f\u7528\u961f\u9996\u7684\u6700\u5927\u503c\u66f4\u65b0\u7ed3\u679c\n                        if (head &lt;= tail) {\n                            // \u4f7f\u7528k-q[head]\u7684\u5bb9\u91cf\u88c5\u5165\u5f53\u524d\u7269\u54c1\n                            cur[k] = Math.max(cur[k], pre[q[head]] + (k - q[head]) / v * w);\n                        }\n                        // \u5c06\u961f\u5c3e\u7684\u4ef7\u503c\u5c0f\u4e8e\u5f53\u524d\u65b9\u6848\u7684\u7d22\u5f15\u79fb\u9664\uff0c\u4fdd\u8bc1\u5355\u8c03\u9012\u51cf\n                        for (; head &lt;= tail &amp;&amp; pre[q[tail]] + (k - q[tail]) / v * w &lt;= pre[k]; tail--) {\n                        }\n                        // \u5c06\u5f53\u524d\u65b9\u6848\u7684\u7d22\u5f15\u5165\u961f\u5c3e\n                        q[++tail] = k;\n                    }\n                }\n            }\n        }\n\n        System.out.println(f[i &amp; 1][m]);\n        in.close();\n    }\n}\n</code></pre>"},{"location":"dp/knapsack/#\u6df7\u5408\u80cc\u5305","title":"\u6df7\u5408\u80cc\u5305","text":""},{"location":"dp/knapsack/#t-acwing7-\u6df7\u5408\u80cc\u5305","title":"[T] AcWing7. \u6df7\u5408\u80cc\u5305","text":"\u95ee\u9898\u63cf\u8ff0 <p>\u7b2c\u4e00\u884c\u8f93\u5165 \\(n\\) \u548c \\(m\\) \u4e24\u4e2a\u6574\u6570\uff0c\\(1\u2264n,m\u22641e3\\) \u3002\u8868\u793a\u6709 \\(n\\) \u79cd\u7269\u54c1\u548c\u4e00\u4e2a\u5bb9\u91cf\u4e3a \\(m\\) \u7684\u80cc\u5305\u3002 \u63a5\u4e0b\u6765 \\(n\\) \u884c\uff0c\u6bcf\u884c\u8f93\u5165 \\(v_i\\ \\ w_i\\ \\ c_i\\) \u4e09\u4e2a\u6574\u6570\uff0c\u8868\u793a\u7b2c \\(i\\) \u79cd\u7269\u54c1\u7684\u4f53\u79ef\u662f \\(v_i\\) \uff0c\u4ef7\u503c\u662f \\(w_i\\) \uff0c\\(1\u2264v_i,w_i\u22641e3\\) \uff0c\\(-1\u2264c_i\u22641e3\\) \u7684\u503c\u5219\u5206\u4ee5\u4e0b\u4e09\u79cd\u60c5\u51b5\uff1a</p> <ol> <li>\\(c_i = -1\\) \u8868\u793a\u7b2c i \u79cd\u7269\u54c1\u53ea\u6709 \\(1\\) \u4ef6\uff1b</li> <li>\\(c_i = 0\\) \u8868\u793a\u7b2c i \u79cd\u7269\u54c1\u6709\u65e0\u9650\u4ef6\uff1b</li> <li>\\(c_i &gt; 0\\) \u8868\u793a\u7b2c i \u79cd\u7269\u54c1\u6709 \\(c_i\\) \u4ef6\u3002</li> </ol> <p>\u6c42\u89e3\u5c06\u54ea\u4e9b\u7269\u54c1\u88c5\u5165\u80cc\u5305\uff0c\u53ef\u4f7f\u8fd9\u4e9b\u7269\u54c1\u7684\u603b\u4f53\u79ef\u4e0d\u8d85\u8fc7\u80cc\u5305\u5bb9\u91cf\uff0c\u4e14\u603b\u4ef7\u503c\u6700\u5927\u3002\u8f93\u51fa\u6700\u5927\u603b\u4ef7\u503c\u3002</p> <p>\u5728 AcWing \u67e5\u770b\u8be5\u9898\u3002</p> \u89e3\u9898\u601d\u8def <p>\u6df7\u5408\u80cc\u5305\u5c31\u662f\u5c060-1 \u80cc\u5305\u3001\u5b8c\u5168\u80cc\u5305\u3001\u591a\u91cd\u80cc\u5305\u4e09\u79cd\u80cc\u5305\u6df7\u5408\u8d77\u6765\uff0c\u6c42\u89e3\u65f6\u5206\u60c5\u51b5\u5904\u7406\u5373\u53ef\u3002</p> GoJava <pre><code>package main\n\nimport (\n    \"bufio\"\n    . \"fmt\"\n    \"os\"\n)\n\nfunc main() {\n    in := bufio.NewReader(os.Stdin)\n    out := bufio.NewWriter(os.Stdout)\n    defer out.Flush()\n\n    var n, m int\n    Fscan(in, &amp;n, &amp;m)\n    items := make([][3]int, n)\n    for i := range items {\n        Fscan(in, &amp;items[i][0], &amp;items[i][1], &amp;items[i][2])\n    }\n\n    // \u6eda\u52a8\u6570\u7ec4\u4f18\u5316\n    cur := make([]int, m+1)\n    pre := make([]int, m+1)\n    // \u5355\u8c03\u9012\u51cf\u7d22\u5f15\u961f\u5217\n    q := make([]int, m+1)\n    for _, item := range items {\n        v, w, c := item[0], item[1], item[2]\n        if c == -1 || c == 1 { // 0-1 \u80cc\u5305\n            for j := m; j &gt;= v; j-- {\n                cur[j] = max(cur[j], cur[j-v]+w)\n            }\n        } else if cv := c * v; c == 0 || cv &gt;= m { // \u5b8c\u5168\u80cc\u5305\n            for j := v; j &lt;= m; j++ {\n                cur[j] = max(cur[j], cur[j-v]+w)\n            }\n        } else { // \u591a\u91cd\u80cc\u5305\uff0c\u4f7f\u7528\u5355\u8c03\u961f\u5217\u4f18\u5316\n            // \u6eda\u52a8\u6570\u7ec4\n            pre, cur = cur, pre\n            // \u679a\u4e3e\u4f59\u6570\n            for j := 0; j &lt; v; j++ {\n                head, tail := 0, -1\n                // \u679a\u4e3e\u4f59\u6570j\u7684\u65b9\u6848\uff1aj+v, j+2*v, j+3*v, ...\n                for k := j; k &lt;= m; k += v {\n                    // \u521d\u59cb\u5316\u4e3a\u4e0a\u6b21\u8ba1\u7b97\u7684\u7ed3\u679c\n                    cur[k] = pre[k]\n                    // \u5c06\u4e0d\u5728\u7a97\u53e3\u5185\u7684\u7d22\u5f15\u4ece\u961f\u9996\u51fa\u961f\n                    for ; head &lt;= tail &amp;&amp; k-q[head] &gt; cv; head++ {\n                    }\n                    // \u4f7f\u7528\u961f\u9996\u7684\u6700\u5927\u503c\u66f4\u65b0\u7ed3\u679c\n                    if head &lt;= tail {\n                        // \u4f7f\u7528k-q[head]\u7684\u5bb9\u91cf\u88c5\u5165\u5f53\u524d\u7269\u54c1\n                        cur[k] = max(cur[k], pre[q[head]]+(k-q[head])/v*w)\n                    }\n                    // \u5c06\u961f\u5c3e\u7684\u4ef7\u503c\u5c0f\u4e8e\u5f53\u524d\u65b9\u6848\u7684\u7d22\u5f15\u79fb\u9664\uff0c\u4fdd\u8bc1\u5355\u8c03\u9012\u51cf\n                    for ; head &lt;= tail &amp;&amp; pre[q[tail]]+(k-q[tail])/v*w &lt;= pre[k]; tail-- {\n                    }\n                    // \u5c06\u5f53\u524d\u65b9\u6848\u7684\u7d22\u5f15\u5165\u961f\u5c3e\n                    tail++\n                    q[tail] = k\n                }\n            }\n        }\n    }\n\n    Fprintln(out, cur[m])\n}\n\nfunc max(x, y int) int {\n    if x &gt; y {\n        return x\n    } else {\n        return y\n    }\n}\n</code></pre> <pre><code>import java.io.*;\nimport java.util.*;\n\npublic class Main {\n\n    static BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n    static PrintWriter out = new PrintWriter(System.out);\n\n    public static void main(String[] args) throws Exception {\n        StringTokenizer nm = new StringTokenizer(in.readLine());\n        int n = Integer.parseInt(nm.nextToken());\n        int m = Integer.parseInt(nm.nextToken());\n        int[][] items = new int[n][3];\n        for (int i = 0; i &lt; n; i++) {\n            StringTokenizer vwc = new StringTokenizer(in.readLine());\n            items[i][0] = Integer.parseInt(vwc.nextToken());\n            items[i][1] = Integer.parseInt(vwc.nextToken());\n            items[i][2] = Integer.parseInt(vwc.nextToken());\n        }\n\n        // \u6eda\u52a8\u6570\u7ec4\u4f18\u5316\n        int i = 1;\n        int[][] f = new int[2][m + 1];\n        // \u5355\u8c03\u9012\u51cf\u7d22\u5f15\u961f\u5217\n        int[] q = new int[m + 1];\n        for (int[] item : items) {\n            int v = item[0], w = item[1], c = item[2];\n            int cv = c * v;\n            if (c == -1 || c == 1) { // 0-1 \u80cc\u5305\n                int[] cur = f[i &amp; 1];\n                for (int j = m; j &gt;= v; j--) {\n                    cur[j] = Math.max(cur[j], cur[j - v] + w);\n                }\n            } else if (c == 0 || cv &gt;= m) { // \u5b8c\u5168\u80cc\u5305\n                int[] cur = f[i &amp; 1];\n                for (int j = v; j &lt;= m; j++) {\n                    cur[j] = Math.max(cur[j], cur[j - v] + w);\n                }\n            } else { // \u591a\u91cd\u80cc\u5305\uff0c\u4f7f\u7528\u5355\u8c03\u961f\u5217\u4f18\u5316\n                // \u6eda\u52a8\u6570\u7ec4\n                int[] cur = f[++i &amp; 1], pre = f[(i &amp; 1) ^ 1];\n                // \u679a\u4e3e\u4f59\u6570\n                for (int j = 0; j &lt; v; j++) {\n                    int head = 0, tail = -1;\n                    // \u679a\u4e3e\u4f59\u6570j\u7684\u65b9\u6848\uff1aj+v, j+2*v, j+3*v, ...\n                    for (int k = j; k &lt;= m; k += v) {\n                        // \u521d\u59cb\u5316\u4e3a\u4e0a\u6b21\u8ba1\u7b97\u7684\u7ed3\u679c\n                        cur[k] = pre[k];\n                        // \u5c06\u4e0d\u5728\u7a97\u53e3\u5185\u7684\u7d22\u5f15\u4ece\u961f\u9996\u51fa\u961f\n                        for (; head &lt;= tail &amp;&amp; k - q[head] &gt; cv; head++) {\n                        }\n                        // \u4f7f\u7528\u961f\u9996\u7684\u6700\u5927\u503c\u66f4\u65b0\u7ed3\u679c\n                        if (head &lt;= tail) {\n                            // \u4f7f\u7528k-q[head]\u7684\u5bb9\u91cf\u88c5\u5165\u5f53\u524d\u7269\u54c1\n                            cur[k] = Math.max(cur[k], pre[q[head]] + (k - q[head]) / v * w);\n                        }\n                        // \u5c06\u961f\u5c3e\u7684\u4ef7\u503c\u5c0f\u4e8e\u5f53\u524d\u65b9\u6848\u7684\u7d22\u5f15\u79fb\u9664\uff0c\u4fdd\u8bc1\u5355\u8c03\u9012\u51cf\n                        for (; head &lt;= tail &amp;&amp; pre[q[tail]] + (k - q[tail]) / v * w &lt;= pre[k]; tail--) {\n                        }\n                        // \u5c06\u5f53\u524d\u65b9\u6848\u7684\u7d22\u5f15\u5165\u961f\u5c3e\n                        q[++tail] = k;\n                    }\n                }\n            }\n        }\n\n        out.println(f[i &amp; 1][m]);\n        out.flush();\n        out.close();\n        in.close();\n    }\n}\n</code></pre>"},{"location":"dp/knapsack/#\u4e8c\u7ef4\u8d39\u7528\u80cc\u5305","title":"\u4e8c\u7ef4\u8d39\u7528\u80cc\u5305","text":""},{"location":"dp/knapsack/#t-acwing8-\u4e8c\u7ef4\u8d39\u7528\u80cc\u5305","title":"[T] AcWing8. \u4e8c\u7ef4\u8d39\u7528\u80cc\u5305","text":"\u95ee\u9898\u63cf\u8ff0 <p>\u7b2c\u4e00\u884c\u8f93\u5165 \\(N\\ \\ C\\ \\ M\\) \u4e09\u4e2a\u6574\u6570\uff0c\\(1\u2264N\u22641e3\\) \uff0c\\(1\u2264C,M\u22641e2\\) \u3002\u8868\u793a\u6709 \\(N\\) \u4ef6\u7269\u54c1\u548c\u4e00\u4e2a\u5bb9\u91cf\u4e3a \\(C\\) \u6700\u5927\u627f\u91cd\u4e3a \\(M\\) \u7684\u80cc\u5305\u3002 \u63a5\u4e0b\u6765 \\(N\\) \u884c\uff0c\u6bcf\u884c\u8f93\u5165 \\(v_i\\ \\ m_i\\ \\ w_i\\) \u4e09\u4e2a\u6574\u6570\uff0c\u8868\u793a\u7b2c \\(i\\) \u4ef6\u7269\u54c1\u7684\u4f53\u79ef\u662f \\(v_i\\) \uff0c\u91cd\u91cf\u662f \\(m_i\\) \uff0c\u4ef7\u503c\u662f \\(w_i\\) \uff0c\\(1\u2264v_i,m_i\u22641e2\\) \uff0c\\(1\u2264w_i\u22641e3\\) \u3002 \u6c42\u89e3\u5c06\u54ea\u4e9b\u7269\u54c1\u88c5\u5165\u80cc\u5305\uff0c\u53ef\u4f7f\u8fd9\u4e9b\u7269\u54c1\u7684\u603b\u4f53\u79ef\u4e0d\u8d85\u8fc7\u80cc\u5305\u5bb9\u91cf\uff0c\u603b\u91cd\u91cf\u4e0d\u8d85\u8fc7\u80cc\u5305\u6700\u5927\u627f\u91cd\uff0c\u4e14\u603b\u4ef7\u503c\u6700\u5927\u3002\u8f93\u51fa\u6700\u5927\u603b\u4ef7\u503c\u3002</p> <p>\u5728 AcWing \u67e5\u770b\u8be5\u9898\u3002</p> \u89e3\u9898\u601d\u8def <p>\u5728 0-1 \u80cc\u5305\u7684\u57fa\u7840\u4e0a\u589e\u52a0\u4e00\u4e2a\u8d39\u7528\u7ef4\u5ea6\u5373\u53ef\u3002</p> GoJava <pre><code>package main\n\nimport (\n    \"bufio\"\n    . \"fmt\"\n    \"os\"\n)\n\nfunc main() {\n    in := bufio.NewReader(os.Stdin)\n    out := bufio.NewWriter(os.Stdout)\n    defer out.Flush()\n\n    var N, C, M int\n    Fscan(in, &amp;N, &amp;C, &amp;M)\n    items := make([][3]int, N)\n    for i := range items {\n        Fscan(in, &amp;items[i][0], &amp;items[i][1], &amp;items[i][2])\n    }\n\n    dp := make([][]int, C+1)\n    for i := range dp {\n        dp[i] = make([]int, M+1)\n    }\n    for _, item := range items { // \u679a\u4e3e\u7269\u54c1\n        v, m, w := item[0], item[1], item[2]\n        for i := C; i &gt;= v; i-- { // \u679a\u4e3e\u7b2c\u4e00\u7ef4\u5ea6\u8d39\u7528\n            for j := M; j &gt;= m; j-- { // \u679a\u4e3e\u7b2c\u4e8c\u7ef4\u5ea6\u8d39\u7528\n                dp[i][j] = max(dp[i][j], dp[i-v][j-m]+w)\n            }\n        }\n    }\n    Fprintln(out, dp[C][M])\n}\n\nfunc max(x, y int) int {\n    if x &gt; y {\n        return x\n    } else {\n        return y\n    }\n}\n</code></pre> <pre><code>import java.io.*;\nimport java.util.*;\n\npublic class Main {\n\n    static BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n    static PrintWriter out = new PrintWriter(System.out);\n\n    public static void main(String[] args) throws Exception {\n        StringTokenizer ncm = new StringTokenizer(in.readLine());\n        int N = Integer.parseInt(ncm.nextToken());\n        int C = Integer.parseInt(ncm.nextToken());\n        int M = Integer.parseInt(ncm.nextToken());\n        int[][] items = new int[N][3];\n        for (int i = 0; i &lt; N; i++) {\n            StringTokenizer vmw = new StringTokenizer(in.readLine());\n            items[i][0] = Integer.parseInt(vmw.nextToken());\n            items[i][1] = Integer.parseInt(vmw.nextToken());\n            items[i][2] = Integer.parseInt(vmw.nextToken());\n        }\n\n        int[][] dp = new int[C + 1][M + 1];\n        for (int[] item : items) { // \u679a\u4e3e\u7269\u54c1\n            int v = item[0], m = item[1], w = item[2];\n            for (int i = C; i &gt;= v; i--) { // \u679a\u4e3e\u7b2c\u4e00\u7ef4\u5ea6\u8d39\u7528\n                for (int j = M; j &gt;= m; j--) { // \u679a\u4e3e\u7b2c\u4e8c\u7ef4\u5ea6\u8d39\u7528\n                    dp[i][j] = Math.max(dp[i][j], dp[i - v][j - m] + w);\n                }\n            }\n        }\n        out.println(dp[C][M]);\n        out.flush();\n        out.close();\n        in.close();\n    }\n}\n</code></pre>"},{"location":"dp/knapsack/#\u5206\u7ec4\u80cc\u5305","title":"\u5206\u7ec4\u80cc\u5305","text":""},{"location":"dp/knapsack/#t-acwing9-\u5206\u7ec4\u80cc\u5305","title":"[T] AcWing9. \u5206\u7ec4\u80cc\u5305","text":"\u95ee\u9898\u63cf\u8ff0 <p>\u7b2c\u4e00\u884c\u8f93\u5165 \\(n\\) \u548c \\(m\\) \u4e24\u4e2a\u6574\u6570\uff0c\\(1\u2264n,m\u22641e2\\) \u3002\u8868\u793a\u6709 \\(N\\) \u7ec4\u7269\u54c1\u548c\u4e00\u4e2a\u5bb9\u91cf\u4e3a \\(m\\) \u7684\u80cc\u5305\u3002 \u63a5\u4e0b\u6765\u8f93\u5165 \\(n\\) \u7ec4\u7269\u54c1\u7684\u6570\u636e\uff1a</p> <ul> <li>\u6bcf\u7ec4\u6570\u636e\u7b2c\u4e00\u884c\u8f93\u5165\u4e00\u4e2a\u6574\u6570 \\(c_i(1\u2264c_i\u22641e2)\\) \uff0c\u8868\u793a\u7b2c \\(i\\) \u7ec4\u6709 \\(c_i\\) \u4ef6\u7269\u54c1\uff1b</li> <li>\u63a5\u4e0b\u6765 \\(c_i\\) \u884c\uff0c\u6bcf\u884c\u8f93\u5165 \\(v_{ij}\\) \u548c \\(w_{ij}\\) \u4e24\u4e2a\u6574\u6570\uff0c\u8868\u793a\u7b2c \\(i\\) \u7ec4\u7b2c \\(j\\) \u4ef6\u7269\u54c1\u7684\u4f53\u79ef\u662f \\(v_{ij}\\) \uff0c\u4ef7\u503c\u662f \\(w_{ij}\\) \uff0c\\(1\u2264v_{ij},w_{ij}\u22641e2\\) \u3002</li> </ul> <p>\u6bcf\u7ec4\u7269\u54c1\u6709\u82e5\u5e72\u4ef6\uff0c\u540c\u4e00\u7ec4\u5185\u7684\u7269\u54c1\u6700\u591a\u53ea\u80fd\u9009\u4e00\u4ef6\u3002 \u6c42\u89e3\u5c06\u54ea\u4e9b\u7269\u54c1\u88c5\u5165\u80cc\u5305\uff0c\u53ef\u4f7f\u8fd9\u4e9b\u7269\u54c1\u7684\u603b\u4f53\u79ef\u4e0d\u8d85\u8fc7\u80cc\u5305\u5bb9\u91cf\uff0c\u4e14\u603b\u4ef7\u503c\u6700\u5927\u3002\u8f93\u51fa\u6700\u5927\u603b\u4ef7\u503c\u3002</p> <p>\u5728 AcWing \u67e5\u770b\u8be5\u9898\u3002</p> \u89e3\u9898\u601d\u8def <p>\u548c 0-1 \u80cc\u5305\u7c7b\u4f3c\uff0c\u5bf9\u6bcf\u4e00\u7ec4\u8fdb\u884c\u4e00\u6b21 0-1 \u80cc\u5305\u5373\u53ef\u3002</p> GoJava <pre><code>package main\n\nimport (\n    \"bufio\"\n    . \"fmt\"\n    \"os\"\n)\n\nfunc main() {\n    in := bufio.NewReader(os.Stdin)\n    out := bufio.NewWriter(os.Stdout)\n    defer out.Flush()\n\n    var n, m, c int\n    Fscan(in, &amp;n, &amp;m)\n    dp := make([]int, m+1)\n    for ; n &gt; 0; n-- { // \u679a\u4e3e\u5206\u7ec4\n        Fscan(in, &amp;c)\n        lower := 100\n        items := make([][2]int, c)\n        for i := range items {\n            Fscan(in, &amp;items[i][0], &amp;items[i][1])\n            lower = min(lower, items[i][0])\n        }\n        for i := m; i &gt;= lower; i-- { // \u679a\u4e3e\u80cc\u5305\u5bb9\u91cf\n            for _, item := range items { // \u679a\u4e3e\u5206\u7ec4\u5185\u7684\u6bcf\u4e00\u4ef6\u7269\u54c1\n                if v, w := item[0], item[1]; i &gt;= v {\n                    dp[i] = max(dp[i], dp[i-v]+w)\n                }\n            }\n        }\n    }\n    Fprintln(out, dp[m])\n}\n\nfunc min(x, y int) int {\n    if x &lt; y {\n        return x\n    } else {\n        return y\n    }\n}\n\nfunc max(x, y int) int {\n    if x &gt; y {\n        return x\n    } else {\n        return y\n    }\n}\n</code></pre> <pre><code>import java.io.*;\nimport java.util.*;\n\npublic class Main {\n\n    static BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n    static PrintWriter out = new PrintWriter(System.out);\n\n    public static void main(String[] args) throws Exception {\n        StringTokenizer nm = new StringTokenizer(in.readLine());\n        int n = Integer.parseInt(nm.nextToken());\n        int m = Integer.parseInt(nm.nextToken());\n        int[] dp = new int[m + 1];\n        for (; n &gt; 0; n--) { // \u679a\u4e3e\u5206\u7ec4\n            int c = Integer.parseInt(in.readLine());\n            int lower = 100;\n            int[][] items = new int[c][2];\n            for (int i = 0; i &lt; c; i++) {\n                StringTokenizer vw = new StringTokenizer(in.readLine());\n                items[i][0] = Integer.parseInt(vw.nextToken());\n                items[i][1] = Integer.parseInt(vw.nextToken());\n                lower = Math.min(lower, items[i][0]);\n            }\n            for (int i = m; i &gt;= lower; i--) { // \u679a\u4e3e\u80cc\u5305\u5bb9\u91cf\n                for (int[] item : items) { // \u679a\u4e3e\u5206\u7ec4\u5185\u7684\u6bcf\u4e00\u4ef6\u7269\u54c1\n                    int v = item[0], w = item[1];\n                    if (i &gt;= v) {\n                        dp[i] = Math.max(dp[i], dp[i - v] + w);\n                    }\n                }\n            }\n        }\n        out.println(dp[m]);\n        out.flush();\n        out.close();\n        in.close();\n    }\n}\n</code></pre>"},{"location":"dp/knapsack/#cf148e-porcelain","title":"CF148E. Porcelain","text":"\u95ee\u9898\u63cf\u8ff0 <p>\u7b2c\u4e00\u884c\u8f93\u5165 \\(n(1\u2264n\u2264100)\\) \u548c \\(m(1\u2264m\u22641e4)\\) \uff0c\u63a5\u4e0b\u6765 \\(n\\) \u884c\u8f93\u5165 \\(n\\) \u4e2a\u53cc\u7aef\u961f\u5217\uff08dq\uff09\u3002 \u5bf9\u4e8e\u6bcf\u4e2a dq\uff0c\u5148\u8f93\u5165 \\(k(1\u2264k\u2264100)\\) \u8868\u793a dq \u7684\u5927\u5c0f\uff0c\u6240\u6709 \\(k\\) \u4e4b\u548c \\(\u2265m\\)\u3002 \u7136\u540e\u8f93\u5165 dq \u4e2d\u7684 \\(k\\) \u4e2a\u6570\uff0c\u8303\u56f4\u5728 \\([1,100]\\)\u3002 \u4f60\u9700\u8981\u4ece\u8fd9 \\(n\\) \u4e2a dq \u4e2d\u53d6\u51fa \\(m\\) \u4e2a\u6570\uff0c\u8f93\u51fa\u8fd9 \\(m\\) \u4e2a\u6570\u7684\u548c\u7684\u6700\u5927\u503c\u3002</p> <p>\u5728 Codeforces \u6216 \u6d1b\u8c37 \u67e5\u770b\u8be5\u9898\u3002</p> \u89e3\u9898\u601d\u8def <p>\u5b9a\u4e49 \\(groups[i][j]\\) \u8868\u793a\u4ece\u7b2c \\(i\\) \u4e2a dq \u4e2d\u53d6\u51fa \\(j+1\\) \u4e2a\u6570\u7684\u6700\u5927\u548c\u3002 \u9884\u5904\u7406\u6bcf\u4e00\u4e2a dq \uff0c\u679a\u4e3e\u5728\u961f\u5934\u53d6\u51fa\u7684\u6570\u5b57\u4e2a\u6570\uff0c\u901a\u8fc7\u524d\u7f00\u548c\u8ba1\u7b97\u5f97\u5230 \\(groups[i][j]\\) \u3002 \u9884\u5904\u7406\u5f97\u5230 \\(groups[i][j]\\) \u540e\uff0c\u95ee\u9898\u8f6c\u5316\u4e3a\u80cc\u5305\u5bb9\u91cf\u4e3a \\(m\\) \u7684\u5206\u7ec4\u80cc\u5305\u95ee\u9898\u3002</p> GoJava <pre><code>package main\n\nimport (\n    \"bufio\"\n    . \"fmt\"\n    \"os\"\n)\n\nfunc main() {\n    in := bufio.NewReader(os.Stdin)\n    out := bufio.NewWriter(os.Stdout)\n    defer out.Flush()\n\n    var n, m int\n    Fscan(in, &amp;n, &amp;m)\n    // groups[i][j]\u8868\u793a\u4ece\u7b2ci\u4e2adq\u4e2d\u53d6\u51faj+1\u4e2a\u6570\u7684\u6700\u5927\u548c\n    groups := make([][]int, n)\n    for i := 0; i &lt; n; i++ {\n        var k, x int\n        Fscan(in, &amp;k)\n        s := make([]int, k+1) // \u524d\u7f00\u548c\n        for j := 0; j &lt; k; j++ {\n            Fscan(in, &amp;x)\n            s[j+1] = s[j] + x\n        }\n        groups[i] = make([]int, k)\n        groups[i][k-1] = s[k]\n        for j := 1; j &lt; k; j++ {\n            for l := 0; l &lt;= j; l++ { // \u5728dq\u5934\u90e8\u53d6l\u4e2a\u6570\uff0c\u5c3e\u90e8\u53d6j-l\u4e2a\u6570\n                groups[i][j-1] = max(groups[i][j-1], s[l]+s[k]-s[k-(j-l)])\n            }\n        }\n    }\n\n    t := 0\n    dp := make([]int, m+1)\n    for _, group := range groups { // \u679a\u4e3e\u5206\u7ec4\n        k := len(group)\n        t += k\n        for i := min(t, m); i &gt; 0; i-- { // \u679a\u4e3e\u80cc\u5305\u5bb9\u91cf\n            for j := 0; j &lt; k &amp;&amp; j &lt; i; j++ { // \u679a\u4e3e\u5206\u7ec4\u5185\u7684\u6bcf\u4e00\u4ef6\u7269\u54c1\n                // \u4f7f\u7528j+1\u7684\u5bb9\u91cf\u5bb9\u7eb3group[j]\n                dp[i] = max(dp[i], dp[i-1-j]+group[j])\n            }\n        }\n    }\n    Fprintln(out, dp[m])\n}\n\nfunc min(x, y int) int {\n    if x &lt; y {\n        return x\n    } else {\n        return y\n    }\n}\n\nfunc max(x, y int) int {\n    if x &gt; y {\n        return x\n    } else {\n        return y\n    }\n}\n</code></pre> <pre><code>import java.io.*;\nimport java.util.*;\n\npublic class Main {\n\n    static BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n\n    public static void main(String[] args) throws Exception {\n        StringTokenizer nm = new StringTokenizer(in.readLine());\n        int n = Integer.parseInt(nm.nextToken());\n        int m = Integer.parseInt(nm.nextToken());\n        // groups[i][j]\u8868\u793a\u4ece\u7b2ci\u4e2adq\u4e2d\u53d6\u51faj+1\u4e2a\u6570\u7684\u6700\u5927\u548c\n        int[][] groups = new int[n][];\n        for (int i = 0; i &lt; n; i++) {\n            StringTokenizer tokenizer = new StringTokenizer(in.readLine());\n            int k = Integer.parseInt(tokenizer.nextToken());\n            int[] s = new int[k + 1]; // \u524d\u7f00\u548c\n            for (int j = 0; j &lt; k; j++) {\n                s[j + 1] = s[j] + Integer.parseInt(tokenizer.nextToken());\n            }\n            groups[i] = new int[k];\n            groups[i][k - 1] = s[k];\n            for (int j = 1; j &lt; k; j++) {\n                for (int l = 0; l &lt;= j; l++) { // \u5728dq\u5934\u90e8\u53d6l\u4e2a\u6570\uff0c\u5c3e\u90e8\u53d6j-l\u4e2a\u6570\n                    groups[i][j - 1] = Math.max(groups[i][j - 1], s[l] + s[k] - s[k - (j - l)]);\n                }\n            }\n        }\n\n        int t = 0;\n        int[] dp = new int[m + 1];\n        for (int[] group : groups) { // \u679a\u4e3e\u5206\u7ec4\n            int k = group.length;\n            t += k;\n            for (int i = Math.min(t, m); i &gt; 0; i--) { // \u679a\u4e3e\u80cc\u5305\u5bb9\u91cf\n                for (int j = 0; j &lt; k &amp;&amp; j &lt; i; j++) { // \u679a\u4e3e\u5206\u7ec4\u5185\u7684\u6bcf\u4e00\u4ef6\u7269\u54c1\n                    // \u4f7f\u7528j+1\u7684\u5bb9\u91cf\u5bb9\u7eb3group[j]\n                    dp[i] = Math.max(dp[i], dp[i - 1 - j] + group[j]);\n                }\n            }\n        }\n        System.out.println(dp[m]);\n        in.close();\n    }\n}\n</code></pre>"},{"location":"dp/knapsack/#\u6709\u4f9d\u8d56\u7684\u80cc\u5305","title":"\u6709\u4f9d\u8d56\u7684\u80cc\u5305","text":""},{"location":"dp/knapsack/#t-acwing10-\u6709\u4f9d\u8d56\u7684\u80cc\u5305","title":"[T] AcWing10. \u6709\u4f9d\u8d56\u7684\u80cc\u5305","text":"\u95ee\u9898\u63cf\u8ff0 <p>\u7b2c\u4e00\u884c\u8f93\u5165 \\(n\\) \u548c \\(m\\) \u4e24\u4e2a\u6574\u6570\uff0c\\(1\u2264n,m\u22641e2\\) \u3002\u8868\u793a\u6709\u7f16\u53f7\u4e3a \\(1\\dots n\\) \u7684 \\(n\\) \u4ef6\u7269\u54c1\u548c\u4e00\u4e2a\u5bb9\u91cf\u4e3a \\(m\\) \u7684\u80cc\u5305\u3002 \u7269\u54c1\u4e4b\u95f4\u5b58\u5728\u4f9d\u8d56\u5173\u7cfb\uff0c\u6240\u6709\u7269\u54c1\u7684\u4f9d\u8d56\u5173\u7cfb\u5f62\u6210\u4e00\u68f5\u6811\u3002\u5982\u679c\u9009\u62e9\u67d0\u4ef6\u7269\u54c1\uff0c\u5219\u5fc5\u987b\u540c\u65f6\u9009\u62e9\u5b83\u7684\u7236\u8282\u70b9\u3002 \u63a5\u4e0b\u6765 \\(n\\) \u884c\uff0c\u6bcf\u884c\u8f93\u5165 \\(v_i\\ \\ w_i\\ \\ p_i\\) \u4e09\u4e2a\u6574\u6570\uff0c\u8868\u793a\u7f16\u53f7\u4e3a \\(i\\) \u7684\u7269\u54c1\u7684\u4f53\u79ef\u662f \\(v_i\\) \uff0c\u4ef7\u503c\u662f \\(w_i\\) \uff0c\\(1\u2264v_i,w_i\u22641e2\\) \uff0c\u4f9d\u8d56\u7f16\u53f7\u4e3a \\(p_i\\) \u7684\u7269\u54c1\uff0c\\(p_i = -1\\) \u8868\u793a\u8be5\u7269\u54c1\u4e3a\u6839\u8282\u70b9\u3002 \u6c42\u89e3\u5c06\u54ea\u4e9b\u7269\u54c1\u88c5\u5165\u80cc\u5305\uff0c\u53ef\u4f7f\u8fd9\u4e9b\u7269\u54c1\u7684\u603b\u4f53\u79ef\u4e0d\u8d85\u8fc7\u80cc\u5305\u5bb9\u91cf\uff0c\u4e14\u603b\u4ef7\u503c\u6700\u5927\u3002\u8f93\u51fa\u6700\u5927\u603b\u4ef7\u503c\u3002</p> <p>\u5728 AcWing \u67e5\u770b\u8be5\u9898\u3002</p> \u89e3\u9898\u601d\u8def <p>\u6811\u5f62 DP</p> GoJava <pre><code>package main\n\nimport (\n    \"bufio\"\n    . \"fmt\"\n    \"os\"\n)\n\nfunc main() {\n    in := bufio.NewReader(os.Stdin)\n    out := bufio.NewWriter(os.Stdout)\n    defer out.Flush()\n\n    var n, m, p, root int\n    Fscan(in, &amp;n, &amp;m)\n    og := make([][]int, n+1)\n    items := make([][2]int, n+1)\n    for i := 1; i &lt;= n; i++ {\n        Fscan(in, &amp;items[i][0], &amp;items[i][1], &amp;p)\n        if p == -1 {\n            root = i\n        } else {\n            og[p] = append(og[p], i)\n        }\n    }\n\n    // dp[x][i]\u8868\u793a\u9009\u62e9\u4ee5x\u4e3a\u6839\u7684\u5b50\u6811\u4e2d\u7684\u7269\u54c1\uff0c\u4e14\u5bb9\u91cf\u4e0d\u8d85\u8fc7i\u65f6\u80fd\u83b7\u5f97\u7684\u6700\u5927\u4ef7\u503c\n    dp := make([][]int, n+1)\n    var dfs func(x int)\n    dfs = func(x int) {\n        v, w := items[x][0], items[x][1]\n        dp[x] = make([]int, m+1)\n        for i := v; i &lt;= m; i++ {\n            dp[x][i] = w // \u7269\u54c1x\u5fc5\u987b\u9009\uff0c\u521d\u59cb\u5316\u4e3a\u7269\u54c1x\u7684\u4ef7\u503c\n        }\n        for _, y := range og[x] {\n            dfs(y)                    // \u5148\u8ba1\u7b97\u5b50\u6811y\n            for i := m; i &gt;= v; i-- { // \u679a\u4e3e\u80cc\u5305\u5bb9\u91cf\n                for j := 0; j &lt;= i-v; j++ { // \u679a\u4e3e\u7559\u7ed9\u5b50\u6811y\u7684\u80cc\u5305\u5bb9\u91cf\n                    dp[x][i] = max(dp[x][i], dp[x][i-j]+dp[y][j])\n                }\n            }\n        }\n    }\n    dfs(root)\n\n    Fprintln(out, dp[root][m])\n}\n\nfunc max(x, y int) int {\n    if x &gt; y {\n        return x\n    } else {\n        return y\n    }\n}\n</code></pre> <pre><code>import java.io.*;\nimport java.util.*;\n\npublic class Main {\n\n    static BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n    static PrintWriter out = new PrintWriter(System.out);\n\n    static int n, m, root;\n    static List&lt;Integer&gt;[] og;\n    static int[][] items;\n    // dp[x][i]\u8868\u793a\u9009\u62e9\u4ee5x\u4e3a\u6839\u7684\u5b50\u6811\u4e2d\u7684\u7269\u54c1\uff0c\u4e14\u5bb9\u91cf\u4e0d\u8d85\u8fc7i\u65f6\u80fd\u83b7\u5f97\u7684\u6700\u5927\u4ef7\u503c\n    static int[][] dp;\n\n    public static void dfs(int x) {\n        int v = items[x][0], w = items[x][1];\n        for (int i = v; i &lt;= m; i++) {\n            dp[x][i] = w; // \u7269\u54c1x\u5fc5\u987b\u9009\uff0c\u521d\u59cb\u5316\u4e3a\u7269\u54c1x\u7684\u4ef7\u503c\n        }\n        for (int y : og[x]) {\n            dfs(y); // \u5148\u8ba1\u7b97\u5b50\u6811y\n            for (int i = m; i &gt;= v; i--) { // \u679a\u4e3e\u80cc\u5305\u5bb9\u91cf\n                for (int j = 0; j &lt;= i - v; j++) { // \u679a\u4e3e\u7559\u7ed9\u5b50\u6811y\u7684\u80cc\u5305\u5bb9\u91cf\n                    dp[x][i] = Math.max(dp[x][i], dp[x][i - j] + dp[y][j]);\n                }\n            }\n        }\n    }\n\n    public static void main(String[] args) throws Exception {\n        StringTokenizer nm = new StringTokenizer(in.readLine());\n        n = Integer.parseInt(nm.nextToken());\n        m = Integer.parseInt(nm.nextToken());\n        og = new List[n + 1];\n        for (int i = 1; i &lt;= n; i++) {\n            og[i] = new ArrayList&lt;&gt;();\n        }\n        items = new int[n + 1][2];\n        for (int i = 1; i &lt;= n; i++) {\n            StringTokenizer vwp = new StringTokenizer(in.readLine());\n            items[i][0] = Integer.parseInt(vwp.nextToken());\n            items[i][1] = Integer.parseInt(vwp.nextToken());\n            int p = Integer.parseInt(vwp.nextToken());\n            if (p == -1) {\n                root = i;\n            } else {\n                og[p].add(i);\n            }\n        }\n        dp = new int[n + 1][m + 1];\n        dfs(root);\n        out.println(dp[root][m]);\n        out.flush();\n        out.close();\n        in.close();\n    }\n}\n</code></pre>"},{"location":"dp/knapsack/#lg2014-ctsc1997-\u9009\u8bfe","title":"LG2014. [CTSC1997] \u9009\u8bfe","text":"\u95ee\u9898\u63cf\u8ff0 <p>\u7b2c\u4e00\u884c\u8f93\u5165 \\(n(1\u2264n\u2264300)\\) \u548c \\(m(1\u2264m\u2264300)\\) \u4e24\u4e2a\u6574\u6570\u3002\u8868\u793a\u9700\u8981\u4ece \\(n\\) \u95e8\u8bfe\u7a0b\u91cc\u9009\u62e9 \\(m\\) \u95e8\u8bfe\u7a0b\u5b66\u4e60\u3002 \u63a5\u4e0b\u6765 \\(n\\) \u884c\uff0c\u6bcf\u884c\u8f93\u5165 \\(k_i\\ \\ s_i\\) \u4e24\u4e2a\u6574\u6570\uff0c\u8868\u793a\u7b2c \\(i(1\u2264i\u2264n)\\) \u95e8\u8bfe\u7a0b\u7684\u5b66\u5206\u4e3a \\(s_i(1\u2264s_i\u226420)\\) \u3002\u5982\u679c \\(k_i = 0\\) \uff0c\u8be5\u8bfe\u7a0b\u53ef\u4ee5\u76f4\u63a5\u5b66\u4e60\uff1b\u5426\u5219\uff0c\u5b66\u4e60\u8be5\u8bfe\u7a0b\u524d\u5fc5\u987b\u5148\u5b66\u4e60\u7b2c \\(k_i(1\u2264k_i\u2264n)\\) \u95e8\u8bfe\u7a0b\u3002 \u6c42\u89e3\u9009\u62e9\u54ea\u4e9b\u8bfe\u7a0b\u5b66\u4e60\uff0c\u80fd\u83b7\u5f97\u7684\u5b66\u5206\u6700\u5927\u3002\u8f93\u51fa\u6700\u5927\u5b66\u5206\u3002</p> <p>\u5728 \u6d1b\u8c37 \u67e5\u770b\u8be5\u9898\u3002</p> \u89e3\u9898\u601d\u8def <p>\u6811\u5f62 DP</p> GoJava <pre><code>package main\n\nimport (\n    \"bufio\"\n    . \"fmt\"\n    \"os\"\n)\n\nfunc main() {\n    in := bufio.NewReader(os.Stdin)\n\n    var n, m, k int\n    Fscan(in, &amp;n, &amp;m)\n\n    // \u6240\u6709\u8bfe\u7a0b\u7684\u4f9d\u8d56\u5173\u7cfb\u7ec4\u6210\u68ee\u6797\u7ed3\u6784\n    // \u65b0\u589e\u4e00\u95e8\u7f16\u53f7\u4e3a0\u4e14\u5b66\u5206\u4e3a0\u7684\u8bfe\u7a0b\u4f5c\u4e3a\u6839\u8282\u70b9\uff0c\u5c06\u4f9d\u8d56\u5173\u7cfb\u8f6c\u4e3a\u4e00\u68f5\u6811\n    // \u4ece\u7f16\u53f7\u4ece0\u5f00\u59cb\u7684 n+1 \u95e8\u8bfe\u7a0b\u4e2d\u9009\u62e9 m+1 \u95e8\u8bfe\u7a0b\n    n++\n    m++\n\n    s := make([]int, n)\n    og := make([][]int, n)\n    for i := 1; i &lt; n; i++ {\n        Fscan(in, &amp;k, &amp;s[i])\n        og[k] = append(og[k], i)\n    }\n\n    // dp[x][i]\u8868\u793a\u9009\u62e9\u4ee5x\u4e3a\u6839\u7684\u5b50\u6811\u4e2d\u7684i\u95e8\u8bfe\u7a0b\u6240\u80fd\u83b7\u5f97\u7684\u6700\u5927\u5b66\u5206\n    dp := make([][]int, n)\n    var dfs func(x int) int\n    dfs = func(x int) int {\n        cx := 1\n        dp[x] = make([]int, m+1)\n        dp[x][1] = s[x] // \u4ec5\u9009\u62e9\u8bfe\u7a0bx\n        for _, y := range og[x] {\n            cy := dfs(y)\n            for i := min(m, cx); i != 0; i-- { // \u4ece\u5df2\u5408\u5e76\u8fc7\u7684\u5b50\u6811\u4e2d\u9009\u62e9i\u95e8\u8bfe\u7a0b\n                for j := 1; j &lt;= cy &amp;&amp; i+j &lt;= m; j++ { // \u4ece\u5b50\u6811y\u4e2d\u9009\u62e9j\u95e8\u8bfe\u7a0b\n                    dp[x][i+j] = max(dp[x][i+j], dp[x][i]+dp[y][j])\n                }\n            }\n            cx += cy\n        }\n        return cx\n    }\n    dfs(0)\n\n    Println(dp[0][min(n, m)])\n}\n\nfunc min(x, y int) int {\n    if x &lt; y {\n        return x\n    } else {\n        return y\n    }\n}\n\nfunc max(x, y int) int {\n    if x &gt; y {\n        return x\n    } else {\n        return y\n    }\n}\n</code></pre> <pre><code>import java.io.*;\nimport java.util.*;\n\npublic class Main {\n\n    static BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n    static PrintWriter out = new PrintWriter(System.out);\n\n    public static void main(String[] args) throws Exception {\n        // \u6240\u6709\u8bfe\u7a0b\u7684\u4f9d\u8d56\u5173\u7cfb\u7ec4\u6210\u68ee\u6797\u7ed3\u6784\n        // \u65b0\u589e\u4e00\u95e8\u7f16\u53f7\u4e3a0\u4e14\u5b66\u5206\u4e3a0\u7684\u8bfe\u7a0b\u4f5c\u4e3a\u6839\u8282\u70b9\uff0c\u5c06\u4f9d\u8d56\u5173\u7cfb\u8f6c\u4e3a\u4e00\u68f5\u6811\n        // \u4ece\u7f16\u53f7\u4ece0\u5f00\u59cb\u7684 n+1 \u95e8\u8bfe\u7a0b\u4e2d\u9009\u62e9 m+1 \u95e8\u8bfe\u7a0b\n        StringTokenizer nm = new StringTokenizer(in.readLine());\n        n = Integer.parseInt(nm.nextToken()) + 1;\n        m = Integer.parseInt(nm.nextToken()) + 1;\n\n        s = new int[n];\n        og = new List[n];\n        for (int i = 0; i &lt; n; i++) {\n            og[i] = new ArrayList&lt;Integer&gt;();\n        }\n        for (int i = 1; i &lt; n; i++) {\n            StringTokenizer t = new StringTokenizer(in.readLine());\n            int k = Integer.parseInt(t.nextToken());\n            s[i] = Integer.parseInt(t.nextToken());\n            og[k].add(i);\n        }\n\n        // dp[x][i]\u8868\u793a\u9009\u62e9\u4ee5x\u4e3a\u6839\u7684\u5b50\u6811\u4e2d\u7684i\u95e8\u8bfe\u7a0b\u6240\u80fd\u83b7\u5f97\u7684\u6700\u5927\u5b66\u5206\n        dp = new int[n][m + 1];\n        dfs(0);\n        out.println(dp[0][Math.min(n, m)]);\n        out.flush();\n        out.close();\n        in.close();\n    }\n\n    static int n, m;\n    static int[] s;\n    static List&lt;Integer&gt;[] og;\n    static int[][] dp;\n\n    public static int dfs(int x) {\n        int cx = 1;\n        dp[x][1] = s[x]; // \u4ec5\u9009\u62e9\u8bfe\u7a0bx\n        for (int y : og[x]) {\n            int cy = dfs(y);\n            for (int i = Math.min(cx, m); i != 0; i--) { // \u4ece\u5df2\u5408\u5e76\u8fc7\u7684\u5b50\u6811\u4e2d\u9009\u62e9i\u95e8\u8bfe\u7a0b\n                for (int j = 1; j &lt;= cy &amp;&amp; i + j &lt;= m; j++) { // \u4ece\u5b50\u6811y\u4e2d\u9009\u62e9j\u95e8\u8bfe\u7a0b\n                    dp[x][i + j] = Math.max(dp[x][i + j], dp[x][i] + dp[y][j]);\n                }\n            }\n            cx += cy;\n        }\n        return cx;\n    }\n}\n</code></pre>"},{"location":"dp/knapsack/#lg1064-\u91d1\u660e\u7684\u9884\u7b97\u65b9\u6848","title":"LG1064. \u91d1\u660e\u7684\u9884\u7b97\u65b9\u6848","text":"\u95ee\u9898\u63cf\u8ff0 <p>\u7b2c\u4e00\u884c\u8f93\u5165 \\(n(1\u2264n\u22643.2e4)\\) \u548c \\(m(1\u2264m\u226460)\\) \u4e24\u4e2a\u6574\u6570\u3002\u8868\u793a\u6709 \\(n\\) \u5143\u94b1\uff0c\u60f3\u8981\u4e70 \\(m\\) \u4e2a\u7269\u54c1\u3002 \u63a5\u4e0b\u6765 \\(m\\) \u884c\uff0c\u6bcf\u884c\u8f93\u5165 \\(v_i\\ \\ p_i\\ \\ q_i\\) \u4e09\u4e2a\u6574\u6570\uff0c\u8868\u793a\u7b2c \\(i(1\u2264i\u2264m)\\) \u4e2a\u7269\u54c1\u7684\u4ef7\u683c\u4e3a \\(v_i(1\u2264v_i\u22641e4)\\) \uff0c\u91cd\u8981\u5ea6\u4e3a \\(p_i(1\u2264p_i\u22645)\\) \uff0c\\(v_i\\) \u662f \\(10\\) \u7684\u6574\u6570\u500d\u3002\u5982\u679c \\(q_i = 0\\) \uff0c\u8868\u793a\u8be5\u7269\u54c1\u662f\u4e3b\u4ef6\uff1b\u5426\u5219\uff0c\u8868\u793a\u8be5\u7269\u54c1\u662f\u7b2c \\(q_i\\) \u4e2a\u7269\u54c1\uff08\u4e3b\u4ef6\uff09\u7684\u9644\u4ef6\u3002 \u4e3b\u4ef6\u53ef\u4ee5\u5355\u72ec\u8d2d\u4e70\uff0c\u8d2d\u4e70\u9644\u4ef6\u5219\u5fc5\u987b\u540c\u65f6\u8d2d\u4e70\u5b83\u7684\u4e3b\u4ef6\uff0c\u6bcf\u4e2a\u4e3b\u4ef6\u6700\u591a\u6709 \\(2\\) \u4e2a\u9644\u4ef6\u3002 \u6c42\u89e3\u8d2d\u4e70\u54ea\u4e9b\u7269\u54c1\uff0c\u53ef\u4f7f\u8fd9\u4e9b\u7269\u54c1\u7684 \\(v_i \\times p_i\\) \u4e4b\u548c\u6700\u5927\u3002\u8f93\u51fa\u6700\u5927\u548c\u3002\u9898\u76ee\u4fdd\u8bc1\u7b54\u6848 \\(\u22642e5\\) \u3002</p> <p>\u5728 \u6d1b\u8c37 \u67e5\u770b\u8be5\u9898\u3002</p> \u89e3\u9898\u601d\u8def <p>\u5c06\u4e3b\u4ef6\u4e0e\u5176\u9644\u4ef6\u7684\u6240\u6709\u7ec4\u5408\u5f53\u505a\u4e00\u4e2a\u5206\u7ec4\uff0c\u8f6c\u5316\u4e3a\u5206\u7ec4\u80cc\u5305\u3002</p> GoJava <pre><code>package main\n\nimport (\n    \"bufio\"\n    . \"fmt\"\n    \"os\"\n)\n\nfunc main() {\n    in := bufio.NewReader(os.Stdin)\n    out := bufio.NewWriter(os.Stdout)\n    defer out.Flush()\n\n    var n, m int\n    Fscan(in, &amp;n, &amp;m)\n    n /= 10\n    items := make([][3]int, m+1)\n    og := make([][]int, m+1)\n    for i := 1; i &lt;= m; i++ {\n        Fscan(in, &amp;items[i][0], &amp;items[i][1], &amp;items[i][2])\n        items[i][0] /= 10\n        items[i][1] *= items[i][0]\n        if q := items[i][2]; q != 0 {\n            og[q] = append(og[q], i)\n        }\n    }\n    dp := make([]int, n+1)\n    for x := 1; x &lt;= m; x++ { // \u679a\u4e3e\u4e3b\u4ef6\u4e0e\u5176\u9644\u4ef6\u7ec4\u6210\u7684\u5206\u7ec4\n        if items[x][2] == 0 {\n            vx, wx := items[x][0], items[x][1]\n            for i := n; i &gt;= vx; i-- { // \u679a\u4e3e\u80cc\u5305\u5bb9\u91cf\n                for s := 1&lt;&lt;len(og[x]) - 1; s &gt;= 0; s-- { // \u679a\u4e3e\u5206\u7ec4\u5185\u7684\u7269\u54c1\uff08\u9644\u4ef6\u9009\u62e9\u72b6\u6001\uff09\n                    v, w := vx, wx // \u9009\u62e9\u4e3b\u4ef6x\n                    for j, y := range og[x] {\n                        if s&gt;&gt;j&amp;1 == 1 { // \u9009\u62e9\u72b6\u6001s\u8868\u793a\u7684\u9644\u4ef6\n                            v += items[y][0]\n                            w += items[y][1]\n                        }\n                    }\n                    if i &gt;= v {\n                        dp[i] = max(dp[i], dp[i-v]+w)\n                    }\n                }\n            }\n        }\n    }\n\n    Fprintln(out, dp[n]*10)\n}\n\nfunc max(x, y int) int {\n    if x &gt; y {\n        return x\n    } else {\n        return y\n    }\n}\n</code></pre> <pre><code>import java.io.*;\nimport java.util.*;\n\npublic class Main {\n\n    static BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n    static PrintWriter out = new PrintWriter(System.out);\n\n    public static void main(String[] args) throws Exception {\n        StringTokenizer nm = new StringTokenizer(in.readLine());\n        int n = Integer.parseInt(nm.nextToken()) / 10;\n        int m = Integer.parseInt(nm.nextToken());\n        int[][] items = new int[m + 1][3];\n        List&lt;Integer&gt;[] og = new List[m + 1];\n        for (int i = 1; i &lt;= m; i++) {\n            og[i] = new ArrayList&lt;&gt;();\n        }\n        for (int i = 1; i &lt;= m; i++) {\n            StringTokenizer vpq = new StringTokenizer(in.readLine());\n            items[i][0] = Integer.parseInt(vpq.nextToken()) / 10;\n            items[i][1] = Integer.parseInt(vpq.nextToken()) * items[i][0];\n            items[i][2] = Integer.parseInt(vpq.nextToken());\n            if (items[i][2] != 0) {\n                og[items[i][2]].add(i);\n            }\n        }\n        int[] dp = new int[n + 1];\n        for (int x = 1; x &lt;= m; x++) { // \u679a\u4e3e\u4e3b\u4ef6\u4e0e\u5176\u9644\u4ef6\u7ec4\u6210\u7684\u5206\u7ec4\n            if (items[x][2] == 0) {\n                int vx = items[x][0];\n                for (int i = n; i &gt;= vx; i--) { // \u679a\u4e3e\u80cc\u5305\u5bb9\u91cf\n                    int c = og[x].size();\n                    for (int s = (1 &lt;&lt; c) - 1; s &gt;= 0; s--) { // \u679a\u4e3e\u5206\u7ec4\u5185\u7684\u7269\u54c1\uff08\u9644\u4ef6\u9009\u62e9\u72b6\u6001\uff09\n                        int v = vx, w = items[x][1]; // \u9009\u62e9\u4e3b\u4ef6x\n                        for (int j = 0; j &lt; c; j++) {\n                            if (((s &gt;&gt; j) &amp; 1) == 1) { // \u9009\u62e9\u72b6\u6001s\u8868\u793a\u7684\u9644\u4ef6\n                                int y = og[x].get(j);\n                                v += items[y][0];\n                                w += items[y][1];\n                            }\n                        }\n                        if (i &gt;= v) {\n                            dp[i] = Math.max(dp[i], dp[i - v] + w);\n                        }\n                    }\n                }\n            }\n        }\n\n        out.println(dp[n] * 10);\n        out.flush();\n        out.close();\n        in.close();\n    }\n}\n</code></pre>"},{"location":"dp/knapsack/#\u52a8\u6001\u7269\u54c1\u80cc\u5305","title":"\u52a8\u6001\u7269\u54c1\u80cc\u5305","text":"<p>\u6bcf\u4e2a\u7269\u54c1\u7684\u8d39\u7528\u6216\u4ef7\u503c\u6839\u636e\u4e00\u5b9a\u6761\u4ef6\u52a8\u6001\u53d8\u5316\u3002\u72b6\u6001\u8f6c\u79fb\u65f6\u8ba1\u7b97\u5177\u4f53\u7684\u8d39\u7528\u6216\u4ef7\u503c\u5373\u53ef\u3002</p>"},{"location":"dp/knapsack/#\u80cc\u5305\u95ee\u9898\u53d8\u79cd","title":"\u80cc\u5305\u95ee\u9898\u53d8\u79cd","text":""},{"location":"dp/knapsack/#\u6c42\u65b9\u6848\u6570","title":"\u6c42\u65b9\u6848\u6570","text":""},{"location":"dp/knapsack/#t-acwing11-\u6c42\u65b9\u6848\u6570","title":"[T] AcWing11. \u6c42\u65b9\u6848\u6570","text":"\u95ee\u9898\u63cf\u8ff0 <p>\u7b2c\u4e00\u884c\u8f93\u5165 \\(n\\) \u548c \\(m\\) \u4e24\u4e2a\u6574\u6570\uff0c\\(1\u2264n,m\u22641e3\\) \u3002\u8868\u793a\u6709 \\(n\\) \u4ef6\u7269\u54c1\u548c\u4e00\u4e2a\u5bb9\u91cf\u4e3a \\(m\\) \u7684\u80cc\u5305\u3002 \u63a5\u4e0b\u6765 \\(n\\) \u884c\uff0c\u6bcf\u884c\u8f93\u5165 \\(v_i\\) \u548c \\(w_i\\) \u4e24\u4e2a\u6574\u6570\uff0c\u8868\u793a\u7b2c \\(i\\) \u4ef6\u7269\u54c1\u7684\u4f53\u79ef\u662f \\(v_i\\) \uff0c\u4ef7\u503c\u662f \\(w_i\\) \uff0c\\(1\u2264v_i,w_i\u22641e3\\) \u3002 \u6c42\u89e3\u5c06\u54ea\u4e9b\u7269\u54c1\u88c5\u5165\u80cc\u5305\uff0c\u53ef\u4f7f\u8fd9\u4e9b\u7269\u54c1\u7684\u603b\u4f53\u79ef\u4e0d\u8d85\u8fc7\u80cc\u5305\u5bb9\u91cf\uff0c\u4e14\u603b\u4ef7\u503c\u6700\u5927\u3002 \u8f93\u51fa \u6700\u4f18\u9009\u6cd5\u7684\u65b9\u6848\u6570\u3002\u6ce8\u610f\u7b54\u6848\u53ef\u80fd\u5f88\u5927\uff0c\u8bf7\u8f93\u51fa\u7b54\u6848\u6a21 \\(1e9+7\\) \u7684\u7ed3\u679c\u3002</p> <p>\u5728 AcWing \u67e5\u770b\u8be5\u9898\u3002</p> \u89e3\u9898\u601d\u8def GoJava <pre><code>package main\n\nimport (\n    \"bufio\"\n    . \"fmt\"\n    \"os\"\n)\n\nfunc main() {\n    in := bufio.NewReader(os.Stdin)\n    out := bufio.NewWriter(os.Stdout)\n    defer out.Flush()\n\n    const mod = 1e9 + 7\n\n    var n, m int\n    Fscan(in, &amp;n, &amp;m)\n    items := make([][2]int, n)\n    for i := range items {\n        Fscan(in, &amp;items[i][0], &amp;items[i][1])\n    }\n\n    dp := make([]int, m+1)\n    // cnt[i]\u8868\u793a\u5bb9\u91cf\u4e3ai\u7684\u80cc\u5305\u88c5\u5165\u603b\u4ef7\u503c\u4e3adp[i]\u7684\u7269\u54c1\u7684\u65b9\u6848\u6570\n    cnt := make([]int, m+1)\n    for i := range cnt {\n        cnt[i] = 1 // \u521d\u59cb\u5316\u4e3a1\uff0c\u8868\u793a\u4ec0\u4e48\u90fd\u4e0d\u88c5\u7684\u65b9\u6848\n    }\n    for _, item := range items {\n        v, w := item[0], item[1]\n        for i := m; i &gt;= v; i-- {\n            if x := dp[i-v] + w; x &gt; dp[i] {\n                dp[i], cnt[i] = x, cnt[i-v]\n            } else if x == dp[i] {\n                cnt[i] = (cnt[i] + cnt[i-v]) % mod\n            }\n        }\n    }\n    Fprintln(out, cnt[m])\n}\n</code></pre> <pre><code>import java.io.*;\nimport java.util.*;\n\npublic class Main {\n\n    static BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n    static PrintWriter out = new PrintWriter(System.out);\n\n    static int mod = (int) 1e9 + 7;\n\n    public static void main(String[] args) throws Exception {\n        StringTokenizer nm = new StringTokenizer(in.readLine());\n        int n = Integer.parseInt(nm.nextToken());\n        int m = Integer.parseInt(nm.nextToken());\n        int[][] items = new int[n][2];\n        for (int[] item : items) {\n            StringTokenizer vw = new StringTokenizer(in.readLine());\n            item[0] = Integer.parseInt(vw.nextToken());\n            item[1] = Integer.parseInt(vw.nextToken());\n        }\n\n        int[] dp = new int[m + 1];\n        // cnt[i]\u8868\u793a\u5bb9\u91cf\u4e3ai\u7684\u80cc\u5305\u88c5\u5165\u603b\u4ef7\u503c\u4e3adp[i]\u7684\u7269\u54c1\u7684\u65b9\u6848\u6570\n        int[] cnt = new int[m + 1];\n        for (int i = 0; i &lt;= m; i++) {\n            cnt[i] = 1; // \u521d\u59cb\u5316\u4e3a1\uff0c\u8868\u793a\u4ec0\u4e48\u90fd\u4e0d\u88c5\u7684\u65b9\u6848\n        }\n        for (int[] item : items) {\n            int v = item[0], w = item[1];\n            for (int i = m; i &gt;= v; i--) {\n                int x = dp[i - v] + w;\n                if (x &gt; dp[i]) {\n                    dp[i] = x;\n                    cnt[i] = cnt[i - v];\n                } else if (x == dp[i]) {\n                    cnt[i] = (cnt[i] + cnt[i - v]) % mod;\n                }\n            }\n        }\n        out.println(cnt[m]);\n        out.flush();\n        out.close();\n        in.close();\n    }\n}\n</code></pre>"},{"location":"dp/knapsack/#\u6c42\u5177\u4f53\u65b9\u6848","title":"\u6c42\u5177\u4f53\u65b9\u6848","text":""},{"location":"dp/knapsack/#t-acwing12-\u6c42\u5177\u4f53\u65b9\u6848","title":"[T] AcWing12. \u6c42\u5177\u4f53\u65b9\u6848","text":"\u95ee\u9898\u63cf\u8ff0 <p>\u7b2c\u4e00\u884c\u8f93\u5165 \\(n\\) \u548c \\(m\\) \u4e24\u4e2a\u6574\u6570\uff0c\\(1\u2264n,m\u22641e3\\) \u3002\u8868\u793a\u6709 \\(n\\) \u4ef6\u7269\u54c1\u548c\u4e00\u4e2a\u5bb9\u91cf\u4e3a \\(m\\) \u7684\u80cc\u5305\u3002 \u63a5\u4e0b\u6765 \\(n\\) \u884c\uff0c\u6bcf\u884c\u8f93\u5165 \\(v_i\\) \u548c \\(w_i\\) \u4e24\u4e2a\u6574\u6570\uff0c\u8868\u793a\u7b2c \\(i\\) \u4ef6\u7269\u54c1\u7684\u4f53\u79ef\u662f \\(v_i\\) \uff0c\u4ef7\u503c\u662f \\(w_i\\) \uff0c\\(1\u2264v_i,w_i\u22641e3\\) \u3002 \u6c42\u89e3\u5c06\u54ea\u4e9b\u7269\u54c1\u88c5\u5165\u80cc\u5305\uff0c\u53ef\u4f7f\u8fd9\u4e9b\u7269\u54c1\u7684\u603b\u4f53\u79ef\u4e0d\u8d85\u8fc7\u80cc\u5305\u5bb9\u91cf\uff0c\u4e14\u603b\u4ef7\u503c\u6700\u5927\u3002 \u8f93\u51fa \u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u65b9\u6848\u3002\u8fd9\u91cc\u7684\u5b57\u5178\u5e8f\u662f\u6307\uff1a\u6240\u9009\u7269\u54c1\u7684\u7f16\u53f7\u6240\u6784\u6210\u7684\u5e8f\u5217\u3002\u7269\u54c1\u7684\u7f16\u53f7\u8303\u56f4\u662f \\(1 \\dots n\\) \u3002</p> <p>\u5728 AcWing \u67e5\u770b\u8be5\u9898\u3002</p> \u89e3\u9898\u601d\u8def GoJava <pre><code>package main\n\nimport (\n    \"bufio\"\n    . \"fmt\"\n    \"os\"\n)\n\nfunc main() {\n    in := bufio.NewReader(os.Stdin)\n    out := bufio.NewWriter(os.Stdout)\n    defer out.Flush()\n\n    var n, m int\n    Fscan(in, &amp;n, &amp;m)\n    items := make([][2]int, n)\n    for i := range items {\n        Fscan(in, &amp;items[i][0], &amp;items[i][1])\n    }\n\n    dp := make([][]int, n+1)\n    for i := range dp {\n        dp[i] = make([]int, m+1)\n    }\n\n    // \u5012\u5e8f\u8f6c\u79fb\u6700\u5927\u603b\u4ef7\u503c\n    for i := n - 1; i &gt;= 0; i-- {\n        v, w := items[i][0], items[i][1]\n        for j := 1; j &lt;= m; j++ {\n            if dp[i][j] = dp[i+1][j]; j &gt;= v {\n                dp[i][j] = max(dp[i][j], dp[i+1][j-v]+w)\n            }\n        }\n    }\n\n    // \u6b63\u5e8f\u8f93\u51fa\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u65b9\u6848\n    left := m\n    for i := 0; i &lt; n &amp;&amp; left &gt; 0; i++ {\n        v, w := items[i][0], items[i][1]\n        if left &gt;= v &amp;&amp; dp[i][left] == dp[i+1][left-v]+w {\n            Fprint(out, i+1, \" \")\n            left -= v\n        }\n    }\n}\n\nfunc max(x, y int) int {\n    if x &gt; y {\n        return x\n    } else {\n        return y\n    }\n}\n</code></pre> <pre><code>import java.io.*;\nimport java.util.*;\n\npublic class Main {\n\n    static BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n    static PrintWriter out = new PrintWriter(System.out);\n\n    public static void main(String[] args) throws Exception {\n        StringTokenizer nm = new StringTokenizer(in.readLine());\n        int n = Integer.parseInt(nm.nextToken());\n        int m = Integer.parseInt(nm.nextToken());\n        int[][] items = new int[n][2];\n        for (int[] item : items) {\n            StringTokenizer vw = new StringTokenizer(in.readLine());\n            item[0] = Integer.parseInt(vw.nextToken());\n            item[1] = Integer.parseInt(vw.nextToken());\n        }\n\n        // \u5012\u5e8f\u8f6c\u79fb\u6700\u5927\u603b\u4ef7\u503c\n        int[][] dp = new int[n + 1][m + 1];\n        for (int i = n - 1; i &gt;= 0; i--) {\n            int v = items[i][0], w = items[i][1];\n            for (int j = 0; j &lt;= m; j++) {\n                dp[i][j] = dp[i + 1][j];\n                if (j &gt;= v) {\n                    dp[i][j] = Math.max(dp[i][j], dp[i + 1][j - v] + w);\n                }\n            }\n        }\n\n        // \u6b63\u5e8f\u8f93\u51fa\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u65b9\u6848\n        int left = m;\n        for (int i = 0; i &lt; n &amp;&amp; left &gt; 0; i++) {\n            int v = items[i][0], w = items[i][1];\n            if (left &gt;= v &amp;&amp; dp[i][left] == dp[i + 1][left - v] + w) {\n                out.printf(\"%d \", i + 1);\n                left -= v;\n            }\n        }\n        out.flush();\n        out.close();\n        in.close();\n    }\n}\n</code></pre>"},{"location":"dp/knapsack/multi-knapsacks/","title":"\u591a\u80cc\u5305 DP","text":"<p>\u8fd9\u91cc\u6574\u7406\u4e00\u4e9b\u6d89\u53ca\u5230\u591a\u4e2a\u80cc\u5305\u7684\u52a8\u6001\u89c4\u5212\u95ee\u9898\u3002</p>"},{"location":"dp/knapsack/multi-knapsacks/#\u9759\u6001\u7269\u54c1\u591a\u80cc\u5305","title":"\u9759\u6001\u7269\u54c1\u591a\u80cc\u5305","text":"<p>\u6bcf\u4e2a\u7269\u54c1\u7684\u8d39\u7528\u548c\u4ef7\u503c\u56fa\u5b9a\u3002</p>"},{"location":"dp/knapsack/multi-knapsacks/#cf687c-the-values-you-can-make","title":"CF687C. The Values You Can Make","text":"\u95ee\u9898\u63cf\u8ff0 <p>\u7b2c\u4e00\u884c\u8f93\u5165 \\(n\\) \u548c \\(k\\) \u4e24\u4e2a\u6574\u6570\uff0c\\(1\u2264n,k\u2264500\\) \u3002 \u7b2c\u4e8c\u884c\u8f93\u5165\u957f\u5ea6\u4e3a \\(n\\) \u7684\u6570\u7ec4 \\(c(1\u2264c[i]\u2264500)\\) \u3002 \u4ece \\(c\\) \u4e2d\u9009\u62e9\u82e5\u5e72\u4e2a\u6570\uff0c\u7ec4\u6210\u6570\u7ec4 \\(a\\) \uff0c\u6ee1\u8db3 \\(sum(a) = k\\) \u3002 \u4ece \\(a\\) \u4e2d\u518d\u9009\u62e9\u82e5\u5e72\u4e2a\u6570\uff0c\u7ec4\u6210\u6570\u7ec4 \\(b\\)\uff08\u53ef\u4ee5\u4e3a\u7a7a\uff09\u3002 \u8ba1\u7b97 \\(sum(b)\\) \u7684\u6240\u6709\u53ef\u80fd\u7684\u503c\u3002\u7b2c\u4e00\u884c\u8f93\u51fa\u8fd9\u4e9b\u503c\u7684\u4e2a\u6570 \\(q\\) \uff0c\u7b2c\u4e8c\u884c\u6309\u5347\u5e8f\u8f93\u51fa\u8fd9 \\(q\\) \u4e2a\u6570\u3002</p> <p>\u5728 Codeforces \u6216 \u6d1b\u8c37 \u67e5\u770b\u8be5\u9898\u3002</p> \u89e3\u9898\u601d\u8def <p>\u5982\u679c\u80fd\u4ece \\(c\\) \u4e2d\u9009\u62e9\u4e24\u4e2a\u4e0d\u76f8\u4ea4\u7684\u5b50\u96c6 \\(A\\) \u548c \\(B\\)\uff0c\u4f7f\u5f97 \\(\\sum A = x\\) \u4e14 \\(\\sum B = k-x\\) \u3002\u5219 \\(x\\) \u5c31\u662f\u4e00\u4e2a\u53ef\u80fd\u503c\u3002 \u95ee\u9898\u8f6c\u5316\u4e3a \u6709\u4e24\u4e2a\u80cc\u5305\u7684 0-1 \u80cc\u5305\u95ee\u9898 \uff0c\u6bcf\u4e2a\u7269\u54c1 \\(c_i\\) \uff0c\u8981\u4e48\u4e0d\u9009\uff0c\u8981\u4e48\u653e\u5165\u80cc\u53051\uff0c\u8981\u4e48\u653e\u5165\u80cc\u53052\u3002</p> <p>\u5b9a\u4e49 \\(dp[i][j_1][j_2]\\) \u8868\u793a\u4ece\u524d \\(i\\) \u4e2a\u6570\u4e2d\u80fd\u5426\u9009\u51fa\u4e24\u4e2a\u4e0d\u76f8\u4ea4\u7684\u5b50\u96c6 \\(A\\) \u548c \\(B\\)\uff0c\u4f7f\u5f97 \\(\\sum A = j_1\\) \u4e14 \\(\\sum B = j_2\\) \u3002 \u5219\u6709 \\(dp[i][j_1][j_2] = dp[i-1][j_1][j_2] \\parallel dp[i-1][j_1-c_i][j_2] \\parallel dp[i-1][j_1][j_2-c_i]\\) \u3002 \u6240\u6709\u4f7f\u5f97 \\(dp[n][x][k-x] = true\\) \u7684 \\(x\\) \u90fd\u662f\u53ef\u80fd\u503c\u3002 \u5b9e\u73b0\u65f6\u4f18\u5316\u6389\u7b2c\u4e00\u4e2a\u7ef4\u5ea6\uff0c\u6ce8\u610f\u5faa\u73af\u679a\u4e3e\u987a\u5e8f\u3002</p> GoJava <pre><code>package main\n\nimport (\n    \"bufio\"\n    . \"fmt\"\n    \"os\"\n    \"sort\"\n)\n\nfunc main() {\n    in := bufio.NewReader(os.Stdin)\n    out := bufio.NewWriter(os.Stdout)\n    defer out.Flush()\n\n    var n, k int\n    Fscan(in, &amp;n, &amp;k)\n    c := make([]int, n)\n    for i := range c {\n        Fscan(in, &amp;c[i])\n    }\n\n    // dp[i][j1][j2]\u8868\u793a\u4ece\u524di\u4e2a\u6570\u4e2d\u662f\u5426\u80fd\u9009\u51fa\u4e24\u4e2a\u4e0d\u76f8\u4ea4\u7684\u5b50\u96c6\uff0c\u5176\u4e2d\u5b50\u96c61\u7684\u5143\u7d20\u548c\u4e3aj1\uff0c\u5b50\u96c62\u7684\u5143\u7d20\u548c\u4e3aj2\n    dp := make([][]bool, k+1)\n    for i := range dp {\n        dp[i] = make([]bool, k+1)\n    }\n    dp[0][0] = true\n\n    sort.Ints(c) // \u6392\u5e8f\u4f18\u5316\u679a\u4e3e\u6548\u7387\n\n    var s, ms int\n    for _, x := range c {\n        s += x\n        ms = min(s, k) // \u5b50\u96c6\u5143\u7d20\u548c\u4ece\u5f53\u524d\u6700\u5927\u548c\u5f00\u59cb\u679a\u4e3e\n        for j1 := ms; j1 &gt;= 0; j1-- {\n            for j2 := ms; j2 &gt;= 0; j2-- {\n                // \u4e0d\u9009\u62e9x\uff0c\u6216\u8005\u9009\u62e9x\u653e\u5165\u5b50\u96c61\uff0c\u6216\u8005\u9009\u62e9x\u653e\u5165\u5b50\u96c62\n                dp[j1][j2] = dp[j1][j2] || (j1 &gt;= x &amp;&amp; dp[j1-x][j2]) || (j2 &gt;= x &amp;&amp; dp[j1][j2-x])\n            }\n        }\n    }\n\n    var ans []int\n    for x, fx := range dp {\n        if fx[k-x] {\n            ans = append(ans, x)\n        }\n    }\n    Fprintln(out, len(ans))\n    for _, x := range ans {\n        Fprint(out, x, \" \")\n    }\n}\n\nfunc min(x, y int) int {\n    if x &lt; y {\n        return x\n    } else {\n        return y\n    }\n}\n</code></pre> <pre><code>import java.io.*;\nimport java.util.*;\n\npublic class Main {\n\n    static BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n    static PrintWriter out = new PrintWriter(System.out);\n\n    public static void main(String[] args) throws Exception {\n        StringTokenizer nk = new StringTokenizer(in.readLine());\n        int n = Integer.parseInt(nk.nextToken());\n        int k = Integer.parseInt(nk.nextToken());\n        int[] c = new int[n];\n        StringTokenizer tokenizer = new StringTokenizer(in.readLine());\n        for (int i = 0; i &lt; n; i++) {\n            c[i] = Integer.parseInt(tokenizer.nextToken());\n        }\n\n        // dp[i][j1][j2]\u8868\u793a\u4ece\u524di\u4e2a\u6570\u4e2d\u662f\u5426\u80fd\u9009\u51fa\u4e24\u4e2a\u4e0d\u76f8\u4ea4\u7684\u5b50\u96c6\uff0c\u5176\u4e2d\u5b50\u96c61\u7684\u5143\u7d20\u548c\u4e3aj1\uff0c\u5b50\u96c62\u7684\u5143\u7d20\u548c\u4e3aj2\n        boolean[][] dp = new boolean[k + 1][k + 1];\n        dp[0][0] = true;\n\n        Arrays.sort(c); // \u6392\u5e8f\u4f18\u5316\u679a\u4e3e\u6548\u7387\n\n        int s = 0, ms = 0;\n        for (int x : c) {\n            s += x;\n            ms = Math.min(s, k); // \u5b50\u96c6\u5143\u7d20\u548c\u4ece\u5f53\u524d\u6700\u5927\u548c\u5f00\u59cb\u679a\u4e3e\n            for (int j1 = ms; j1 &gt;= 0; j1--) {\n                for (int j2 = ms; j2 &gt;= 0; j2--) {\n                    // \u4e0d\u9009\u62e9x\uff0c\u6216\u8005\u9009\u62e9x\u653e\u5165\u5b50\u96c61\uff0c\u6216\u8005\u9009\u62e9x\u653e\u5165\u5b50\u96c62\n                    dp[j1][j2] |= (j1 &gt;= x &amp;&amp; dp[j1 - x][j2]) || (j2 &gt;= x &amp;&amp; dp[j1][j2 - x]);\n                }\n            }\n        }\n\n        int cnt = 0;\n        int[] ans = new int[k + 1];\n        for (int x = 0; x &lt;= k; x++) {\n            if (dp[x][k - x]) {\n                ans[cnt++] = x;\n            }\n        }\n        out.println(cnt);\n        for (int i = 0; i &lt; cnt; i++) {\n            out.printf(\"%d \", ans[i]);\n        }\n        out.flush();\n        out.close();\n        in.close();\n    }\n}\n</code></pre>"},{"location":"dp/knapsack/multi-knapsacks/#\u52a8\u6001\u7269\u54c1\u591a\u80cc\u5305","title":"\u52a8\u6001\u7269\u54c1\u591a\u80cc\u5305","text":"<p>\u6bcf\u4e2a\u7269\u54c1\u7684\u8d39\u7528\u6216\u4ef7\u503c\u6839\u636e\u4e00\u5b9a\u6761\u4ef6\u52a8\u6001\u53d8\u5316\u3002\u72b6\u6001\u8f6c\u79fb\u65f6\u8ba1\u7b97\u5177\u4f53\u7684\u8d39\u7528\u6216\u4ef7\u503c\u5373\u53ef\u3002</p>"},{"location":"dp/knapsack/multi-knapsacks/#cf1525d-armchairs","title":"CF1525D. Armchairs","text":"\u95ee\u9898\u63cf\u8ff0 <p>\u7b2c\u4e00\u884c\u8f93\u5165 \\(n(2\u2264n\u22645000)\\) \uff0c\u7b2c\u4e8c\u884c\u8f93\u5165\u957f\u4e3a \\(n\\) \u7684\u6570\u7ec4 \\(a\\) \uff0c\u5176\u4e2d\u53ea\u6709 0 \u548c 1\u3002\u4fdd\u8bc1 1 \u7684\u6570\u91cf\u4e0d\u8d85\u8fc7 \\(n/2\\) \u3002 \\(a[i]=0\\) \u8868\u793a\u4f4d\u7f6e \\(i\\) \u5904\u6709\u4e00\u628a\u6905\u5b50\uff0c\\(a[i]=1\\) \u8868\u793a\u4f4d\u7f6e \\(i\\) \u5904\u6709\u4e00\u4e2a\u4eba\u3002 \u4e00\u628a\u6905\u5b50\u53ea\u80fd\u5750\u4e00\u4e2a\u4eba\u3002\u4e00\u4e2a\u4eba\u4ece \\(i\\) \u79fb\u52a8\u5230 \\(j\\) \u7684\u4ee3\u4ef7\u4e3a \\(abs(i-j)\\) \u3002 \u95ee\u6240\u6709\u4eba\u90fd\u5750\u5230\u6905\u5b50\u4e0a\u7684\u603b\u4ee3\u4ef7\u548c\u6700\u5c0f\u662f\u591a\u5c11\uff1f</p> <p>\u5728 Codeforces \u6216 \u6d1b\u8c37 \u67e5\u770b\u8be5\u9898\u3002</p> <p>\u8fdb\u9636\uff1a\u5982\u679c\u4e00\u628a\u6905\u5b50\u53ef\u4ee5\u5750\u591a\u4e2a\u4eba\u5462\uff1f\u53c2\u8003 LC2463. \u6700\u5c0f\u79fb\u52a8\u603b\u8ddd\u79bb\u3002</p> \u89e3\u9898\u601d\u8def <p>\u6839\u636e\u8f93\u5165\u53ef\u4ee5\u5f97\u5230\u4eba\u7684\u4f4d\u7f6e\u5e8f\u5217 \\(peoples\\) \u548c\u6905\u5b50\u7684\u4f4d\u7f6e\u5e8f\u5217 \\(chairs\\) \uff0c\u4e24\u4e2a\u5e8f\u5217\u4e25\u683c\u9012\u589e\u3002 \u5047\u8bbe\u6700\u4f18\u65b9\u6848\u4e2d\uff0c\u7b2c \\(i\\) \u4e2a\u4eba\u5750\u5230\u6905\u5b50 \\(c_i\\) \u4e0a\uff0c\u5219 \u5b58\u5728\u6700\u4f18\u65b9\u6848\uff0c\u4f7f\u5f97 \\(c_i\\) \u662f\u4e25\u683c\u5355\u8c03\u9012\u589e\u7684 \u3002\u51fa\u73b0\u4ea4\u53c9\u7684\u65b9\u6848\u4e0d\u4f1a\u66f4\u4f18\u3002</p> <p>\u5982\u679c\u628a\u6905\u5b50\u5f53\u505a\u5bb9\u91cf\u4e3a \\(1\\) \u7684\u80cc\u5305\uff0c\u4eba\u5f53\u505a\u4f53\u79ef\u4e3a \\(1\\) \u7684\u7269\u54c1\uff0c\u5219\u8f6c\u5316\u4e3a\u52a8\u6001\u7269\u54c1\u591a\u80cc\u5305\u95ee\u9898\u3002 \u5b9a\u4e49 \\(dp[i][j]\\) \u8868\u793a\u524d \\(j\\) \u4e2a\u4eba\u5728\u524d \\(i\\) \u628a\u6905\u5b50\u4e2d\u627e\u5230\u6905\u5b50\u5750\u7684\u6700\u5c0f\u603b\u4ee3\u4ef7\u3002</p> <ol> <li>\u5982\u679c\u7b2c \\(j\\) \u4e2a\u4eba\u4e0d\u5750\u5728\u7b2c \\(i\\) \u628a\u6905\u5b50\uff0c\u5219 \\(dp[i][j] = dp[i-1][j]\\) \uff1b</li> <li>\u5982\u679c\u7b2c \\(j\\) \u4e2a\u4eba\u5750\u5728\u7b2c \\(i\\) \u628a\u6905\u5b50\u4e0a\uff0c\u5219 \\(dp[i][j] = dp[i-1][j-1] + abs(chairs[i-1] - peoples[j-1])\\) \u3002</li> </ol> <p>\u5b9e\u73b0\u65f6\u53ef\u4ee5\u4f18\u5316\u6389\u7b2c\u4e00\u4e2a\u7ef4\u5ea6\uff0c\u6ce8\u610f\u5faa\u73af\u679a\u4e3e\u987a\u5e8f\u3002</p> GoJava <pre><code>package main\n\nimport (\n    \"bufio\"\n    . \"fmt\"\n    \"os\"\n)\n\nfunc main() {\n    in := bufio.NewReader(os.Stdin)\n    out := bufio.NewWriter(os.Stdout)\n    defer out.Flush()\n\n    var n, x int\n    Fscan(in, &amp;n)\n    var chairs, peoples []int\n    for i := 0; i &lt; n; i++ {\n        if Fscan(in, &amp;x); x == 0 {\n            chairs = append(chairs, i)\n        } else {\n            peoples = append(peoples, i)\n        }\n    }\n\n    n = len(peoples)\n    dp := make([]int, n+1)\n    for j := range dp {\n        dp[j] = 1e8\n    }\n    dp[0] = 0\n    for i, chair := range chairs {\n        for j := min(n-1, i); j &gt;= 0; j-- {\n            dp[j+1] = min(dp[j+1], dp[j]+abs(chair-peoples[j]))\n        }\n    }\n    Fprintln(out, dp[n])\n}\n\nfunc abs(x int) int {\n    if x &lt; 0 {\n        return -x\n    } else {\n        return x\n    }\n}\n\nfunc min(x, y int) int {\n    if x &lt; y {\n        return x\n    } else {\n        return y\n    }\n}\n</code></pre> <pre><code>import java.io.*;\nimport java.util.*;\n\npublic class Main {\n\n    static BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n    static PrintWriter out = new PrintWriter(System.out);\n\n    public static void main(String[] args) throws Exception {\n        List&lt;Integer&gt; chairs = new ArrayList&lt;&gt;();\n        List&lt;Integer&gt; peoples = new ArrayList&lt;&gt;();\n        int n = Integer.parseInt(in.readLine());\n        StringTokenizer tokenizer = new StringTokenizer(in.readLine());\n        for (int i = 0; i &lt; n; i++) {\n            (tokenizer.nextToken().charAt(0) == '0' ? chairs : peoples).add(i);\n        }\n        n = peoples.size();\n        int[] dp = new int[n + 1];\n        for (int j = 1; j &lt;= n; j++) {\n            dp[j] = (int) 1e8;\n        }\n        for (int i = 0, m = chairs.size(); i &lt; m; i++) {\n            for (int j = Math.min(n - 1, i); j &gt;= 0; j--) {\n                dp[j + 1] = Math.min(dp[j + 1], dp[j] + Math.abs(chairs.get(i) - peoples.get(j)));\n            }\n        }\n        out.println(dp[n]);\n        out.flush();\n        out.close();\n        in.close();\n    }\n}\n</code></pre>"},{"location":"dp/knapsack/multi-knapsacks/#lc2463-\u6700\u5c0f\u79fb\u52a8\u603b\u8ddd\u79bb","title":"LC2463. \u6700\u5c0f\u79fb\u52a8\u603b\u8ddd\u79bb","text":"\u95ee\u9898\u63cf\u8ff0 <p>\u7ed9\u4f60\u4e00\u4e2a\u957f\u5ea6\u4e3a \\(m(1\u2264m\u2264100)\\) \u7684\u673a\u5668\u4eba\u6570\u7ec4 \\(robot\\) \uff0c\\(robot[i]\\) \u662f\u7b2c \\(i\\) \u4e2a\u673a\u5668\u4eba\u7684\u4f4d\u7f6e\uff0c\u8303\u56f4\uff1a\\([-1e9,1e9]\\)\u3002 \u7ed9\u4f60\u4e00\u4e2a\u957f\u5ea6\u4e3a \\(n(1\u2264n\u2264100)\\) \u7684\u5de5\u5382\u6570\u7ec4 \\(factory\\) \uff0c\\(factory[j] = [pos_j, limit_j]\\) \u8868\u793a\u7b2c <code>j</code> \u4e2a\u5de5\u5382\u7684\u4f4d\u7f6e\u548c\u7ef4\u4fee\u673a\u5668\u4eba\u7684\u4e0a\u9650\uff0c\u5176\u4e2d \\(-1e9\u2264pos_j\u22641e9\\) \uff0c\\(0\u2264limit_j\u2264m\\) \u3002 \u6bcf\u4e2a\u673a\u5668\u4eba\u6240\u5728\u7684\u4f4d\u7f6e\u4e92\u4e0d\u76f8\u540c\u3002\u6bcf\u4e2a\u5de5\u5382\u6240\u5728\u7684\u4f4d\u7f6e\u4e5f\u4e92\u4e0d\u76f8\u540c\u3002 \u6ce8\u610f\u4e00\u4e2a\u673a\u5668\u4eba\u53ef\u80fd\u4e00\u5f00\u59cb\u8ddf\u4e00\u4e2a\u5de5\u5382\u5728\u76f8\u540c\u7684\u4f4d\u7f6e\u3002 \u673a\u5668\u4eba\u4ece\u4f4d\u7f6e \\(x\\) \u5230\u4f4d\u7f6e \\(y\\) \u7684\u79fb\u52a8\u8ddd\u79bb\u4e3a \\(|x-y|\\) \u3002 \u95ee\u6240\u6709\u673a\u5668\u4eba\u90fd\u8fdb\u5165\u5de5\u5382\u7ef4\u4fee\u7684\u79fb\u52a8\u8ddd\u79bb\u603b\u548c\u6700\u5c0f\u662f\u591a\u5c11\uff1f\u6d4b\u8bd5\u6570\u636e\u4fdd\u8bc1\u6240\u6709\u673a\u5668\u4eba\u90fd\u53ef\u4ee5\u88ab\u7ef4\u4fee\u3002</p> <p>\u5728 LeetCode\u4e3b\u7ad9 \u6216 \u529b\u6263\u4e2d\u6587\u793e\u533a \u67e5\u770b\u8be5\u9898\u3002</p> <p>\u5982\u679c\u89c9\u5f97\u8fd9\u9898\u6bd4\u8f83\u96be\uff0c\u53ef\u4ee5\u5148\u505a\u7b80\u5355\u7248\uff1aCF1525D. Armchairs\u3002</p> \u89e3\u9898\u601d\u8def <p>\u4e0d\u5931\u4e00\u822c\u6027\u5730\uff0c\u5047\u8bbe\u673a\u5668\u4eba\u7684\u5750\u6807\u662f\u9012\u589e\u7684\uff0c\u5de5\u5382\u7684\u5750\u6807\u4e5f\u662f\u9012\u589e\u7684\u3002 \u8bbe\u6700\u4f18\u65b9\u6848\u4e2d\uff0c\u673a\u5668\u4eba \\(i\\) \u8fdb\u5165\u5de5\u5382 \\(f_i\\)\uff0c\u5219 \u5b58\u5728\u6700\u4f18\u65b9\u6848\uff0c\u4f7f\u5f97 \\(f_i\\) \u662f\u4e0d\u4e25\u683c\u5355\u8c03\u9012\u589e\u7684 \u3002 \u4e0e CF1525D. Armchairs \u7c7b\u4f3c\uff0c\u552f\u4e00\u7684\u4e0d\u540c\u5728\u4e8e\u591a\u4e2a\u673a\u5668\u4eba\u53ef\u4ee5\u8fdb\u5165\u76f8\u540c\u7684\u5de5\u5382\uff0c\u6240\u4ee5 \\(f_i\\) \u662f\u4e0d\u4e25\u683c\u5355\u8c03\u9012\u589e\u7684\u3002</p> <p>\u5982\u679c\u628a\u6bcf\u4e2a\u5de5\u5382\u5f53\u505a\u5bb9\u91cf\u4e3a \\(factory[j][1]\\) \u7684\u80cc\u5305\uff0c\u673a\u5668\u4eba\u5f53\u505a\u4f53\u79ef\u4e3a \\(1\\) \u7684\u7269\u54c1\uff0c\u5219\u8f6c\u5316\u4e3a\u52a8\u6001\u7269\u54c1\u591a\u80cc\u5305\u95ee\u9898\u3002 \u5b9a\u4e49 \\(dp[i][j]\\) \u8868\u793a\u524d \\(j\\) \u4e2a\u673a\u5668\u4eba\u8fdb\u5165\u524d \\(i\\) \u4e2a\u5de5\u5382\u7ef4\u4fee\u7684\u6700\u5c0f\u79fb\u52a8\u603b\u8ddd\u79bb\u3002 \u5b9e\u73b0\u65f6\u53ef\u4ee5\u4f18\u5316\u6389\u7b2c\u4e00\u4e2a\u7ef4\u5ea6\uff0c\u6ce8\u610f\u5faa\u73af\u679a\u4e3e\u987a\u5e8f\u3002</p> Go <pre><code>package main\n\nimport (\n    \"sort\"\n)\n\nfunc minimumTotalDistance(robot []int, factory [][]int) int64 {\n    sort.Ints(robot)\n    sort.Slice(factory, func(i, j int) bool { return factory[i][0] &lt; factory[j][0] })\n    n := len(robot)\n    dp := make([]int, n+1)\n    for i := 1; i &lt;= n; i++ {\n        dp[i] = 1e12\n    }\n    acc := 0\n    for _, f := range factory {\n        acc += f[1]\n        for j := min(n, acc); j &gt; 0; j-- {\n            // \u5728\u5f53\u524d\u5de5\u5382\u53ef\u4ee5\u7ef4\u4fee0~cnt\u4e2a\u673a\u5668\u4eba\n            cnt := min(j, f[1])\n            // \u524dj\u4e2a\u673a\u5668\u4eba\u4e2d\u7684\u540ek\u4e2a\u8fdb\u5165\u5f53\u524d\u5de5\u5382\n            for k, dis := 1, 0; k &lt;= cnt; k++ {\n                dis += abs(f[0] - robot[j-k])\n                dp[j] = min(dp[j], dp[j-k]+dis)\n            }\n        }\n    }\n    return int64(dp[n])\n}\n\nfunc abs(x int) int {\n    if x &lt; 0 {\n        return -x\n    } else {\n        return x\n    }\n}\n\nfunc min(x, y int) int {\n    if x &lt; y {\n        return x\n    } else {\n        return y\n    }\n}\n</code></pre>"},{"location":"dp/knapsack/multi-knapsacks/#lc1478-\u5b89\u6392\u90ae\u7b52","title":"LC1478. \u5b89\u6392\u90ae\u7b52","text":"\u95ee\u9898\u63cf\u8ff0 <p>\u7ed9\u4f60\u4e00\u4e2a\u957f\u5ea6\u4e3a \\(n(1\u2264n\u2264100)\\) \u7684\u623f\u5c4b\u6570\u7ec4 \\(houses\\) \u548c\u4e00\u4e2a\u6574\u6570 \\(k(1\u2264k\u2264n)\\) \u3002 \u5176\u4e2d \\(houses[i]\\) \u662f\u7b2c \\(i\\) \u680b\u623f\u5b50\u5728\u4e00\u6761\u8857\u4e0a\u7684\u4f4d\u7f6e\uff0c\u8303\u56f4\uff1a\\([1,1e4]\\) \u3002 \u73b0\u9700\u8981\u5728\u8fd9\u6761\u8857\u4e0a\u5b89\u6392 \\(k\\) \u4e2a\u90ae\u7b52\u3002\u8bf7\u4f60\u8fd4\u56de\u6bcf\u680b\u623f\u5b50\u4e0e\u79bb\u5b83\u6700\u8fd1\u7684\u90ae\u7b52\u4e4b\u95f4\u7684\u8ddd\u79bb\u7684\u6700\u5c0f\u603b\u548c\u3002</p> <p>\u5728 LeetCode\u4e3b\u7ad9 \u6216 \u529b\u6263\u4e2d\u6587\u793e\u533a \u67e5\u770b\u8be5\u9898\u3002</p> \u89e3\u9898\u601d\u8def <p>\u7ed9\u4e00\u7ec4\u623f\u5c4b\u5b89\u6392\u4e00\u4e2a\u90ae\u7b52\uff0c\u9009\u62e9\u623f\u5c4b\u7684\u4e2d\u4f4d\u6570\u4f5c\u4e3a\u76ee\u6807\u70b9\uff0c\u8ddd\u79bb\u603b\u548c\u6700\u5c0f\u3002</p> <p>\u5982\u679c\u628a\u6bcf\u4e2a\u90ae\u7b52\u5f53\u505a\u5bb9\u91cf\u4e0d\u9650\u7684\u80cc\u5305\uff0c\u623f\u5b50\u5f53\u505a\u7269\u54c1\uff0c\u5219\u8f6c\u5316\u4e3a\u52a8\u6001\u7269\u54c1\u591a\u80cc\u5305\u95ee\u9898\u3002 \u5b9a\u4e49 \\(dp[i][j]\\) \u8868\u793a\u7ed9 \\(houses[:j+1]\\) \u5b89\u6392\u7f16\u53f7\u4e3a \\(0\\dots i\\) \u7684 \\(i+1\\) \u4e2a\u90ae\u7b52\u7684\u6700\u5c0f\u8ddd\u79bb\u603b\u548c\u3002 \u5b9e\u73b0\u65f6\u53ef\u4ee5\u4f18\u5316\u6389\u7b2c\u4e00\u4e2a\u7ef4\u5ea6\uff0c\u6ce8\u610f\u5faa\u73af\u679a\u4e3e\u987a\u5e8f\u3002</p> Go <pre><code>package main\n\nimport \"sort\"\n\nfunc minDistance(houses []int, k int) int {\n    n := len(houses)\n    sort.Ints(houses)\n\n    // medsum[i][j]\u8868\u793a\u6709\u5e8f\u70b9\u96c6houses[i:j+1]\u5230\u4e2d\u4f4d\u6570\u7684\u6700\u5c0f\u8ddd\u79bb\u603b\u548c\n    medsum := make([][]int, n)\n    for i := n - 1; i &gt;= 0; i-- {\n        medsum[i] = make([]int, n)\n        for j := i + 1; j &lt; n; j++ {\n            medsum[i][j] = medsum[i+1][j-1] + houses[j] - houses[i]\n        }\n    }\n\n    // dp[i][j]\u8868\u793a\u7ed9houses[:j+1]\u5b89\u6392\u7f16\u53f7\u4e3a[0..i]\u7684i+1\u4e2a\u90ae\u7b52\u7684\u6700\u5c0f\u8ddd\u79bb\u603b\u548c\n    dp := make([]int, n)\n    // \u5b89\u6392\u7f16\u53f7\u4e3a0\u76841\u4e2a\u90ae\u7b52\n    for j := range dp {\n        dp[j] = medsum[0][j]\n    }\n    // \u5b89\u6392\u7f16\u53f7\u4e3ai\u7684\u7b2ci+1\u4e2a\u90ae\u7b52\n    for i := 1; i &lt; k; i++ {\n        // \u7ed9houses[:j+1]\u5b89\u6392\u7f16\u53f7\u4e3a[0..i]\u7684i+1\u4e2a\u90ae\u7b52\n        // j == i \u8868\u793a\u7ed9houses[:i+1]\u6bcf\u4e2a\u623f\u5b50\u5b89\u6392\u4e00\u4e2a\u90ae\u7b52\n        for j := n - 1; j &gt;= i; j-- {\n            // \u5c06houses[j0:j+1]\u5b89\u6392\u7ed9\u7f16\u53f7\u4e3ai\u7684\u7b2ci+1\u4e2a\u90ae\u7b52\n            for j0 := i; j0 &lt;= j; j0++ {\n                dp[j] = min(dp[j], dp[j0-1]+medsum[j0][j])\n            }\n        }\n    }\n    return dp[n-1]\n}\n\nfunc min(x, y int) int {\n    if x &lt; y {\n        return x\n    } else {\n        return y\n    }\n}\n</code></pre>"},{"location":"dp/tree/","title":"\u6811\u5f62 DP","text":""},{"location":"dp/tree/#lc124-\u4e8c\u53c9\u6811\u4e2d\u7684\u6700\u5927\u8def\u5f84\u548c","title":"LC124. \u4e8c\u53c9\u6811\u4e2d\u7684\u6700\u5927\u8def\u5f84\u548c","text":"\u95ee\u9898\u63cf\u8ff0 <p>\u4e8c\u53c9\u6811\u4e2d\u7684 \u8def\u5f84 \u88ab\u5b9a\u4e49\u4e3a\u4e00\u6761\u8282\u70b9\u5e8f\u5217\uff0c\u5e8f\u5217\u4e2d\u6bcf\u5bf9\u76f8\u90bb\u8282\u70b9\u4e4b\u95f4\u90fd\u5b58\u5728\u4e00\u6761\u8fb9\u3002\u540c\u4e00\u4e2a\u8282\u70b9\u5728\u4e00\u6761\u8def\u5f84\u5e8f\u5217\u4e2d \u81f3\u591a\u51fa\u73b0\u4e00\u6b21 \u3002\u8be5\u8def\u5f84 \u81f3\u5c11\u5305\u542b\u4e00\u4e2a \u8282\u70b9\uff0c\u4e14\u4e0d\u4e00\u5b9a\u7ecf\u8fc7\u6839\u8282\u70b9\u3002 \u8def\u5f84\u548c \u662f\u8def\u5f84\u4e2d\u5404\u8282\u70b9\u503c\u7684\u603b\u548c\u3002\u7ed9\u4f60\u4e00\u4e2a\u4e8c\u53c9\u6811\u7684\u6839\u8282\u70b9 <code>root</code> \uff0c\u8fd4\u56de\u5176 \u6700\u5927\u8def\u5f84\u548c \u3002</p> <p>\u5728 LeetCode\u4e3b\u7ad9 \u6216 \u529b\u6263\u4e2d\u6587\u793e\u533a \u67e5\u770b\u8be5\u9898\u3002</p> \u89e3\u9898\u601d\u8def Go <pre><code>package main\n\nimport \"math\"\n\ntype TreeNode struct {\n    Val   int\n    Left  *TreeNode\n    Right *TreeNode\n}\n\nfunc maxPathSum(root *TreeNode) int {\n    ans := math.MinInt64\n    var dfs func(node *TreeNode) int\n    dfs = func(node *TreeNode) int {\n        if node == nil {\n            return 0\n        } else {\n            maxGainL := max(dfs(node.Left), 0)\n            maxGainR := max(dfs(node.Right), 0)\n            ans = max(ans, node.Val+maxGainL+maxGainR)\n            return node.Val + max(maxGainL, maxGainR)\n        }\n    }\n    dfs(root)\n    return ans\n}\n\nfunc max(x, y int) int {\n    if x &gt; y {\n        return x\n    } else {\n        return y\n    }\n}\n</code></pre>"},{"location":"dp/tree/#lc2538-\u6700\u5927\u5f00\u9500","title":"LC2538. \u6700\u5927\u5f00\u9500","text":"\u95ee\u9898\u63cf\u8ff0 <p>\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570 <code>1\u2264n\u22641e5</code> \u8868\u793a\u6709 n \u4e2a\u8282\u70b9\u7684\u65e0\u5411\u65e0\u6839\u6811\uff0c\u8282\u70b9\u7f16\u53f7\u4e3a <code>0</code> \u5230 <code>n-1</code> \u3002 \u7ed9\u4f60\u4e00\u4e2a\u957f\u5ea6\u4e3a <code>n-1</code> \u7684\u4e8c\u7ef4\u6574\u6570\u6570\u7ec4 <code>edges</code> \uff0c\u5176\u4e2d \\(edges[i] = [a_i, b_i]\\) \u8868\u793a\u6811\u4e2d\u8282\u70b9 \\(a_i\\) \u548c \\(b_i\\) \u4e4b\u95f4\u6709\u4e00\u6761\u8fb9\u3002 \u6bcf\u4e2a\u8282\u70b9\u90fd\u6709\u4e00\u4e2a\u4ef7\u503c\u3002\u7ed9\u4f60\u4e00\u4e2a\u957f\u5ea6\u4e3a <code>n</code> \u7684\u6574\u6570\u6570\u7ec4 <code>price</code> \uff0c\u5176\u4e2d <code>1\u2264price[i]\u22641e5</code> \u662f\u7b2c <code>i</code> \u4e2a\u8282\u70b9\u7684\u4ef7\u503c\u3002</p> <p>\u4e00\u6761\u8def\u5f84\u7684 \u4ef7\u503c\u548c \u662f\u8fd9\u6761\u8def\u5f84\u4e0a\u6240\u6709\u8282\u70b9\u7684\u4ef7\u503c\u4e4b\u548c\u3002 \u4f60\u53ef\u4ee5\u9009\u62e9\u6811\u4e2d\u4efb\u610f\u4e00\u4e2a\u8282\u70b9\u4f5c\u4e3a\u6839\u8282\u70b9 <code>root</code> \u3002\u9009\u62e9 <code>root</code> \u4e3a\u6839\u7684 \u5f00\u9500 \u662f\u4ee5 <code>root</code> \u4e3a\u8d77\u70b9\u7684\u6240\u6709\u8def\u5f84\u4e2d\uff0c\u4ef7\u503c\u548c \u6700\u5927\u7684\u4e00\u6761\u8def\u5f84\u4e0e\u6700\u5c0f\u7684\u4e00\u6761\u8def\u5f84\u7684\u5dee\u503c\u3002 \u8bf7\u4f60\u8fd4\u56de\u6240\u6709\u8282\u70b9\u4f5c\u4e3a\u6839\u8282\u70b9\u7684\u9009\u62e9\u4e2d\uff0c\u6700\u5927 \u7684 \u5f00\u9500 \u4e3a\u591a\u5c11\u3002</p> <p>\u5728 LeetCode\u4e3b\u7ad9 \u6216 \u529b\u6263\u4e2d\u6587\u793e\u533a \u67e5\u770b\u8be5\u9898\u3002</p> \u89e3\u9898\u601d\u8def <p>\u65b9\u6cd5\u4e00\uff1a\u6362\u6839 DP</p> <p>\u65b9\u6cd5\u4e8c\uff1a\u6811\u5f62 DP</p> <p>\u95ee\u9898\u8f6c\u5316\u4e3a\u53bb\u6389\u4e00\u4e2a\u53f6\u5b50\uff08\u5ea6\u4e3a 1\uff09\u8282\u70b9\u7684\u6700\u5927\u8def\u5f84\u548c\u3002</p> Go <pre><code>package main\n\nfunc maxOutput(n int, edges [][]int, price []int) int64 {\n    g := make([][]int, n)\n    for _, e := range edges {\n        x, y := e[0], e[1]\n        g[x] = append(g[x], y)\n        g[y] = append(g[y], x)\n    }\n    ans := 0\n    // \u8fd4\u56de\u5b50\u6811\u5e26\u53f6\u5b50\u8282\u70b9\u7684\u6700\u5927\u8def\u5f84\u548c\u3001\u4e0d\u5e26\u53f6\u5b50\u8282\u70b9\u7684\u6700\u5927\u8def\u5f84\u548c\n    var dfs func(x, fa int) (int, int)\n    dfs = func(x, fa int) (int, int) {\n        p := price[x]\n        maxS1, maxS2 := p, 0\n        for _, y := range g[x] {\n            if y != fa {\n                s1, s2 := dfs(y, x)\n                ans = max(ans, max(maxS1+s2, maxS2+s1))\n                maxS1 = max(maxS1, s1+p)\n                maxS2 = max(maxS2, s2+p)\n            }\n        }\n        return maxS1, maxS2\n    }\n    dfs(0, -1)\n    return int64(ans)\n}\n\nfunc max(x, y int) int {\n    if x &gt; y {\n        return x\n    } else {\n        return y\n    }\n}\n</code></pre>"},{"location":"dp/tree/root-changing/","title":"\u6362\u6839 DP","text":""},{"location":"dp/tree/root-changing/#cf219d-choosing-capital-for-treeland","title":"CF219D. Choosing Capital for Treeland","text":"\u95ee\u9898\u63cf\u8ff0 <p>\u8f93\u5165 \\(n(2\u2264n\u22642e5)\\) \u548c \\(n-1\\) \u6761\u8fb9 \\(v \\quad w\\)\uff0c\u8868\u793a\u4e00\u6761 \\(v \\to w\\) \u7684\u6709\u5411\u8fb9\uff08\u8282\u70b9\u7f16\u53f7\u4ece \\(1\\) \u5f00\u59cb\uff09\u3002 \u4fdd\u8bc1\u8f93\u5165\u6784\u6210\u4e00\u68f5\u6811\u3002 \u4f60\u53ef\u4ee5\u628a\u8fb9\u53cd\u5411\uff0c\u5373 \\(v \\to w\\) \u6539\u6210 \\(w \\to v\\)\u3002 \u5b9a\u4e49 \\(f(x)\\) \u8868\u793a\u4ee5 \\(x\\) \u4e3a\u6839\u65f6\uff0c\u8981\u8ba9 \\(x\\) \u80fd\u591f\u5230\u8fbe\u4efb\u610f\u70b9\uff0c\u9700\u8981\u53cd\u5411\u7684\u8fb9\u7684\u6570\u91cf\u3002 \u7b2c\u4e00\u884c\u8f93\u51fa \\(min(f(x))\\)\uff0c\u7b2c\u4e8c\u884c\u5347\u5e8f\u8f93\u51fa\u6240\u6709\u7b49\u4e8e \\(min(f(x))\\) \u7684\u8282\u70b9\u7f16\u53f7\u3002</p> <p>\u5728 Codeforces \u6216 \u6d1b\u8c37 \u67e5\u770b\u8be5\u9898\u3002</p> \u89e3\u9898\u601d\u8def <p>\u5148\u901a\u8fc7 DFS \u8ba1\u7b97\u51fa\u4ee5 \\(1\\) \u4e3a\u6839\u7684\u53cd\u5411\u8fb9\u6570\u91cf\u3002 \u7136\u540e\u8fdb\u884c\u6362\u6839 DP\uff0c\u5047\u8bbe\u4ee5 \\(x\\) \u4e3a\u6839\u7684\u53cd\u5411\u8fb9\u6570\u91cf\u4e3a \\(n\\) \uff0c\u8003\u8651\u4e0e \\(x\\) \u76f8\u8fde\u7684\u8282\u70b9 \\(y\\) \uff1a</p> <ol> <li>\u5982\u679c \\(x \\to y\\) \uff0c\u5219\u4ee5 \\(y\\) \u4e3a\u6839\u7684\u53cd\u5411\u8fb9\u6570\u91cf\u4e3a \\(n+1\\) \uff1b</li> <li>\u5982\u679c \\(x \\gets y\\) \uff0c\u5219\u4ee5 \\(y\\) \u4e3a\u6839\u7684\u53cd\u5411\u8fb9\u6570\u91cf\u4e3a \\(n-1\\) \u3002</li> </ol> GoJava <pre><code>package main\n\nimport (\n    \"bufio\"\n    . \"fmt\"\n    \"os\"\n    \"sort\"\n)\n\nfunc main() {\n    in := bufio.NewReader(os.Stdin)\n    out := bufio.NewWriter(os.Stdout)\n    defer out.Flush()\n\n    var n, v, w int\n    Fscan(in, &amp;n)\n    ug := make([][]int, n+1)\n    for ; n &gt; 1; n-- {\n        Fscan(in, &amp;v, &amp;w)\n        ug[v] = append(ug[v], w&lt;&lt;1)   // \u6700\u4f4e\u4f4d 0 \u8868\u793a\u6b63\u5411\n        ug[w] = append(ug[w], v&lt;&lt;1|1) // \u6700\u4f4e\u4f4d 1 \u8868\u793a\u53cd\u5411\n    }\n\n    // \u7b2c\u4e00\u904dDFS\u8ba1\u7b97\u4ee5\u8282\u70b91\u4e3a\u6839\u65f6\uff0c\u9700\u8981\u53cd\u5411\u7684\u8fb9\u7684\u6570\u91cf\n    var dfs1 func(x, fa int) int\n    dfs1 = func(x, fa int) (c int) {\n        for _, y := range ug[x] {\n            if y&gt;&gt;1 != fa {\n                c += y&amp;1 + dfs1(y&gt;&gt;1, x)\n            }\n        }\n        return\n    }\n    min := dfs1(1, 0)\n\n    // \u7b2c\u4e8c\u904dDFS\u901a\u8fc7\u6362\u6839DP\u8ba1\u7b97\u6bcf\u4e2a\u8282\u70b9\u4e3a\u6839\u65f6\uff0c\u9700\u8981\u53cd\u5411\u7684\u8fb9\u7684\u6570\u91cf\n    var xs []int\n    var dfs func(x, fa, c int)\n    dfs = func(x, fa, c int) {\n        if c &lt; min {\n            xs, min = []int{x}, c\n        } else if c == min {\n            xs = append(xs, x)\n        }\n        for _, y := range ug[x] {\n            if y&gt;&gt;1 != fa {\n                // \u5982\u679cx-&gt;y\u4e3a\u6b63\u5411\uff0c\u5219\u4ee5\u8282\u70b9y\u4e3a\u6839\u65f6\uff0c\u9700\u8981\u53cd\u5411\u7684\u8fb9\u7684\u6570\u91cf+1\uff1b\u5982\u679c\u4e3a\u53cd\u5411\u5219-1\n                dfs(y&gt;&gt;1, x, c-(y&amp;1)&lt;&lt;1+1)\n            }\n        }\n    }\n    dfs(1, 0, min)\n\n    sort.Ints(xs)\n    Fprintln(out, min)\n    for _, x := range xs {\n        Fprint(out, x, \" \")\n    }\n}\n</code></pre> <pre><code>import java.io.*;\nimport java.util.*;\n\npublic class Main {\n\n    static BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n    static PrintWriter out = new PrintWriter(System.out);\n\n    static List&lt;Integer&gt;[] ug;\n    static List&lt;Integer&gt; xs = new ArrayList&lt;&gt;();\n    static int min;\n\n    public static void main(String[] args) throws Exception {\n        int n = Integer.parseInt(in.readLine());\n        ug = new List[n + 1];\n        for (int i = 1; i &lt;= n; i++) {\n            ug[i] = new ArrayList&lt;&gt;();\n        }\n        for (; n &gt; 1; n--) {\n            StringTokenizer tokenizer = new StringTokenizer(in.readLine());\n            int v = Integer.parseInt(tokenizer.nextToken());\n            int w = Integer.parseInt(tokenizer.nextToken());\n            ug[v].add(w &lt;&lt; 1);     // \u6700\u4f4e\u4f4d 0 \u8868\u793a\u6b63\u5411\n            ug[w].add(v &lt;&lt; 1 | 1); // \u6700\u4f4e\u4f4d 1 \u8868\u793a\u53cd\u5411\n        }\n        // \u7b2c\u4e00\u904dDFS\u8ba1\u7b97\u4ee5\u8282\u70b91\u4e3a\u6839\u65f6\uff0c\u9700\u8981\u53cd\u5411\u7684\u8fb9\u7684\u6570\u91cf\n        min = dfs1(1, 0);\n        // \u7b2c\u4e8c\u904dDFS\u901a\u8fc7\u6362\u6839DP\u8ba1\u7b97\u6bcf\u4e2a\u8282\u70b9\u4e3a\u6839\u65f6\uff0c\u9700\u8981\u53cd\u5411\u7684\u8fb9\u7684\u6570\u91cf\n        dfs(1, 0, min);\n        Collections.sort(xs);\n        out.println(min);\n        for (int x : xs) {\n            out.printf(\"%d \", x);\n        }\n        out.flush();\n        out.close();\n        in.close();\n    }\n\n    public static int dfs1(int x, int fa) {\n        int count = 0;\n        for (int y : ug[x]) {\n            if ((y &gt;&gt; 1) != fa) {\n                count += (y &amp; 1) + dfs1(y &gt;&gt; 1, x);\n            }\n        }\n        return count;\n    }\n\n    public static void dfs(int x, int fa, int c) {\n        if (c &lt; min) {\n            min = c;\n            xs.clear();\n            xs.add(x);\n        } else if (c == min) {\n            xs.add(x);\n        }\n        for (int y : ug[x]) {\n            if ((y &gt;&gt; 1) != fa) {\n                // \u5982\u679cx-&gt;y\u4e3a\u6b63\u5411\uff0c\u5219\u4ee5\u8282\u70b9y\u4e3a\u6839\u65f6\uff0c\u9700\u8981\u53cd\u5411\u7684\u8fb9\u7684\u6570\u91cf+1\uff1b\u5982\u679c\u4e3a\u53cd\u5411\u5219-1\n                dfs(y &gt;&gt; 1, x, c - ((y &amp; 1) &lt;&lt; 1) + 1);\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"dp/tree/root-changing/#cf337d-book-of-evil","title":"CF337D. Book of Evil","text":"\u95ee\u9898\u63cf\u8ff0 <p>\u8f93\u5165 \\(n\\ m(1\u2264m\u2264n\u22641e5)\\ d(0\u2264d\u2264n-1)\\) \u8868\u793a\u4e00\u68f5 \\(n\\) \u4e2a\u8282\u70b9\u7684\u6811\uff0c\u5176\u4e2d \\(m\\) \u4e2a\u8282\u70b9\u6709\u602a\u7269\uff0c\u8fd9\u4e9b\u602a\u7269\u662f\u7531\u4e00\u4e2a\u4f20\u9001\u95e8\u751f\u6210\u7684\uff0c\u4f20\u9001\u95e8\u4e0e\u4efb\u610f\u602a\u7269\u7684\u8ddd\u79bb\u4e0d\u8d85\u8fc7 \\(d\\)\u3002 \u7136\u540e\u8f93\u5165 \\(m\\) \u4e2a\u4e92\u4e0d\u76f8\u540c\u7684\u6570\uff0c\u8868\u793a\u602a\u7269\u6240\u5728\u8282\u70b9\u7f16\u53f7\uff08\u4ece \\(1\\) \u5f00\u59cb\uff09\u3002 \u7136\u540e\u8f93\u5165 \\(n-1\\) \u884c\uff0c\u6bcf\u884c\u4e24\u4e2a\u8282\u70b9\u7f16\u53f7\uff0c\u8868\u793a\u6811\u7684\u8fb9\u3002 \u8f93\u51fa\u53ef\u80fd\u5b58\u5728\u4f20\u9001\u95e8\u7684\u8282\u70b9\u7684\u4e2a\u6570\u3002\u6ce8\u610f\u4f20\u9001\u95e8\u53ea\u6709\u4e00\u4e2a\u3002</p> <p>\u5728 Codeforces \u6216 \u6d1b\u8c37 \u67e5\u770b\u8be5\u9898\u3002</p> \u89e3\u9898\u601d\u8def GoJava <pre><code>package main\n\nimport (\n    \"bufio\"\n    . \"fmt\"\n    \"os\"\n)\n\nfunc main() {\n    in := bufio.NewReader(os.Stdin)\n    out := bufio.NewWriter(os.Stdout)\n    defer out.Flush()\n\n    var n, m, d, u, v int\n    Fscan(in, &amp;n, &amp;m, &amp;d)\n    monster := make([]bool, n+1)\n    for i := 0; i &lt; m; i++ {\n        Fscan(in, &amp;u)\n        monster[u] = true\n    }\n    ug := make([][]int, n+1)\n    for i := 1; i &lt; n; i++ {\n        Fscan(in, &amp;u, &amp;v)\n        ug[u] = append(ug[u], v)\n        ug[v] = append(ug[v], u)\n    }\n\n    const inf = int(-1e9)\n\n    // \u7b2c\u4e00\u904dDFS\u4ee5\u8282\u70b91\u4e3a\u6839\uff0c\u8ba1\u7b97\u6bcf\u4e2a\u8282\u70b9\u4e0e\u5176\u5b50\u6811\u4e2d\u7684\u6700\u8fdc\u602a\u7269\u8ddd\u79bb\u3001\u6b21\u8fdc\u602a\u7269\u8ddd\u79bb\u53ca\u6700\u8fdc\u602a\u7269\u8ddd\u79bb\u6240\u5728\u5b50\u6811\u8282\u70b9\n    type tuple struct{ f, s, o int }\n    dis := make([]tuple, n+1)\n    var dfs1 func(x, fa int) int\n    dfs1 = func(x, fa int) int {\n        // \u8ddd\u79bb\u521d\u59cb\u5316\u4e3ainf\uff0c\u65b9\u4fbf\u5904\u7406\u5b50\u6811\u4e2d\u6ca1\u6709\u602a\u7269\u7684\u60c5\u51b5\n        f, s, o := inf, inf, 0\n        for _, y := range ug[x] {\n            if y != fa {\n                if yf := dfs1(y, x) + 1; yf &gt; f {\n                    f, s, o = yf, f, y\n                } else if yf &gt; s {\n                    s = yf\n                }\n            }\n        }\n        dis[x] = tuple{f, s, o}\n        if f &lt; 0 &amp;&amp; monster[x] {\n            return 0\n        } else {\n            return f\n        }\n    }\n    dfs1(1, 0)\n\n    // \u7b2c\u4e8c\u904dDFS\u901a\u8fc7\u6362\u6839DP\u8ba1\u7b97\u6bcf\u4e2a\u8282\u70b9\u4e3a\u6839\u65f6\uff0c\u4e0e\u5176\u5b50\u6811\u4e2d\u7684\u6700\u8fdc\u602a\u7269\u8ddd\u79bb\uff0c\u5224\u65ad\u662f\u5426\u53ef\u4ee5\u4f5c\u4e3a\u4f20\u9001\u95e8\n    cnt := 0\n    var dfs func(x, fa, df int)\n    dfs = func(x, fa, df int) {\n        if df &lt;= d {\n            dx := dis[x]\n            if dx.f &lt;= d {\n                cnt++\n            }\n            if df &lt; 0 &amp;&amp; monster[x] {\n                df = 0\n            }\n            for _, y := range ug[x] {\n                if y != fa {\n                    if y == dx.o {\n                        dfs(y, x, max(df, dx.s)+1)\n                    } else {\n                        dfs(y, x, max(df, dx.f)+1)\n                    }\n                }\n            }\n        }\n    }\n    dfs(1, 0, inf)\n    Fprintln(out, cnt)\n}\n\nfunc max(x, y int) int {\n    if x &gt; y {\n        return x\n    } else {\n        return y\n    }\n}\n</code></pre> <pre><code>import java.io.*;\nimport java.util.*;\n\npublic class Main {\n\n    static BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n\n    static final int inf = (int) -1e9;\n\n    static int d;\n    static boolean[] monster;\n    static List&lt;Integer&gt;[] ug;\n    static Tuple[] dis;\n    static int cnt;\n\n    public static void main(String[] args) throws Exception {\n        StringTokenizer nmd = new StringTokenizer(in.readLine());\n        int n = Integer.parseInt(nmd.nextToken());\n        int m = Integer.parseInt(nmd.nextToken());\n        d = Integer.parseInt(nmd.nextToken());\n        monster = new boolean[n + 1];\n        StringTokenizer ms = new StringTokenizer(in.readLine());\n        for (int i = 0; i &lt; m; i++) {\n            int o = Integer.parseInt(ms.nextToken());\n            monster[o] = true;\n        }\n        ug = new List[n + 1];\n        for (int i = 1; i &lt;= n; i++) {\n            ug[i] = new ArrayList&lt;&gt;();\n        }\n        for (int i = 1; i &lt; n; i++) {\n            StringTokenizer uv = new StringTokenizer(in.readLine());\n            int u = Integer.parseInt(uv.nextToken());\n            int v = Integer.parseInt(uv.nextToken());\n            ug[u].add(v);\n            ug[v].add(u);\n        }\n        dis = new Tuple[n + 1];\n        // \u7b2c\u4e00\u904dDFS\u4ee5\u8282\u70b91\u4e3a\u6839\uff0c\u8ba1\u7b97\u6bcf\u4e2a\u8282\u70b9\u4e0e\u5176\u5b50\u6811\u4e2d\u7684\u6700\u8fdc\u602a\u7269\u8ddd\u79bb\u3001\u6b21\u8fdc\u602a\u7269\u8ddd\u79bb\u53ca\u6700\u8fdc\u602a\u7269\u8ddd\u79bb\u6240\u5728\u5b50\u6811\u8282\u70b9\n        dfs1(1, 0);\n        // \u7b2c\u4e8c\u904dDFS\u901a\u8fc7\u6362\u6839DP\u8ba1\u7b97\u6bcf\u4e2a\u8282\u70b9\u4e3a\u6839\u65f6\uff0c\u4e0e\u5176\u5b50\u6811\u4e2d\u7684\u6700\u8fdc\u602a\u7269\u8ddd\u79bb\uff0c\u5224\u65ad\u662f\u5426\u53ef\u4ee5\u4f5c\u4e3a\u4f20\u9001\u95e8\n        dfs(1, 0, inf);\n        System.out.println(cnt);\n        in.close();\n    }\n\n    public static int dfs1(int x, int fa) {\n        // \u8ddd\u79bb\u521d\u59cb\u5316\u4e3ainf\uff0c\u65b9\u4fbf\u5904\u7406\u5b50\u6811\u4e2d\u6ca1\u6709\u602a\u7269\u7684\u60c5\u51b5\n        int f = inf, s = inf, o = 0;\n        for (int y : ug[x]) {\n            if (y != fa) {\n                int yf = dfs1(y, x) + 1;\n                if (yf &gt; f) {\n                    o = y;\n                    s = f;\n                    f = yf;\n                } else if (yf &gt; s) {\n                    s = yf;\n                }\n            }\n        }\n        dis[x] = new Tuple(f, s, o);\n        if (f &lt; 0 &amp;&amp; monster[x]) {\n            return 0;\n        } else {\n            return f;\n        }\n    }\n\n    public static void dfs(int x, int fa, int df) {\n        if (df &lt;= d) {\n            Tuple dx = dis[x];\n            if (dx.f &lt;= d) {\n                cnt++;\n            }\n            if (df &lt; 0 &amp;&amp; monster[x]) {\n                df = 0;\n            }\n            for (int y : ug[x]) {\n                if (y != fa) {\n                    if (y == dx.o) {\n                        dfs(y, x, Math.max(df, dx.s) + 1);\n                    } else {\n                        dfs(y, x, Math.max(df, dx.f) + 1);\n                    }\n                }\n            }\n        }\n    }\n\n    private static class Tuple {\n        int f; // \u5b50\u6811\u4e2d\u6700\u8fdc\u602a\u7269\u7684\u8ddd\u79bb\n        int s; // \u5b50\u6811\u4e2d\u6b21\u8fdc\u602a\u7269\u7684\u8ddd\u79bb\n        int o; // \u6700\u8fdc\u602a\u7269\u8ddd\u79bb\u6240\u5728\u5b50\u6811\u8282\u70b9\n\n        Tuple(int f, int s, int o) {\n            this.f = f;\n            this.s = s;\n            this.o = o;\n        }\n    }\n}\n</code></pre>"},{"location":"dp/tree/root-changing/#lc2538-\u6700\u5927\u5f00\u9500","title":"LC2538. \u6700\u5927\u5f00\u9500","text":"\u95ee\u9898\u63cf\u8ff0 <p>\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570 <code>1\u2264n\u22641e5</code> \u8868\u793a\u6709 n \u4e2a\u8282\u70b9\u7684\u65e0\u5411\u65e0\u6839\u6811\uff0c\u8282\u70b9\u7f16\u53f7\u4e3a <code>0</code> \u5230 <code>n-1</code> \u3002 \u7ed9\u4f60\u4e00\u4e2a\u957f\u5ea6\u4e3a <code>n-1</code> \u7684\u4e8c\u7ef4\u6574\u6570\u6570\u7ec4 <code>edges</code> \uff0c\u5176\u4e2d \\(edges[i] = [a_i, b_i]\\) \u8868\u793a\u6811\u4e2d\u8282\u70b9 \\(a_i\\) \u548c \\(b_i\\) \u4e4b\u95f4\u6709\u4e00\u6761\u8fb9\u3002 \u6bcf\u4e2a\u8282\u70b9\u90fd\u6709\u4e00\u4e2a\u4ef7\u503c\u3002\u7ed9\u4f60\u4e00\u4e2a\u957f\u5ea6\u4e3a <code>n</code> \u7684\u6574\u6570\u6570\u7ec4 <code>price</code> \uff0c\u5176\u4e2d <code>1\u2264price[i]\u22641e5</code> \u662f\u7b2c <code>i</code> \u4e2a\u8282\u70b9\u7684\u4ef7\u503c\u3002</p> <p>\u4e00\u6761\u8def\u5f84\u7684 \u4ef7\u503c\u548c \u662f\u8fd9\u6761\u8def\u5f84\u4e0a\u6240\u6709\u8282\u70b9\u7684\u4ef7\u503c\u4e4b\u548c\u3002 \u4f60\u53ef\u4ee5\u9009\u62e9\u6811\u4e2d\u4efb\u610f\u4e00\u4e2a\u8282\u70b9\u4f5c\u4e3a\u6839\u8282\u70b9 <code>root</code> \u3002\u9009\u62e9 <code>root</code> \u4e3a\u6839\u7684 \u5f00\u9500 \u662f\u4ee5 <code>root</code> \u4e3a\u8d77\u70b9\u7684\u6240\u6709\u8def\u5f84\u4e2d\uff0c\u4ef7\u503c\u548c \u6700\u5927\u7684\u4e00\u6761\u8def\u5f84\u4e0e\u6700\u5c0f\u7684\u4e00\u6761\u8def\u5f84\u7684\u5dee\u503c\u3002 \u8bf7\u4f60\u8fd4\u56de\u6240\u6709\u8282\u70b9\u4f5c\u4e3a\u6839\u8282\u70b9\u7684\u9009\u62e9\u4e2d\uff0c\u6700\u5927 \u7684 \u5f00\u9500 \u4e3a\u591a\u5c11\u3002</p> <p>\u5728 LeetCode\u4e3b\u7ad9 \u6216 \u529b\u6263\u4e2d\u6587\u793e\u533a \u67e5\u770b\u8be5\u9898\u3002</p> \u89e3\u9898\u601d\u8def <p>\u65b9\u6cd5\u4e00\uff1a\u6811\u5f62 DP</p> <p>\u65b9\u6cd5\u4e8c\uff1a\u6362\u6839 DP</p> Go <pre><code>package main\n\nfunc maxOutput(n int, edges [][]int, price []int) int64 {\n    g := make([][]int, n)\n    for _, e := range edges {\n        x, y := e[0], e[1]\n        g[x] = append(g[x], y)\n        g[y] = append(g[y], x)\n    }\n    // \u7b2c\u4e00\u904dDFS\u4ee5\u8282\u70b90\u4e3a\u6839\uff0c\u8ba1\u7b97\u6bcf\u4e2a\u8282\u70b9\u5411\u4e0b\u7684\u6700\u5927\u5f00\u9500f\u3001\u6b21\u5927\u5f00\u9500s\u3001\u6700\u5927\u5f00\u9500\u6240\u5728\u5b50\u6811\u8282\u70b9o\n    type tuple struct{ f, s, o int }\n    values := make([]tuple, n)\n    var dfs0 func(x, fa int) int\n    dfs0 = func(x, fa int) int {\n        f, s, o := 0, 0, -1\n        for _, y := range g[x] {\n            if y != fa {\n                if yf := dfs0(y, x) + price[y]; yf &gt; f {\n                    f, s, o = yf, f, y\n                } else if yf &gt; s {\n                    s = yf\n                }\n            }\n        }\n        values[x] = tuple{f, s, o}\n        return f\n    }\n    ans := dfs0(0, -1)\n\n    // \u7b2c\u4e8c\u904dDFS\u901a\u8fc7\u6362\u6839DP\u8ba1\u7b97\u4ee5\u6bcf\u4e2a\u8282\u70b9\u4e3a\u6839\u7684\u6700\u5927\u5f00\u9500\n    // vf\u8868\u793a\u8282\u70b9x\u5f80\u4e0a\u7684\u6700\u5927\u5f00\u9500\n    var dfs func(x, fa, vf int)\n    dfs = func(x, fa, vf int) {\n        ans = max(ans, max(vf, values[x].f))\n        for _, y := range g[x] {\n            if y != fa {\n                if y == values[x].o {\n                    dfs(y, x, max(vf, values[x].s)+price[x])\n                } else {\n                    dfs(y, x, max(vf, values[x].f)+price[x])\n                }\n            }\n        }\n    }\n    dfs(0, -1, 0)\n    return int64(ans)\n}\n\nfunc max(x, y int) int {\n    if x &gt; y {\n        return x\n    } else {\n        return y\n    }\n}\n</code></pre>"},{"location":"dp/tree/root-changing/#lc2603-\u6536\u96c6\u6811\u4e2d\u91d1\u5e01","title":"LC2603. \u6536\u96c6\u6811\u4e2d\u91d1\u5e01","text":"\u95ee\u9898\u63cf\u8ff0 <p>\u6709\u4e00\u4e2a <code>1\u2264n\u22643e4</code> \u4e2a\u8282\u70b9\u7684\u65e0\u5411\u65e0\u6839\u6811\uff0c\u8282\u70b9\u7f16\u53f7\u4ece <code>0</code> \u5230 <code>n - 1</code> \u3002 \u7ed9\u4f60\u4e00\u4e2a\u957f\u5ea6\u4e3a <code>n</code> \u7684\u6570\u7ec4 <code>coins</code> \uff0c\u5176\u4e2d <code>coins[i]</code> \u7b49\u4e8e <code>0</code> \u6216 <code>1</code> \uff0c<code>1</code> \u8868\u793a\u8282\u70b9 <code>i</code> \u5904\u6709\u4e00\u4e2a\u91d1\u5e01\u3002 \u7ed9\u4f60\u4e00\u4e2a\u957f\u5ea6\u4e3a <code>n - 1</code> \u7684\u4e8c\u7ef4\u6574\u6570\u6570\u7ec4 <code>edges</code> \uff0c\u5176\u4e2d <code>edges[i]</code> = [\\(a_i\\), \\(b_i\\)] \u8868\u793a\u6811\u4e2d\u8282\u70b9 \\(a_i\\) \u548c \\(b_i\\) \u4e4b\u95f4\u6709\u4e00\u6761\u8fb9\u3002 \u4e00\u5f00\u59cb\uff0c\u4f60\u9700\u8981\u9009\u62e9\u6811\u4e2d\u4efb\u610f\u4e00\u4e2a\u8282\u70b9\u51fa\u53d1\u3002\u4f60\u53ef\u4ee5\u6267\u884c\u4e0b\u8ff0\u64cd\u4f5c\u4efb\u610f\u6b21\uff1a</p> <ul> <li>\u6536\u96c6\u4e0e\u5f53\u524d\u8282\u70b9\u8ddd\u79bb <code>\u22642</code> \u7684\u6240\u6709\u91d1\u5e01\uff0c\u6216\u8005</li> <li>\u79fb\u52a8\u5230\u6811\u4e2d\u4e00\u4e2a\u76f8\u90bb\u8282\u70b9\u3002</li> </ul> <p>\u4f60\u9700\u8981\u6536\u96c6\u6811\u4e2d\u6240\u6709\u7684\u91d1\u5e01\uff0c\u5e76\u56de\u5230\u51fa\u53d1\u8282\u70b9\uff0c\u8bf7\u4f60\u8fd4\u56de\u6700\u5c11\u7ecf\u8fc7\u7684\u8fb9\u6570\u3002\u5982\u679c\u4f60\u591a\u6b21\u7ecf\u8fc7\u4e00\u6761\u8fb9\uff0c\u6bcf\u4e00\u6b21\u7ecf\u8fc7\u90fd\u4f1a\u7ed9\u7b54\u6848\u52a0\u4e00\u3002</p> <p>\u5728 LeetCode\u4e3b\u7ad9 \u6216 \u529b\u6263\u4e2d\u6587\u793e\u533a \u67e5\u770b\u8be5\u9898\u3002</p> \u89e3\u9898\u601d\u8def <p>\u65b9\u6cd5\u4e00\uff1a\u62d3\u6251\u6392\u5e8f</p> <p>\u65b9\u6cd5\u4e8c\uff1a\u6362\u6839 DP</p> <p>\u6362\u6839 DP \u7684\u601d\u8def\u4e0e CF337D. Book of Evil \u7c7b\u4f3c\u3002</p> Go <pre><code>package main\n\nfunc collectTheCoins(coins []int, edges [][]int) int {\n    n := len(coins)\n    ug := make([][]int, n)\n    for _, e := range edges {\n        x, y := e[0], e[1]\n        ug[x] = append(ug[x], y)\n        ug[y] = append(ug[y], x)\n    }\n\n    const inf = int(-1e8)\n\n    // \u7b2c\u4e00\u904dDFS\u4ee5\u8282\u70b90\u4e3a\u6839\uff0c\u8ba1\u7b97\u6bcf\u4e2a\u8282\u70b9\u4e0e\u5176\u5b50\u6811\u4e2d\u7684\u6700\u8fdc\u91d1\u5e01\u8ddd\u79bbf\u3001\u6b21\u8fdc\u91d1\u5e01\u8ddd\u79bbs\u3001\u6700\u8fdc\u91d1\u5e01\u6240\u5728\u5b50\u6811\u8282\u70b9o\n    // \u540c\u65f6\u8ba1\u7b97\u51fa\u4ece\u8282\u70b90\u51fa\u53d1\uff0c\u6536\u96c6\u6240\u6709\u91d1\u5e01\u9700\u8981\u7ecf\u8fc7\u7684\u5355\u7a0b\u8fb9\u6570\uff08\u4e0d\u8fd4\u56de\u51fa\u53d1\u8282\u70b9\uff09\n    type tuple struct{ f, s, o int }\n    dis := make([]tuple, n)\n    var dfs0 func(x, fa int) (int, e int)\n    dfs0 = func(x, fa int) (int, e int) {\n        // \u8ddd\u79bb\u521d\u59cb\u5316\u4e3ainf\uff0c\u65b9\u4fbf\u5904\u7406\u5b50\u6811\u4e2d\u6ca1\u6709\u91d1\u5e01\u7684\u60c5\u51b5\n        f, s, o := inf, inf, -1\n        for _, y := range ug[x] {\n            if y != fa {\n                yf, ye := dfs0(y, x)\n                e += ye\n                if yf++; yf &gt; 2 {\n                    e++ // \u9700\u8981\u7ecf\u8fc7x-y\u8fd9\u6761\u8fb9\n                }\n                if yf &gt; f {\n                    f, s, o = yf, f, y\n                } else if yf &gt; s {\n                    s = yf\n                }\n            }\n        }\n        dis[x] = tuple{f, s, o}\n        if f &lt; 0 &amp;&amp; coins[x] == 1 {\n            f = 0\n        }\n        return f, e\n    }\n    _, ans := dfs0(0, -1)\n\n    // \u7b2c\u4e8c\u904dDFS\u901a\u8fc7\u6362\u6839DP\u8ba1\u7b97\u4ece\u6bcf\u4e2a\u8282\u70b9\u51fa\u53d1\u6536\u96c6\u6240\u6709\u91d1\u5e01\u9700\u8981\u7ecf\u8fc7\u7684\u5355\u7a0b\u8fb9\u6570\uff08\u4e0d\u8fd4\u56de\u51fa\u53d1\u8282\u70b9\uff09\n    // d\u8868\u793a\u8282\u70b9x\u5f80\u4e0a\u7684\u6700\u8fdc\u91d1\u5e01\u8ddd\u79bb\n    var dfs func(x, fa, d, e int)\n    dfs = func(x, fa, d, e int) {\n        if ans = min(ans, e); ans == 0 {\n            return // \u526a\u679d\n        }\n        if d &lt; 0 &amp;&amp; coins[x] == 1 {\n            d = 0\n        }\n        for _, y := range ug[x] {\n            if y != fa &amp;&amp; dis[y].f &gt;= 2 { // \u4ecex\u8282\u70b9\u51fa\u53d1\u9700\u8981\u7ecf\u8fc7x-y\u8fd9\u6761\u8fb9\n                var yd int\n                if y == dis[x].o {\n                    yd = max(d, dis[x].s) + 1\n                } else {\n                    yd = max(d, dis[x].f) + 1\n                }\n                if yd &lt;= 2 {\n                    dfs(y, x, yd, e-1) // \u4ecey\u8282\u70b9\u51fa\u53d1\u4e0d\u9700\u8981\u7ecf\u8fc7x-y\u8fd9\u6761\u8fb9\n                }\n            }\n        }\n    }\n    dfs(0, -1, inf, ans)\n    return ans &lt;&lt; 1\n}\n\nfunc min(x, y int) int {\n    if x &lt; y {\n        return x\n    } else {\n        return y\n    }\n}\n\nfunc max(x, y int) int {\n    if x &gt; y {\n        return x\n    } else {\n        return y\n    }\n}\n</code></pre>"},{"location":"ds/bit/","title":"\u6811\u72b6\u6570\u7ec4","text":""},{"location":"ds/bit/#cf652d-nested-segments","title":"CF652D. Nested Segments","text":"\u95ee\u9898\u63cf\u8ff0 <p>\u7b2c\u4e00\u884c\u8f93\u5165\u6574\u6570 \\(n (1\u2009\u2264\u2009n\u2009\u2264\u20092e5)\\) \uff0c\u63a5\u4e0b\u6765 \\(n\\) \u884c\u8f93\u5165 \\(n\\) \u4e2a\u95ed\u533a\u95f4\uff0c\u533a\u95f4\u5de6\u53f3\u7aef\u70b9\u8303\u56f4\u5728 \\([-1e9,1e9]\\)\uff0c\u6240\u6709\u533a\u95f4\u7aef\u70b9\u4e92\u4e0d\u76f8\u540c\u3002 \u5bf9\u4e8e\u6bcf\u4e2a\u533a\u95f4\uff0c\u8f93\u51fa\u5b83\u5305\u542b\u591a\u5c11\u4e2a\u5176\u5b83\u7684\u533a\u95f4\u3002</p> <p>\u5728 Codeforces \u6216 \u6d1b\u8c37 \u67e5\u770b\u8be5\u9898\u3002</p> \u89e3\u9898\u601d\u8def GoJava <pre><code>package main\n\nimport (\n    \"bufio\"\n    . \"fmt\"\n    \"os\"\n    \"sort\"\n)\n\nfunc main() {\n    in := bufio.NewReader(os.Stdin)\n    out := bufio.NewWriter(os.Stdout)\n    defer out.Flush()\n\n    var n, l, r int\n    Fscan(in, &amp;n)\n    type tuple struct{ l, r, i int }\n    arr := make([]tuple, n)\n    rs := make([]int, n)\n    for i := 0; i &lt; n; i++ {\n        Fscan(in, &amp;l, &amp;r)\n        arr[i] = tuple{l, r, i}\n        rs[i] = r\n    }\n\n    // \u6309\u7167\u5de6\u7aef\u70b9\u964d\u5e8f\u6392\u5e8f\n    sort.Slice(arr, func(i, j int) bool { return arr[i].l &gt; arr[j].l })\n\n    ans := make([]int, n)\n    // \u79bb\u6563\u5316\u6811\u72b6\u6570\u7ec4\u8ba1\u7b97\u524d\u5e8f\u6709\u591a\u5c11\u4e2a\u533a\u95f4\u53f3\u7aef\u70b9\u5c0f\u4e8e\u5f53\u524d\u533a\u95f4\u53f3\u7aef\u70b9\n    sort.Ints(rs)\n    t := make(BIT, n+1)\n    for _, lri := range arr {\n        x := sort.SearchInts(rs, lri.r)\n        ans[lri.i] = t.query(x)\n        t.update(x+1, 1)\n    }\n\n    for _, x := range ans {\n        Fprintln(out, x)\n    }\n}\n\n// \u6811\u72b6\u6570\u7ec4\ntype BIT []int\n\n// \u5355\u70b9\u66f4\u65b0\nfunc (t BIT) update(i, v int) {\n    for n := len(t); i &lt; n; i += i &amp; -i {\n        t[i] += v\n    }\n}\n\n// \u524d\u7f00\u67e5\u8be2 [1, i]\nfunc (t BIT) query(i int) (ans int) {\n    for ; i &gt; 0; i &amp;= i - 1 {\n        ans += t[i]\n    }\n    return\n}\n</code></pre> <pre><code>import java.io.*;\nimport java.util.*;\n\npublic class Main {\n\n    static BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n    static PrintWriter out = new PrintWriter(System.out);\n\n    public static void main(String[] args) throws Exception {\n        int n = Integer.parseInt(in.readLine());\n        int[] rs = new int[n];\n        int[][] arr = new int[n][];\n        for (int i = 0; i &lt; n; i++) {\n            StringTokenizer tokenizer = new StringTokenizer(in.readLine());\n            int l = Integer.parseInt(tokenizer.nextToken());\n            int r = Integer.parseInt(tokenizer.nextToken());\n            arr[i] = new int[] { l, r, i };\n            rs[i] = r;\n        }\n\n        // \u6309\u7167\u5de6\u7aef\u70b9\u964d\u5e8f\u6392\u5e8f\n        Arrays.sort(arr, (a, b) -&gt; Integer.compare(b[0], a[0]));\n\n        int[] ans = new int[n];\n        // \u79bb\u6563\u5316\u6811\u72b6\u6570\u7ec4\u8ba1\u7b97\u524d\u5e8f\u6709\u591a\u5c11\u4e2a\u533a\u95f4\u53f3\u7aef\u70b9\u5c0f\u4e8e\u5f53\u524d\u533a\u95f4\u53f3\u7aef\u70b9\n        Arrays.sort(rs);\n        BIT bit = new BIT(n + 1);\n        for (int[] lri : arr) {\n            int x = Arrays.binarySearch(rs, lri[1]);\n            ans[lri[2]] = bit.query(x);\n            bit.update(x + 1, 1);\n        }\n\n        for (int c : ans) {\n            out.println(c);\n        }\n        out.flush();\n        out.close();\n        in.close();\n    }\n\n    // \u6811\u72b6\u6570\u7ec4\n    private static class BIT {\n\n        int n;\n        int[] arr;\n\n        BIT(int n) {\n            this.n = n;\n            this.arr = new int[n];\n        }\n\n        // \u5355\u70b9\u66f4\u65b0\n        void update(int i, int v) {\n            for (; i &lt; n; i += (i &amp; -i)) {\n                arr[i] += v;\n            }\n        }\n\n        // \u524d\u7f00\u67e5\u8be2 [1, i]\n        int query(int i) {\n            int sum = 0;\n            for (; i &gt; 0; i &amp;= (i - 1)) {\n                sum += arr[i];\n            }\n            return sum;\n        }\n    }\n}\n</code></pre>"},{"location":"ds/bit/#lc1626-\u65e0\u77db\u76fe\u7684\u6700\u4f73\u7403\u961f","title":"LC1626. \u65e0\u77db\u76fe\u7684\u6700\u4f73\u7403\u961f","text":"\u95ee\u9898\u63cf\u8ff0 <p>\u5047\u8bbe\u4f60\u662f\u7403\u961f\u7684\u7ecf\u7406\uff0c\u4f60\u60f3\u7ec4\u5408\u4e00\u652f\u603b\u4f53\u5f97\u5206\u6700\u9ad8\u7684\u7403\u961f\u3002\u7403\u961f\u7684\u5f97\u5206\u662f\u7403\u961f\u4e2d\u6240\u6709\u7403\u5458\u7684\u5206\u6570\u603b\u548c\u3002 \u7403\u961f\u4e2d\u7684\u77db\u76fe\u4f1a\u9650\u5236\u7403\u5458\u7684\u53d1\u6325\uff0c\u6240\u4ee5\u5fc5\u987b\u9009\u51fa\u4e00\u652f \u6ca1\u6709\u77db\u76fe \u7684\u7403\u961f\u3002\u5982\u679c\u4e00\u540d\u5e74\u9f84\u8f83\u5c0f\u7403\u5458\u7684\u5206\u6570 \u4e25\u683c\u5927\u4e8e \u4e00\u540d\u5e74\u9f84\u8f83\u5927\u7684\u7403\u5458\uff0c\u5219\u5b58\u5728\u77db\u76fe\u3002\u540c\u9f84\u7403\u5458\u4e4b\u95f4\u4e0d\u4f1a\u53d1\u751f\u77db\u76fe\u3002 \u7ed9\u4f60\u4e24\u4e2a\u957f\u5ea6\u4e3a <code>n(1\u2264n\u22641e3)</code> \u7684\u6570\u7ec4 <code>scores</code> \u548c <code>ages</code>\uff0c\u5176\u4e2d\u6bcf\u7ec4 <code>scores[i]([1,1e6])</code> \u548c <code>ages[i]([1,1e3])</code> \u8868\u793a\u7b2c <code>i</code> \u540d\u7403\u5458\u7684\u5206\u6570\u548c\u5e74\u9f84\u3002\u8bf7\u4f60\u8fd4\u56de \u6240\u6709\u53ef\u80fd\u7684\u65e0\u77db\u76fe\u7403\u961f\u4e2d\u5f97\u5206\u6700\u9ad8\u90a3\u652f\u7684\u5206\u6570 \u3002</p> <p>\u5728 LeetCode\u4e3b\u7ad9 \u6216 \u529b\u6263\u4e2d\u6587\u793e\u533a \u67e5\u770b\u8be5\u9898\u3002</p> \u89e3\u9898\u601d\u8def <p>\u65b9\u6cd5\u4e00\uff1a\u52a8\u6001\u89c4\u5212</p> Go <pre><code>package main\n\nimport \"sort\"\n\nconst shift, mask = 32, 1&lt;&lt;32 - 1\n\nfunc bestTeamScore(scores []int, ages []int) (ans int) {\n    n := len(scores)\n    for i, x := range scores {\n        scores[i] = (ages[i] &lt;&lt; shift) | x\n    }\n    sort.Ints(scores)\n\n    // f[i]\u8868\u793a\u4ee5scores[i]\u7ed3\u5c3e\u7684\u65e0\u77db\u76fe\u7403\u961f\u7684\u6700\u9ad8\u5f97\u5206\n    f := make([]int, n)\n    for i := range scores {\n        scores[i] &amp;= mask\n        for j, score := range scores[:i] {\n            if score &lt;= scores[i] {\n                f[i] = max(f[i], f[j])\n            }\n        }\n        f[i] += scores[i]\n        ans = max(ans, f[i])\n    }\n    return ans\n}\n\nfunc max(x, y int) int {\n    if x &gt; y {\n        return x\n    } else {\n        return y\n    }\n}\n</code></pre> <p>\u65b9\u6cd5\u4e8c\uff1a\u6811\u72b6\u6570\u7ec4</p> <p>\u5982\u679c\u6570\u7ec4\u957f\u5ea6 <code>n</code> \u589e\u5927\u81f3 <code>1e5</code> \uff0c\u65b9\u6cd5\u4e00\u5c31\u53ef\u80fd\u4f1a\u8d85\u65f6\u3002 \u9700\u8981\u4f7f\u7528\u6811\u72b6\u6570\u7ec4\uff08\u6216\u7ebf\u6bb5\u6811\uff09\u5c06\u65f6\u95f4\u590d\u6742\u5ea6\u964d\u4e3a\uff1a\\(O(n\\log{n} + n\\log{U})\\)\u3002\u5176\u4e2d \\(U={max}(ages)\\) \u3002 \u5982\u679c <code>ages[i]</code> \u7684\u8303\u56f4\u8f83\u5927\uff0c\u53ef\u4ee5\u901a\u8fc7\u79bb\u6563\u5316\u5c06\u590d\u6742\u5ea6\u964d\u4e3a\uff1a\\(O(n\\log{n})\\) \u3002</p> Go <pre><code>package main\n\nimport \"sort\"\n\nconst shift, mask = 10, 1&lt;&lt;10 - 1\n\nfunc bestTeamScore(scores []int, ages []int) int {\n    u := 0\n    for i, x := range ages {\n        ages[i] = (scores[i] &lt;&lt; shift) | x\n        u = max(u, x)\n    }\n    sort.Ints(ages)\n\n    t := make(BIT, u+1)\n    for _, sa := range ages {\n        s, a := sa&gt;&gt;shift, sa&amp;mask\n        t.update(a, t.query(a)+s) // \u66f4\u65b0\u5e74\u9f84\u4e0d\u8d85\u8fc7a\u7684\u65e0\u77db\u76fe\u7403\u961f\u7684\u6700\u9ad8\u5f97\u5206\n    }\n    return t.query(u)\n}\n\n// \u6811\u72b6\u6570\u7ec4\ntype BIT []int\n\n// \u5355\u70b9\u66f4\u65b0\nfunc (t BIT) update(i, v int) {\n    for n := len(t); i &lt; n; i += i &amp; -i {\n        t[i] = max(t[i], v)\n    }\n}\n\n// \u524d\u7f00\u67e5\u8be2 [1, i]\nfunc (t BIT) query(i int) (ans int) {\n    for ; i &gt; 0; i &amp;= i - 1 {\n        ans = max(ans, t[i])\n    }\n    return\n}\n\nfunc max(x, y int) int {\n    if x &gt; y {\n        return x\n    } else {\n        return y\n    }\n}\n</code></pre>"},{"location":"ds/bit/#lc2659-\u5c06\u6570\u7ec4\u6e05\u7a7a","title":"LC2659. \u5c06\u6570\u7ec4\u6e05\u7a7a","text":"\u95ee\u9898\u63cf\u8ff0 <p>\u7ed9\u4f60\u4e00\u4e2a\u5305\u542b\u82e5\u5e72 \u4e92\u4e0d\u76f8\u540c \u6574\u6570\u7684\u6570\u7ec4 nums \uff0c\u4f60\u9700\u8981\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c \u76f4\u5230\u6570\u7ec4\u4e3a\u7a7a \uff1a</p> <ul> <li>\u5982\u679c\u6570\u7ec4\u4e2d\u7b2c\u4e00\u4e2a\u5143\u7d20\u662f\u5f53\u524d\u6570\u7ec4\u4e2d\u7684 \u6700\u5c0f\u503c \uff0c\u5219\u5220\u9664\u5b83\u3002</li> <li>\u5426\u5219\uff0c\u5c06\u7b2c\u4e00\u4e2a\u5143\u7d20\u79fb\u52a8\u5230\u6570\u7ec4\u7684 \u672b\u5c3e \u3002</li> </ul> <p>\u8bf7\u4f60\u8fd4\u56de\u9700\u8981\u591a\u5c11\u6b21\u64cd\u4f5c\u4f7f nums \u4e3a\u7a7a\u3002</p> <p>\u5728 LeetCode\u4e3b\u7ad9 \u6216 \u529b\u6263\u4e2d\u6587\u793e\u533a \u67e5\u770b\u8be5\u9898\u3002</p> \u89e3\u9898\u601d\u8def Go <pre><code>package main\n\nimport \"sort\"\n\nfunc countOperationsToEmptyArray(nums []int) int64 {\n    ans := 0\n    n := len(nums)\n    id := make([]int, n)\n    for i := range id {\n        id[i] = i\n    }\n    sort.Slice(id, func(i, j int) bool { return nums[id[i]] &lt; nums[id[j]] })\n\n    // [-1, n-1] -&gt; [0, n]\n    t := make(BIT, n+1)\n    pre := 0\n    for _, i := range id {\n        i += 1\n        if i &gt; pre {\n            ans += i - pre - (t.query(i) - t.query(pre))\n        } else {\n            ans += n - (pre - i) - (t.query(n) - t.query(pre) + t.query(i))\n        }\n        t.update(i, 1)\n        pre = i\n    }\n    return int64(ans)\n}\n\ntype BIT []int\n\n// \u5355\u70b9\u66f4\u65b0\nfunc (t BIT) update(i, val int) {\n    for n := len(t); i &lt; n; i += i &amp; -i {\n        t[i] += val\n    }\n}\n\n// \u67e5\u8be2\u524d\u7f00\u533a\u95f4[1, i]\nfunc (t BIT) query(i int) (ans int) {\n    for ; i &gt; 0; i &amp;= i - 1 {\n        ans += t[i]\n    }\n    return\n}\n</code></pre>"},{"location":"ds/dsu/","title":"\u5e76\u67e5\u96c6","text":""},{"location":"ds/dsu/#cf1157e-minimum-array","title":"CF1157E. Minimum Array","text":"\u95ee\u9898\u63cf\u8ff0 <p>\u7b2c\u4e00\u884c\u8f93\u5165 \\(n(1\u2264n\u22642e5)\\) \uff0c\u7b2c\u4e8c\u884c\u548c\u7b2c\u4e09\u884c\u5206\u522b\u8f93\u5165\u4e24\u4e2a\u957f\u4e3a \\(n\\) \u7684\u6570\u7ec4 \\(a\\) \u548c \\(b\\) \uff0c\u5143\u7d20\u8303\u56f4\uff1a\\([0,n-1]\\) \u3002 \u4f60\u53ef\u4ee5\u91cd\u6392\u6570\u7ec4 \\(b\\) \u3002 \u8fd8\u6709\u4e00\u4e2a\u957f\u4e3a \\(n\\) \u7684\u6570\u7ec4 \\(c\\) \uff0c\u5176\u4e2d \\(c[i] = (a[i] + b[i]) \\% n\\) \u3002 \u8f93\u51fa\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u6570\u7ec4 \\(c\\) \u3002</p> <p>\u5728 Codeforces \u6216 \u6d1b\u8c37 \u67e5\u770b\u8be5\u9898\u3002</p> \u89e3\u9898\u601d\u8def <p>\u5bf9\u4e8e \\(a[i]\\) \uff0c\u9700\u8981\u53bb\u6570\u7ec4 \\(b\\) \u4e2d\u627e \\((n-a[i])%n\\) \uff0c\u5982\u679c\u4e0d\u5b58\u5728\u5c31\u627e\u66f4\u5927\u7684\u503c\uff0c\u5982\u679c\u627e\u4e0d\u5230\uff0c\u5c31\u518d\u4ece \\(0\\) \u5f00\u59cb\u627e\u3002 \u76f4\u63a5\u66b4\u529b\u67e5\u627e\u4f1a\u8d85\u65f6\uff0c\u6709\u591a\u79cd\u4f18\u5316\u65b9\u6cd5\uff1a</p> <ul> <li>\u7c7b\u4f3c Java TreeMap \u8fd9\u6837\u7684\u5e73\u8861\u6811\uff0c\u53ea\u7ef4\u62a4\u5b58\u5728\u7684\uff1b</li> <li>\u5e76\u67e5\u96c6\uff0c\u5982\u679c \\(x\\) \u4e0d\u5b58\u5728\uff0c\u5219\u628a \\(x\\) \u548c \\(x+1\\) \u5408\u5e76\uff0c\u8fd9\u6837\u53ef\u4ee5\u5feb\u901f\u627e\u5230\u4e0b\u4e00\u4e2a\u5b58\u5728\u7684\u3002</li> </ul> <p>\u65b9\u6cd5\u4e00\uff1a\u5e76\u67e5\u96c6</p> GoJava <pre><code>package main\n\nimport (\n    \"bufio\"\n    . \"fmt\"\n    \"os\"\n)\n\nfunc main() {\n    in := bufio.NewReader(os.Stdin)\n    out := bufio.NewWriter(os.Stdout)\n    defer out.Flush()\n\n    var n, x int\n    Fscan(in, &amp;n)\n    a := make([]int, n)\n    for i := range a {\n        Fscan(in, &amp;a[i])\n    }\n    b := make([]int, n+1)\n    for i := 0; i &lt; n; i++ {\n        Fscan(in, &amp;x)\n        b[x]++\n    }\n\n    // \u5e76\u67e5\u96c6\n    fa := make([]int, n+1)\n    for i, next := n, 0; i &gt;= 0; i-- {\n        if b[i] != 0 {\n            next = i\n        }\n        fa[i] = next\n    }\n\n    var find func(x int) int\n    find = func(x int) int {\n        if fa[x] != x {\n            fa[x] = find(fa[x]) // \u8def\u5f84\u538b\u7f29\n        }\n        return fa[x]\n    }\n    union := func(f, t int) {\n        if f, t = find(f), find(t); f != t {\n            fa[f] = t\n        }\n    }\n\n    for _, x = range a {\n        y := find(n - x)\n        if b[y]--; b[y] == 0 {\n            union(y, y+1) // \u6307\u5411\u4e0b\u4e00\u4e2a\u672a\u4f7f\u7528\u7684\u6570\u5b57\n        }\n        Fprint(out, (x+y)%n, \" \")\n    }\n}\n</code></pre> <pre><code>import java.io.*;\nimport java.util.*;\n\npublic class Main {\n\n    static BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n    static PrintWriter out = new PrintWriter(System.out);\n\n    public static void main(String[] args) throws Exception {\n        int n = Integer.parseInt(in.readLine());\n        int[] a = new int[n];\n        int[] b = new int[n + 1];\n        StringTokenizer at = new StringTokenizer(in.readLine());\n        StringTokenizer bt = new StringTokenizer(in.readLine());\n        for (int i = 0; i &lt; n; i++) {\n            a[i] = Integer.parseInt(at.nextToken());\n            int x = Integer.parseInt(bt.nextToken());\n            b[x]++;\n        }\n\n        fa = new int[n + 1];\n        for (int i = n, next = 0; i &gt;= 0; i--) {\n            if (b[i] != 0) {\n                next = i;\n            }\n            fa[i] = next;\n        }\n\n        for (int x : a) {\n            int y = find(n - x);\n            if (--b[y] == 0) {\n                union(y, y + 1); // \u6307\u5411\u4e0b\u4e00\u4e2a\u672a\u4f7f\u7528\u7684\u6570\u5b57\n            }\n            out.printf(\"%d \", (x + y) % n);\n        }\n        out.flush();\n        out.close();\n        in.close();\n    }\n\n    // \u5e76\u67e5\u96c6\n    static int[] fa;\n\n    public static int find(int x) {\n        if (fa[x] != x) {\n            fa[x] = find(fa[x]); // \u8def\u5f84\u538b\u7f29\n        }\n        return fa[x];\n    }\n\n    public static void union(int f, int t) {\n        f = find(f);\n        t = find(t);\n        if (f != t) {\n            fa[f] = t;\n        }\n    }\n}\n</code></pre> <p>\u65b9\u6cd5\u4e8c\uff1a\u6709\u5e8f\u5b57\u5178</p> Java <pre><code>import java.io.*;\nimport java.util.*;\n\npublic class Main {\n\n    static BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n    static PrintWriter out = new PrintWriter(System.out);\n\n    public static void main(String[] args) throws Exception {\n        int n = Integer.parseInt(in.readLine());\n        int[] a = new int[n];\n        TreeMap&lt;Integer, Integer&gt; b = new TreeMap&lt;&gt;();\n        StringTokenizer at = new StringTokenizer(in.readLine());\n        StringTokenizer bt = new StringTokenizer(in.readLine());\n        for (int i = 0; i &lt; n; i++) {\n            a[i] = Integer.parseInt(at.nextToken());\n            int x = Integer.parseInt(bt.nextToken());\n            b.compute(x, (k, v) -&gt; v == null ? 1 : v + 1);\n        }\n        for (int x : a) {\n            Integer y = b.ceilingKey(n - x);\n            if (y == null) {\n                y = b.ceilingKey(0);\n            }\n            b.compute(y, (k, v) -&gt; v == 1 ? null : v - 1);\n            out.printf(\"%d \", (x + y) % n);\n        }\n        out.flush();\n        out.close();\n        in.close();\n    }\n}\n</code></pre>"},{"location":"ds/monotonous-stack/","title":"\u5355\u8c03\u6808","text":""},{"location":"ds/tire/","title":"\u5b57\u5178\u6811","text":""},{"location":"ds/tire/#lc1032-\u5b57\u7b26\u6d41","title":"LC1032. \u5b57\u7b26\u6d41","text":"\u95ee\u9898\u63cf\u8ff0 <p>\u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\uff1a\u63a5\u6536\u4e00\u4e2a\u5b57\u7b26\u6d41\uff0c\u5e76\u68c0\u67e5\u8fd9\u4e9b\u5b57\u7b26\u7684\u540e\u7f00\u662f\u5426\u662f\u5b57\u7b26\u4e32\u6570\u7ec4 <code>words</code> \u4e2d\u7684\u4e00\u4e2a\u5b57\u7b26\u4e32\u3002 \u4f8b\u5982\uff0c<code>words = [\"abc\", \"xyz\"]</code> \u4e14\u5b57\u7b26\u6d41\u4e2d\u9010\u4e2a\u4f9d\u6b21\u52a0\u5165 4 \u4e2a\u5b57\u7b26 <code>'a'</code>\u3001<code>'x'</code>\u3001<code>'y'</code> \u548c <code>'z'</code> \uff0c\u4f60\u6240\u8bbe\u8ba1\u7684\u7b97\u6cd5\u5e94\u5f53\u53ef\u4ee5\u68c0\u6d4b\u5230 <code>\"axyz\"</code> \u7684\u540e\u7f00 <code>\"xyz\"</code> \u4e0e <code>words</code> \u4e2d\u7684\u5b57\u7b26\u4e32 <code>\"xyz\"</code> \u5339\u914d\u3002 \u6309\u4e0b\u8ff0\u8981\u6c42\u5b9e\u73b0 <code>StreamChecker</code> \u7c7b\uff1a</p> <ul> <li><code>StreamChecker(String[] words)</code> \uff1a\u6784\u9020\u51fd\u6570\uff0c\u7528\u5b57\u7b26\u4e32\u6570\u7ec4 <code>words</code> \u521d\u59cb\u5316\u6570\u636e\u7ed3\u6784\u3002</li> <li><code>boolean query(char letter)</code> \uff1a\u4ece\u5b57\u7b26\u6d41\u4e2d\u63a5\u6536\u4e00\u4e2a\u65b0\u5b57\u7b26\uff0c\u5982\u679c\u5b57\u7b26\u6d41\u4e2d\u7684\u4efb\u4e00\u975e\u7a7a\u540e\u7f00\u80fd\u5339\u914d <code>words</code> \u4e2d\u7684\u67d0\u4e00\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de <code>true</code> \uff1b\u5426\u5219\uff0c\u8fd4\u56de <code>false</code> \u3002</li> </ul> <p>\u5728 LeetCode\u4e3b\u7ad9 \u6216 \u529b\u6263\u4e2d\u6587\u793e\u533a \u67e5\u770b\u8be5\u9898\u3002</p> \u89e3\u9898\u601d\u8def <p>\u65b9\u6cd5\u4e00\uff1a\u5b57\u5178\u6811</p> Go <pre><code>package main\n\ntype StreamChecker struct {\n    l int\n    t *tire\n    s []byte\n}\n\nfunc Constructor(words []string) StreamChecker {\n    l := 0\n    t := &amp;tire{}\n    for _, s := range words {\n        t.insert(s)\n        l = max(l, len(s))\n    }\n    return StreamChecker{l, t, nil}\n}\n\nfunc (this *StreamChecker) Query(letter byte) bool {\n    this.s = append(this.s, letter-'a')\n    if len(this.s) &gt; this.l {\n        this.s = this.s[1:]\n    }\n    return this.t.search(this.s)\n}\n\ntype tire struct {\n    end      bool\n    children [26]*tire\n}\n\nfunc (t *tire) insert(s string) {\n    curr := t\n    for i := len(s) - 1; i &gt;= 0; i-- {\n        c := s[i] - 'a'\n        if curr.children[c] == nil {\n            curr.children[c] = &amp;tire{}\n        }\n        curr = curr.children[c]\n    }\n    curr.end = true\n}\n\nfunc (t *tire) search(s []byte) bool {\n    curr := t\n    for i := len(s) - 1; i &gt;= 0 &amp;&amp; curr.children[s[i]] != nil; i-- {\n        if curr = curr.children[s[i]]; curr.end {\n            return true\n        }\n    }\n    return false\n}\n\nfunc max(x, y int) int {\n    if x &gt; y {\n        return x\n    } else {\n        return y\n    }\n}\n</code></pre> <p>\u65b9\u6cd5\u4e8c\uff1aAC \u81ea\u52a8\u673a</p> Go <pre><code>package main\n\ntype StreamChecker struct {\n    curr *tire\n}\n\nfunc Constructor(words []string) StreamChecker {\n    t := &amp;tire{}\n    for _, s := range words {\n        t.insert(s)\n    }\n    t.automate()\n    return StreamChecker{t}\n}\n\nfunc (this *StreamChecker) Query(letter byte) bool {\n    this.curr = this.curr.children[letter-'a']\n    return this.curr.end\n}\n\ntype tire struct {\n    end      bool\n    fail     *tire\n    children [26]*tire\n}\n\nfunc (t *tire) insert(s string) {\n    curr := t\n    for _, c := range s {\n        c -= 'a'\n        if curr.children[c] == nil {\n            curr.children[c] = &amp;tire{}\n        }\n        curr = curr.children[c]\n    }\n    curr.end = true\n}\n\n// \u6784\u5efa AC \u81ea\u52a8\u673a\nfunc (t *tire) automate() {\n    t.fail = t\n    var q []*tire\n    for i, c := range t.children {\n        if c == nil {\n            t.children[i] = t\n        } else {\n            c.fail = t\n            q = append(q, c)\n        }\n    }\n    for len(q) &gt; 0 {\n        o := q[0]\n        q = q[1:]\n        o.end = o.end || o.fail.end\n        for i, c := range o.children {\n            if c == nil {\n                o.children[i] = o.fail.children[i]\n            } else {\n                c.fail = o.fail.children[i]\n                q = append(q, c)\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"ds/seg/","title":"\u7ebf\u6bb5\u6811","text":""},{"location":"ds/seg/lazy/","title":"\u533a\u95f4\u4fee\u6539\u4e0e\u61d2\u60f0\u6807\u8bb0","text":""},{"location":"ds/seg/lazy/#t-lg3372-\u7ebf\u6bb5\u6811-1","title":"[T] LG3372. \u7ebf\u6bb5\u6811 1","text":"\u95ee\u9898\u63cf\u8ff0 <p>\u7b2c\u4e00\u884c\u8f93\u5165\u4e24\u4e2a\u6b63\u6574\u6570 <code>n m</code> <code>(1\u2264n,m\u22641e5)</code> \uff0c\u8868\u793a\u6570\u7ec4\u957f\u5ea6\u548c\u64cd\u4f5c\u603b\u4e2a\u6570\u3002 \u7b2c\u4e8c\u884c\u8f93\u5165\u957f\u4e3a <code>n</code> \u7684\u6570\u7ec4 <code>a</code> \uff0c\u4e0b\u6807\u4ece 1 \u5f00\u59cb\u3002 \u63a5\u4e0b\u6765 <code>m</code> \u884c\uff0c\u6bcf\u884c\u8f93\u5165 3 \u6216 4 \u4e2a\u6574\u6570\uff0c\u8868\u793a\u4e00\u4e2a\u64cd\u4f5c\uff0c\u5177\u4f53\u5982\u4e0b\uff1a</p> <ol> <li><code>1 x y k</code> \uff1a\u5c06\u6570\u7ec4 <code>a</code> \u533a\u95f4 <code>[x, y]</code> \u5185\u7684\u6bcf\u4e2a\u6570\u52a0\u4e0a <code>k</code> \uff1b</li> <li><code>2 x y</code> \uff1a\u8f93\u51fa\u6570\u7ec4 <code>a</code> \u533a\u95f4 <code>[x, y]</code> \u5185\u6bcf\u4e2a\u6570\u7684\u548c\uff0c\u6bcf\u6b21\u8f93\u51fa\u4e00\u884c\u3002</li> </ol> <p>\u9898\u76ee\u4fdd\u8bc1\u4efb\u610f\u65f6\u523b\u6570\u7ec4 <code>a</code> \u4e2d\u6240\u6709\u5143\u7d20\u7684\u7edd\u5bf9\u503c\u4e4b\u548c <code>\u22641e18</code> \u3002</p> <p>\u5728 \u6d1b\u8c37 \u67e5\u770b\u8be5\u9898\u3002</p> \u89e3\u9898\u601d\u8def Go <pre><code>package main\n\nimport (\n    \"bufio\"\n    . \"fmt\"\n    \"os\"\n)\n\nfunc main() {\n    in := bufio.NewReader(os.Stdin)\n    out := bufio.NewWriter(os.Stdout)\n    defer out.Flush()\n\n    var n, m, op, x, y int\n    var k int64\n    Fscan(in, &amp;n, &amp;m)\n    arr := make([]int64, n)\n    for i := range arr {\n        Fscan(in, &amp;arr[i])\n    }\n    t := buildST(arr)\n    for ; m &gt; 0; m-- {\n        if Fscan(in, &amp;op); op == 1 {\n            Fscan(in, &amp;x, &amp;y, &amp;k)\n            t.update(x, y, k)\n        } else {\n            Fscan(in, &amp;x, &amp;y)\n            Fprintln(out, t.query(x, y))\n        }\n    }\n}\n\nfunc buildST(arr []int64) (t seg) {\n    n := len(arr)\n    t = make(seg, n&lt;&lt;2)\n    var dfs func(o, l, r int)\n    dfs = func(o, l, r int) {\n        t[o].l, t[o].r = l, r\n        if l == r {\n            t[o].sum = arr[l-1]\n        } else {\n            mid, lo := t.mid(o), o&lt;&lt;1\n            dfs(lo, l, mid)\n            dfs(lo|1, mid+1, r)\n            t.maintain(o)\n        }\n    }\n    dfs(1, 1, n)\n    return\n}\n\ntype seg []struct {\n    l, r int\n    sum  int64\n    add  int64\n}\n\nfunc (t seg) mid(o int) int  { return (t[o].l + t[o].r) &gt;&gt; 1 }\nfunc (t seg) maintain(o int) { t[o].sum = t[o&lt;&lt;1].sum + t[o&lt;&lt;1|1].sum }\n\nfunc (t seg) do(o int, x int64) {\n    t[o].sum += int64(t[o].r-t[o].l+1) * x\n    t[o].add += x\n}\n\nfunc (t seg) spread(o int) {\n    if t[o].add != 0 {\n        t.do(o&lt;&lt;1, t[o].add)\n        t.do(o&lt;&lt;1|1, t[o].add)\n        t[o].add = 0\n    }\n}\n\nfunc (t seg) update(l, r int, x int64) {\n    var dfs func(o int)\n    dfs = func(o int) {\n        if l &lt;= t[o].l &amp;&amp; t[o].r &lt;= r {\n            t.do(o, x)\n        } else {\n            t.spread(o)\n            mid, lo := t.mid(o), o&lt;&lt;1\n            if l &lt;= mid {\n                dfs(lo)\n            }\n            if mid &lt; r {\n                dfs(lo | 1)\n            }\n            t.maintain(o)\n        }\n    }\n    dfs(1)\n}\n\nfunc (t seg) query(l, r int) int64 {\n    var dfs func(o int) int64\n    dfs = func(o int) int64 {\n        if l &lt;= t[o].l &amp;&amp; t[o].r &lt;= r {\n            return t[o].sum\n        } else {\n            t.spread(o)\n            mid, lo := t.mid(o), o&lt;&lt;1\n            if r &lt;= mid {\n                return dfs(lo)\n            } else if l &gt; mid {\n                return dfs(lo | 1)\n            } else {\n                return dfs(lo) + dfs(lo|1)\n            }\n        }\n    }\n    return dfs(1)\n}\n</code></pre>"},{"location":"ds/seg/lazy/#t-lg3373-\u7ebf\u6bb5\u6811-2","title":"[T] LG3373. \u7ebf\u6bb5\u6811 2","text":"\u95ee\u9898\u63cf\u8ff0 <p>\u7b2c\u4e00\u884c\u8f93\u5165\u4e24\u4e2a\u6b63\u6574\u6570 <code>n m p</code> <code>(1\u2264n,m\u22641e5)</code> \uff0c\u8868\u793a\u6570\u7ec4\u957f\u5ea6\u3001\u64cd\u4f5c\u603b\u4e2a\u6570\u548c\u6a21\u6570\u3002 \u7b2c\u4e8c\u884c\u8f93\u5165\u957f\u4e3a <code>n</code> \u7684\u6570\u7ec4 <code>a</code> \uff0c\u4e0b\u6807\u4ece 1 \u5f00\u59cb\u3002 \u63a5\u4e0b\u6765 <code>m</code> \u884c\uff0c\u6bcf\u884c\u8f93\u5165 3 \u6216 4 \u4e2a\u6574\u6570\uff0c\u8868\u793a\u4e00\u4e2a\u64cd\u4f5c\uff0c\u5177\u4f53\u5982\u4e0b\uff1a</p> <ol> <li><code>1 x y k</code> \uff1a\u5c06\u6570\u7ec4 <code>a</code> \u533a\u95f4 <code>[x, y]</code> \u5185\u7684\u6bcf\u4e2a\u6570\u4e58\u4e0a <code>k</code> \uff1b</li> <li><code>2 x y k</code> \uff1a\u5c06\u6570\u7ec4 <code>a</code> \u533a\u95f4 <code>[x, y]</code> \u5185\u7684\u6bcf\u4e2a\u6570\u52a0\u4e0a <code>k</code> \uff1b</li> <li><code>3 x y</code> \uff1a\u8f93\u51fa\u6570\u7ec4 <code>a</code> \u533a\u95f4 <code>[x, y]</code> \u5185\u6bcf\u4e2a\u6570\u7684\u548c\u5bf9 <code>p</code> \u53d6\u6a21\u7684\u7ed3\u679c\uff0c\u6bcf\u6b21\u8f93\u51fa\u4e00\u884c\u3002</li> </ol> <p>\u9664\u6837\u4f8b\u6570\u636e <code>p = 38</code> \u5916\uff0c\u5176\u4f59 <code>p = 571373</code> \u3002</p> <p>\u5728 \u6d1b\u8c37 \u67e5\u770b\u8be5\u9898\u3002</p> \u89e3\u9898\u601d\u8def Go <pre><code>package main\n\nimport (\n    \"bufio\"\n    . \"fmt\"\n    \"os\"\n)\n\nfunc main() {\n    in := bufio.NewReader(os.Stdin)\n    out := bufio.NewWriter(os.Stdout)\n    defer out.Flush()\n\n    var n, m, op, x, y int\n    var k int64\n    Fscan(in, &amp;n, &amp;m, &amp;p)\n    arr := make([]int64, n)\n    for i := range arr {\n        Fscan(in, &amp;arr[i])\n        arr[i] %= p\n    }\n    t := buildST(arr)\n    for ; m &gt; 0; m-- {\n        Fscan(in, &amp;op, &amp;x, &amp;y)\n        if op == 1 {\n            Fscan(in, &amp;k)\n            t.update(x, y, 0, k%p)\n        } else if op == 2 {\n            Fscan(in, &amp;k)\n            t.update(x, y, k%p, 1)\n        } else {\n            Fprintln(out, t.query(x, y))\n        }\n    }\n}\n\nvar p int64\n\nfunc buildST(arr []int64) (t seg) {\n    n := len(arr)\n    t = make(seg, n&lt;&lt;2)\n    var dfs func(o, l, r int)\n    dfs = func(o, l, r int) {\n        t[o].l, t[o].r, t[o].mul = l, r, 1\n        if l == r {\n            t[o].sum = arr[l-1]\n        } else {\n            mid, lo := t.mid(o), o&lt;&lt;1\n            dfs(lo, l, mid)\n            dfs(lo|1, mid+1, r)\n            t.maintain(o)\n        }\n    }\n    dfs(1, 1, n)\n    return\n}\n\ntype seg []struct {\n    l, r     int\n    sum      int64\n    add, mul int64\n}\n\nfunc (t seg) mid(o int) int  { return (t[o].l + t[o].r) &gt;&gt; 1 }\nfunc (t seg) maintain(o int) { t[o].sum = (t[o&lt;&lt;1].sum + t[o&lt;&lt;1|1].sum) % p }\n\nfunc (t seg) do(o int, add, mul int64) {\n    t[o].sum = (t[o].sum*mul + int64(t[o].r-t[o].l+1)*add) % p\n    t[o].add = (t[o].add*mul + add) % p\n    t[o].mul = (t[o].mul * mul) % p\n}\n\nfunc (t seg) spread(o int) {\n    if t[o].add != 0 || t[o].mul != 1 {\n        t.do(o&lt;&lt;1, t[o].add, t[o].mul)\n        t.do(o&lt;&lt;1|1, t[o].add, t[o].mul)\n        t[o].add, t[o].mul = 0, 1\n    }\n}\n\nfunc (t seg) update(l, r int, add, mul int64) {\n    var dfs func(o int)\n    dfs = func(o int) {\n        if l &lt;= t[o].l &amp;&amp; t[o].r &lt;= r {\n            t.do(o, add, mul)\n        } else {\n            t.spread(o)\n            mid, lo := t.mid(o), o&lt;&lt;1\n            if l &lt;= mid {\n                dfs(lo)\n            }\n            if mid &lt; r {\n                dfs(lo | 1)\n            }\n            t.maintain(o)\n        }\n    }\n    dfs(1)\n}\n\nfunc (t seg) query(l, r int) int64 {\n    var dfs func(o int) int64\n    dfs = func(o int) int64 {\n        if l &lt;= t[o].l &amp;&amp; t[o].r &lt;= r {\n            return t[o].sum\n        } else {\n            t.spread(o)\n            mid, lo := t.mid(o), o&lt;&lt;1\n            if r &lt;= mid {\n                return dfs(lo)\n            } else if mid &lt; l {\n                return dfs(lo | 1)\n            } else {\n                return dfs(lo) + dfs(lo|1)\n            }\n        }\n    }\n    return dfs(1) % p\n}\n</code></pre>"},{"location":"ds/seg/lazy/#lc2569-\u6700\u5c0f\u65e0\u6cd5\u5f97\u5230\u7684\u6216\u503c","title":"LC2569. \u6700\u5c0f\u65e0\u6cd5\u5f97\u5230\u7684\u6216\u503c","text":"\u95ee\u9898\u63cf\u8ff0 <p>\u7ed9\u4f60\u4e24\u4e2a\u957f\u5ea6\u4e3a <code>1\u2264n\u22641e5</code> \u4e0b\u6807\u4ece 0 \u5f00\u59cb\u7684\u6570\u7ec4 <code>nums1</code> \u548c <code>nums2</code> \uff0c<code>0\u2264nums1[i]\u22641</code> <code>0\u2264nums2[i]\u22641e9</code> \u3002 \u53e6\u5916\u7ed9\u4f60\u4e00\u4e2a\u957f\u5ea6\u4e3a <code>1\u2264m\u22641e5</code> \u7684\u4e8c\u7ef4\u6570\u7ec4 <code>queries</code> \u8868\u793a\u4e00\u4e9b\u64cd\u4f5c\u3002\u603b\u5171\u6709 3 \u79cd\u7c7b\u578b\u7684\u64cd\u4f5c\uff1a</p> <ol> <li><code>queries[i] = [1, x, y]</code> \uff1a\u5c06\u6570\u7ec4 <code>nums1</code> \u533a\u95f4 <code>[x, y]</code> \u5185\u7684\u6240\u6709 0 \u53cd\u8f6c\u6210 1 \uff0c1 \u53cd\u8f6c\u6210 0 \uff1b</li> <li><code>queries[i] = [2, p, 0]</code> \uff1a\u5bf9\u4e8e\u6240\u6709\u4e0b\u6807 <code>0\u2264i&lt;n</code> \uff0c\u4ee4 <code>nums2[i] = nums2[i] + nums1[i] * p</code> \uff1b</li> <li><code>queries[i] = [3, 0, 0]</code> \uff1a\u6c42 <code>nums2</code> \u4e2d\u6240\u6709\u5143\u7d20\u7684\u548c\u3002</li> </ol> <p>\u8bf7\u4f60\u8fd4\u56de\u4e00\u4e2a\u6570\u7ec4\uff0c\u5305\u542b\u6240\u6709\u7b2c\u4e09\u79cd\u64cd\u4f5c\u7c7b\u578b\u7684\u7b54\u6848\u3002</p> <p>\u5728 LeetCode\u4e3b\u7ad9 \u6216 \u529b\u6263\u4e2d\u6587\u793e\u533a \u67e5\u770b\u8be5\u9898\u3002</p> \u89e3\u9898\u601d\u8def Go <pre><code>package main\n\nfunc handleQuery(nums1 []int, nums2 []int, queries [][]int) (ans []int64) {\n    s := 0\n    for _, x := range nums2 {\n        s += x\n    }\n    t := buildST(nums1)\n    for _, q := range queries {\n        if q[0] == 1 {\n            t.update(q[1]+1, q[2]+1)\n        } else if q[0] == 2 {\n            s += q[1] * t[1].c1\n        } else {\n            ans = append(ans, int64(s))\n        }\n    }\n    return\n}\n\nfunc buildST(arr []int) (t seg) {\n    n := len(arr)\n    t = make(seg, n&lt;&lt;2)\n    var dfs func(o, l, r int)\n    dfs = func(o, l, r int) {\n        t[o].l, t[o].r = l, r\n        if l == r {\n            t[o].c1 = arr[l-1]\n        } else {\n            mid, lo := t.mid(o), o&lt;&lt;1\n            dfs(lo, l, mid)\n            dfs(lo|1, mid+1, r)\n            t.maintain(o)\n        }\n    }\n    dfs(1, 1, n)\n    return\n}\n\ntype seg []struct {\n    l, r, c1 int\n    flip     bool // 01\u7ffb\u8f6c\u61d2\u60f0\u6807\u8bb0\n}\n\nfunc (t seg) mid(o int) int  { return (t[o].l + t[o].r) &gt;&gt; 1 }\nfunc (t seg) maintain(o int) { t[o].c1 = t[o&lt;&lt;1].c1 + t[o&lt;&lt;1|1].c1 }\n\nfunc (t seg) do(o int) {\n    t[o].c1 = t[o].r - t[o].l + 1 - t[o].c1 // \u66f4\u65b0\u8282\u70b9o\u533a\u95f4\u7ef4\u62a4\u7684\u4fe1\u606f\n    t[o].flip = !t[o].flip                  // \u61d2\u60f0\u6807\u8bb0\uff0c\u6682\u4e0d\u4e0b\u94bb\u66f4\u65b0\u5b50\u533a\u95f4\uff0c\u9700\u8981\u7528\u5230\u5b50\u533a\u95f4\u65f6\u518d\u4e0b\u94bb\u66f4\u65b0\u5b50\u533a\u95f4\n}\n\nfunc (t seg) spread(o int) {\n    if t[o].flip { // \u4e0b\u94bb\u66f4\u65b0\u5b50\u533a\u95f4\n        t.do(o &lt;&lt; 1)\n        t.do(o&lt;&lt;1 | 1)\n        t[o].flip = false\n    }\n}\n\nfunc (t seg) update(l, r int) {\n    var dfs func(o int)\n    dfs = func(o int) {\n        if l &lt;= t[o].l &amp;&amp; t[o].r &lt;= r {\n            t.do(o)\n        } else {\n            t.spread(o)\n            mid, lo := t.mid(o), o&lt;&lt;1\n            if l &lt;= mid {\n                dfs(lo)\n            }\n            if mid &lt; r {\n                dfs(lo | 1)\n            }\n            t.maintain(o)\n        }\n    }\n    dfs(1)\n}\n</code></pre>"},{"location":"ds/seg/lazy/#lc2547-\u62c6\u5206\u6570\u7ec4\u7684\u6700\u5c0f\u4ee3\u4ef7","title":"LC2547. \u62c6\u5206\u6570\u7ec4\u7684\u6700\u5c0f\u4ee3\u4ef7","text":"\u95ee\u9898\u63cf\u8ff0 <p>\u7ed9\u4f60\u4e00\u4e2a\u957f\u5ea6\u4e3a <code>1\u2264n\u22641e3</code> \u7684\u6574\u6570\u6570\u7ec4 <code>nums(0\u2264nums[i]&lt;n)</code> \u548c\u4e00\u4e2a\u6574\u6570 <code>1\u2264k\u22641e9</code>\u3002 \u5c06\u6570\u7ec4\u62c6\u5206\u6210\u4e00\u4e9b\u975e\u7a7a\u5b50\u6570\u7ec4\u3002\u62c6\u5206\u7684 \u4ee3\u4ef7 \u662f\u6bcf\u4e2a\u5b50\u6570\u7ec4\u4e2d\u7684 \u91cd\u8981\u6027 \u4e4b\u548c\u3002</p> <p>\u4ee4 <code>trimmed(subarray)</code> \u4f5c\u4e3a\u5b50\u6570\u7ec4\u7684\u4e00\u4e2a\u7279\u5f81\uff0c\u5176\u4e2d\u6240\u6709\u4ec5\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57\u5c06\u4f1a\u88ab\u79fb\u9664\u3002</p> <ul> <li>\u4f8b\u5982\uff0c<code>trimmed([3,1,2,4,3,4]) = [3,4,3,4]</code> \u3002</li> </ul> <p>\u5b50\u6570\u7ec4\u7684 \u91cd\u8981\u6027 \u5b9a\u4e49\u4e3a <code>k + trimmed(subarray).length</code> \u3002 \u627e\u51fa\u5e76\u8fd4\u56de\u62c6\u5206 <code>nums</code> \u7684\u6240\u6709\u53ef\u884c\u65b9\u6848\u4e2d\u7684\u6700\u5c0f\u4ee3\u4ef7\u3002</p> <p>\u5728 LeetCode\u4e3b\u7ad9 \u6216 \u529b\u6263\u4e2d\u6587\u793e\u533a \u67e5\u770b\u8be5\u9898\u3002</p> \u89e3\u9898\u601d\u8def \u65b9\u6cd5\u4e00\uff1a\u52a8\u6001\u89c4\u5212 <p>\u5b9a\u4e49 \\(f_{i}\\) \u8868\u793a\u62c6\u5206 <code>nums[:i]</code> \u7684\u6700\u5c0f\u4ee3\u4ef7\uff0c\u5219\u72b6\u6001\u8f6c\u79fb\u5982\u4e0b\uff1a</p> \\[f_{i+1} = \\min_{j=0}^i\\{f_j + trimmed(nums[j:i+1]).length + k\\}\\] Go <pre><code>package main\n\nimport \"math\"\n\nfunc minCost(nums []int, k int) int {\n    n := len(nums)\n    f := make([]int, n+1)\n    for i := range nums {\n        // state[x]\u8868\u793ax\u51fa\u73b0\u7684\u6b21\u6570\uff0cstate[x] == 2 \u8868\u793ax\u5df2\u7ecf\u51fa\u73b0\u8d85\u8fc7\u4e00\u6b21\n        state := make([]int8, n)\n        // multi = trimmed(nums[j:i+1]).length\n        multi, mn := 0, math.MaxInt\n        for j := i; j &gt;= 0; j-- {\n            if x := nums[j]; state[x] == 0 {\n                state[x]++\n            } else if state[x] == 1 {\n                state[x]++\n                multi += 2\n            } else {\n                multi++\n            }\n            mn = min(mn, f[j]+multi)\n        }\n        f[i+1] = mn + k\n    }\n    return f[n]\n}\n\nfunc min(x, y int) int {\n    if x &lt; y {\n        return x\n    } else {\n        return y\n    }\n}\n</code></pre> \u65b9\u6cd5\u4e8c\uff1a\u52a8\u6001\u89c4\u5212 <p>\u8bb0 \\(unique_{j,i}\\) \u8868\u793a <code>nums[j:i+1]</code> \u4e2d\u4ec5\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57\u4e2a\u6570\u3002 \u5219 \\(trimmed(nums[j:i+1]).length = i + 1 - j - unique_{j,i}\\) \uff0c\u65b9\u6cd5\u4e00\u4e2d\u7684\u72b6\u6001\u8f6c\u79fb\u8f6c\u5316\u4e3a\uff1a</p> \\[f_{i+1} = i + 1 + k + \\min_{j=0}^i\\{f_j - j - unique_{j,i}\\}\\] <p>\u5b9a\u4e49 \\(f'_i = f_i - i\\) \uff0c\u5219\u72b6\u6001\u8f6c\u79fb\u8fdb\u4e00\u6b65\u8f6c\u5316\u4e3a\uff1a</p> \\[f'_{i+1} = k + \\min_{j=0}^i\\{f'_j - unique_{j,i}\\}\\] <p>\u6700\u7ec8\u7b54\u6848\u4e3a \\(f_n = f'_{n} + n\\) \u3002</p> Go <pre><code>package main\n\nimport \"math\"\n\nfunc minCost(nums []int, k int) int {\n    n := len(nums)\n    f := make([]int, n+1)\n    for i := range nums {\n        // state[x]\u8868\u793ax\u51fa\u73b0\u7684\u6b21\u6570\uff0cstate[x] == 2 \u8868\u793ax\u5df2\u7ecf\u51fa\u73b0\u8d85\u8fc7\u4e00\u6b21\n        state := make([]int8, n)\n        unique, mn := 0, math.MaxInt\n        for j := i; j &gt;= 0; j-- {\n            if x := nums[j]; state[x] == 0 { // \u9996\u6b21\u51fa\u73b0\n                state[x] = 1\n                unique++\n            } else if state[x] == 1 { // \u4e0d\u518d\u552f\u4e00\n                state[x] = 2\n                unique--\n            }\n            mn = min(mn, f[j]-unique)\n        }\n        f[i+1] = mn + k\n    }\n    return f[n] + n\n}\n\nfunc min(x, y int) int {\n    if x &lt; y {\n        return x\n    } else {\n        return y\n    }\n}\n</code></pre> \u8fdb\u9636\uff1a\u4f7f\u7528\u7ebf\u6bb5\u6811\u4f18\u5316 <p>\u4e0a\u8ff0\u4e24\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u662f\uff1a\\(O(n^2)\\) \uff0c\u5982\u679c\u6570\u636e\u8303\u56f4\u6269\u5927\u4e3a \\(1\u2264n\u22641e6\\) \u3002 \u91c7\u7528\u4e0a\u8ff0\u65b9\u6cd5\u5c06\u4f1a\u8d85\u51fa\u65f6\u95f4\u9650\u5236\uff0c\u53ef\u4ee5\u901a\u8fc7\u7ebf\u6bb5\u6811\u8fdb\u884c\u4f18\u5316\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\uff1a\\(O(n log n)\\) \u3002</p> <p>\u57fa\u4e8e\u65b9\u6cd5\u4e8c\uff0c\u4f7f\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4 \\(j\\) \u5728 \\([0, i]\\) \u533a\u95f4\u5185\u7684 \\(f'_j - unique_{j,i}\\) \u7684\u6700\u5c0f\u503c\u3002 \u5176\u4e2d \\(unique_{j,i}\\) \u4e0e \\(i\\) \u6709\u5173\uff0c\u4ece\u5de6\u81f3\u53f3\u8ba1\u7b97\u81f3 \\(x = nums[i]\\) \u65f6\uff1a \u8bb0 \\(x = nums[i]\\) \u4e0a\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\u4e3a \\(pre_x\\) \uff0c\u4e0a\u4e0a\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\u4e3a \\(pre2_x\\) \uff0c\u5219\uff1a</p> <ul> <li>\\(j\\) \u5728 \\([pre_x+1, i]\\) \u533a\u95f4\u7684 \\(unique_{j,i}\\) \u90fd\u8981\u52a0\u4e00\uff1b</li> <li>\u5982\u679c \\(x\\) \u4e0d\u662f\u9996\u6b21\u51fa\u73b0\uff0c\\(j\\) \u5728 \\([pre2_x+1, pre_x]\\) \u533a\u95f4\u7684 \\(unique_{j,i}\\) \u90fd\u8981\u51cf\u4e00\uff0c\u76f8\u5f53\u4e8e\u628a\u4e4b\u524d\u7684\u52a0\u4e00\u64a4\u9500\u3002</li> </ul> <p>\u901a\u8fc7\u7ebf\u6bb5\u6811\u533a\u95f4\u66f4\u65b0\u5373\u53ef\u5b9e\u73b0\u3002</p> Go <pre><code>package main\n\nfunc minCost(nums []int, k int) (ans int) {\n    n := len(nums)\n    pre := make([]int, n)\n    pre2 := make([]int, n)\n    t := buildST(n)\n    for i, x := range nums {\n        i++                 // \u7ebf\u6bb5\u6811\u533a\u95f4\u4ece1\u5f00\u59cb\n        t.update(i, i, ans) // \u8bbe\u7f6e\u524d\u4e00\u4e2af[i+1]\u7684\u503c\n        t.update(pre[x]+1, i, -1)\n        if pre[x] != 0 { // x\u4e0d\u662f\u9996\u6b21\u51fa\u73b0\n            t.update(pre2[x]+1, pre[x], 1)\n        }\n        ans = k + t.query(1, i)\n        pre2[x] = pre[x]\n        pre[x] = i\n    }\n    return ans + n\n}\n\nfunc buildST(n int) (t seg) {\n    t = make(seg, n&lt;&lt;2)\n    var dfs func(o, l, r int)\n    dfs = func(o, l, r int) {\n        t[o].l, t[o].r = l, r\n        if l != r {\n            mid, lo := t.mid(o), o&lt;&lt;1\n            dfs(lo, l, mid)\n            dfs(lo|1, mid+1, r)\n        }\n    }\n    dfs(1, 1, n)\n    return\n}\n\ntype seg []struct{ l, r, min, add int }\n\nfunc (t seg) mid(o int) int  { return (t[o].l + t[o].r) &gt;&gt; 1 }\nfunc (t seg) maintain(o int) { t[o].min = min(t[o&lt;&lt;1].min, t[o&lt;&lt;1|1].min) }\n\nfunc (t seg) do(o, x int) {\n    t[o].min += x\n    t[o].add += x\n}\n\nfunc (t seg) spread(o int) {\n    if t[o].add != 0 {\n        t.do(o&lt;&lt;1, t[o].add)\n        t.do(o&lt;&lt;1|1, t[o].add)\n        t[o].add = 0\n    }\n}\n\nfunc (t seg) update(l, r, x int) {\n    var dfs func(o int)\n    dfs = func(o int) {\n        if l &lt;= t[o].l &amp;&amp; t[o].r &lt;= r {\n            t.do(o, x)\n        } else {\n            t.spread(o)\n            mid, lo := t.mid(o), o&lt;&lt;1\n            if l &lt;= mid {\n                dfs(lo)\n            }\n            if mid &lt; r {\n                dfs(lo | 1)\n            }\n            t.maintain(o)\n        }\n    }\n    dfs(1)\n}\n\nfunc (t seg) query(l, r int) int {\n    var dfs func(o int) int\n    dfs = func(o int) int {\n        if l &lt;= t[o].l &amp;&amp; t[o].r &lt;= r {\n            return t[o].min\n        } else {\n            t.spread(o)\n            mid, lo := t.mid(o), o&lt;&lt;1\n            if r &lt;= mid {\n                return dfs(lo)\n            } else if l &gt; mid {\n                return dfs(lo | 1)\n            } else {\n                return min(dfs(lo), dfs(lo|1))\n            }\n        }\n    }\n    return dfs(1)\n}\n\nfunc min(x, y int) int {\n    if x &lt; y {\n        return x\n    } else {\n        return y\n    }\n}\n</code></pre>"},{"location":"graph/min-circle/","title":"\u6700\u5c0f\u73af","text":""},{"location":"graph/min-circle/#lc2608-\u56fe\u4e2d\u7684\u6700\u77ed\u73af","title":"LC2608. \u56fe\u4e2d\u7684\u6700\u77ed\u73af","text":"\u95ee\u9898\u63cf\u8ff0 <p>\u73b0\u6709\u4e00\u4e2a\u542b <code>2\u2264n\u22641e3</code> \u4e2a\u9876\u70b9\u7684\u65e0\u5411\u56fe\uff0c\u8282\u70b9\u7f16\u53f7\u4ece <code>0</code> \u5230 <code>n - 1</code> \u3002 \u56fe\u4e2d\u7684\u8fb9\u7531\u4e8c\u7ef4\u6574\u6570\u6570\u7ec4 <code>edges</code> \u8868\u793a\uff0c\u5176\u4e2d <code>edges[i]</code> = [\\(u_i\\), \\(v_i\\)] \u8868\u793a\u8282\u70b9 \\(u_i\\) \u548c \\(v_i\\) \u4e4b\u95f4\u5b58\u5728\u4e00\u6761\u8fb9\u3002 \u8fb9\u7684\u603b\u6570 <code>1\u2264|edges|\u22641e3</code> \uff0c\u6bcf\u5bf9\u8282\u70b9\u6700\u591a\u901a\u8fc7\u4e00\u6761\u8fb9\u8fde\u63a5\uff0c\u5e76\u4e14\u4e0d\u5b58\u5728\u4e0e\u81ea\u8eab\u76f8\u8fde\u7684\u8282\u70b9\u3002 \u8fd4\u56de\u56fe\u4e2d \u6700\u77ed \u73af\u7684\u957f\u5ea6\u3002\u5982\u679c\u4e0d\u5b58\u5728\u73af\uff0c\u5219\u8fd4\u56de <code>-1</code> \u3002</p> <p>\u5728 LeetCode\u4e3b\u7ad9 \u6216 \u529b\u6263\u4e2d\u6587\u793e\u533a \u67e5\u770b\u8be5\u9898\u3002</p> \u89e3\u9898\u601d\u8def <p>\u65b9\u6cd5\u4e00\uff1a\u5220\u8fb9 + \u6700\u77ed\u8def</p> Go <pre><code>package main\n\nimport \"math\"\n\nfunc findShortestCycle(n int, edges [][]int) int {\n    ug := make([][]int, n)\n    for _, e := range edges {\n        u, v := e[0], e[1]\n        ug[u] = append(ug[u], v)\n        ug[v] = append(ug[v], u)\n    }\n    ans := math.MaxInt\n    dis := make([]int, n)\n    for _, e := range edges {\n        f, t := e[0], e[1]\n        // \u8ba1\u7b97\u4ece\u8282\u70b9f\u51fa\u53d1\u5230\u8fbe\u8282\u70b9t\uff0c\u4e14\u4e0d\u7ecf\u8fc7\u8fb9f-t\u7684\u6700\u77ed\u8def\n        // \u7531\u4e8e\u8fb9\u6743\u5747\u4e3a1\uff0c\u901a\u8fc7BFS\u5c31\u53ef\u4ee5\u8ba1\u7b97\u6700\u77ed\u8def\n        for i := range dis {\n            dis[i] = -1\n        }\n        dis[f] = 0\n        q := []int{f}\n        for len(q) != 0 {\n            x := q[0]\n            q = q[1:]\n            for _, y := range ug[x] {\n                if dis[y] == -1 &amp;&amp; (x != f || y != t) {\n                    dis[y] = dis[x] + 1\n                    q = append(q, y)\n                }\n            }\n        }\n        if dis[t] != -1 {\n            ans = min(ans, dis[t]+1)\n        }\n    }\n    if ans == math.MaxInt {\n        return -1\n    } else {\n        return ans\n    }\n}\n\nfunc min(x, y int) int {\n    if x &lt; y {\n        return x\n    } else {\n        return y\n    }\n}\n</code></pre> <p>\u65b9\u6cd5\u4e8c\uff1a\u679a\u4e3e\u8d77\u70b9 + BFS</p> Go <pre><code>package main\n\nimport \"math\"\n\nconst shift, mask = 10, 1&lt;&lt;10 - 1\n\nfunc findShortestCycle(n int, edges [][]int) int {\n    ug := make([][]int, n)\n    for _, e := range edges {\n        u, v := e[0], e[1]\n        ug[u] = append(ug[u], v)\n        ug[v] = append(ug[v], u)\n    }\n    ans := math.MaxInt\n    dis := make([]int, n)\n    for o := 0; o &lt; n; o++ {\n        for i := range dis {\n            dis[i] = -1\n        }\n        dis[o] = 0\n        q := []int{o&lt;&lt;shift | o}\n        for len(q) &gt; 0 {\n            f, x := q[0]&gt;&gt;shift, q[0]&amp;mask\n            q = q[1:]\n            for _, y := range ug[x] {\n                if dis[y] == -1 { // \u7b2c\u4e00\u6b21\u8bbf\u95ee\u8282\u70b9y\uff0c\u8ba1\u7b97\u4e0e\u8282\u70b9o\u7684\u6700\u77ed\u8ddd\u79bb\uff0c\u5e76\u5165\u961f\n                    dis[y] = dis[x] + 1\n                    q = append(q, x&lt;&lt;shift|y)\n                } else if y != f { // \u7b2c\u4e8c\u6b21\u8bbf\u95ee\u8282\u70b9y\uff0c\u901a\u8fc7\u5224\u65ad\u6392\u9664y-x-y\u8fd9\u79cd\u4e0d\u6210\u73af\u7684\u8bbf\u95ee\u60c5\u5f62\n                    ans = min(ans, dis[x]+dis[y]+1)\n                }\n            }\n        }\n    }\n    if ans == math.MaxInt {\n        return -1\n    } else {\n        return ans\n    }\n}\n\nfunc min(x, y int) int {\n    if x &lt; y {\n        return x\n    } else {\n        return y\n    }\n}\n</code></pre>"},{"location":"graph/shortest-path/","title":"\u6700\u77ed\u8def","text":""},{"location":"graph/shortest-path/#floyd-\u7b97\u6cd5","title":"Floyd \u7b97\u6cd5","text":"<p>Floyd \u7b97\u6cd5\u9002\u5408\u7528\u6765\u6c42\u51fa\u56fe\u4e2d \u4efb\u610f\u4e24\u70b9 \u95f4\u7684\u6700\u77ed\u8def\u5f84\u3002</p> <p>\u9002\u7528\u4e8e\u4efb\u4f55\u56fe\uff0c\u65e0\u8bba\u6709\u5411\u65e0\u5411\uff0c\u8fb9\u6743\u6b63\u8d1f\u3002</p> <p>\u7b2c\u4e00\u7ef4\u5ea6\u538b\u7f29\u540e\u7684\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff1a</p> \\[f_{x,y} = \\min(f_{x,y}, f_{x,k} + f_{k,y})\\] <p>\u7b80\u5355\u6765\u8bf4\u5c31\u662f\uff0c\u5141\u8bb8\u7ecf\u8fc7\u8282\u70b9 <code>k</code> \u7684\u60c5\u51b5\u4e0b\uff0c\u8282\u70b9 <code>x</code> \u5230\u8282\u70b9 <code>y</code> \u7684\u6700\u77ed\u8def\u5f84\u53ef\u80fd\u53d8\u5c0f\u3002</p> <p>\u72b6\u6001\u8f6c\u79fb\u65f6\u53ef\u4ee5\u6309\u7167\u4efb\u610f\u987a\u5e8f\u679a\u4e3e\u8282\u70b9 <code>k</code> \u3002</p> \u7b97\u6cd5\u5b9e\u73b0 Go <pre><code>for k := 1; k &lt;= n; k++ {\n    for x := 1; x &lt;= n; x++ {\n        for y := 1; y &lt;= n; y++ {\n            f[x][y] = min(f[x][y], f[x][k] + f[k][y])\n        }\n    }\n}\n</code></pre>"},{"location":"graph/shortest-path/#cf295b-greg-and-graph","title":"CF295B. Greg and Graph","text":"\u95ee\u9898\u63cf\u8ff0 <p>\u7b2c\u4e00\u884c\u8f93\u5165 <code>n(1\u2264n\u2264500)</code> \u8868\u793a <code>n</code> \u4e2a\u70b9\u7684\u6709\u5411\u5b8c\u5168\u56fe\uff0c\u8282\u70b9\u7f16\u53f7\u4ece 1 \u5f00\u59cb\u3002 \u63a5\u4e0b\u6765 <code>n</code> \u884c\u6bcf\u884c\u8f93\u5165 <code>n</code> \u4e2a\u6574\u6570\uff0c\u8868\u793a <code>n x n</code> \u7684\u90bb\u63a5\u77e9\u9635 <code>a</code> \uff0c\u5176\u4e2d <code>a[i][j]</code> \u8868\u793a <code>i</code> \u5230 <code>j</code> \u7684\u8fb9\u6743\u3002 \u9664 <code>a[i][i] = 0</code> \u5916\uff0c\u8fb9\u6743\u503c\u7684\u8303\u56f4\uff1a<code>[1, 1e5]</code> \u3002 \u6700\u540e\u4e00\u884c\u8f93\u5165 <code>1 ~ n</code> \u7684\u6392\u5217\uff0c\u8868\u793a\u8981\u4e00\u4e2a\u4e2a\u5730\u5220\u9664\u56fe\u4e0a\u7684\u70b9\uff0c\u6bcf\u5220\u9664\u4e00\u4e2a\u70b9\uff0c\u8fd9\u4e2a\u70b9\u7684\u51fa\u8fb9\u548c\u5165\u8fb9\u90fd\u4f1a\u88ab\u5220\u9664\u3002 \u8f93\u51fa <code>n</code> \u4e2a\u6570\uff0c\u7b2c <code>i</code> \u4e2a\u6570\u8868\u793a\u7b2c <code>i</code> \u6b21\u5220\u9664\u4e4b\u524d\uff0c\u6240\u6709\u5269\u4f59\u70b9\u5bf9\u7684\u6700\u77ed\u8def\u4e4b\u548c\u3002</p> <p>\u5728 Codeforces \u6216 \u6d1b\u8c37 \u67e5\u770b\u8be5\u9898\u3002</p> \u89e3\u9898\u601d\u8def <p>\u6b63\u96be\u5219\u53cd\uff0c\u6b63\u5e8f\u5220\u70b9\u8f6c\u5316\u4e3a\u5012\u5e8f\u52a0\u70b9\u3002</p> GoJava <pre><code>package main\n\nimport (\n    \"bufio\"\n    . \"fmt\"\n    \"os\"\n)\n\nfunc main() {\n    in := bufio.NewReader(os.Stdin)\n    out := bufio.NewWriter(os.Stdout)\n    defer out.Flush()\n\n    var n int\n    Fscan(in, &amp;n)\n    a := make([][]int, n)\n    for i := range a {\n        a[i] = make([]int, n)\n        for j := range a[i] {\n            Fscan(in, &amp;a[i][j])\n        }\n    }\n    b := make([]int64, n)\n    for i := range b {\n        Fscan(in, &amp;b[i])\n        b[i]--\n    }\n    vis := make([]bool, n)\n    for i := n - 1; i &gt;= 0; i-- {\n        k := b[i]\n        b[i], vis[k] = 0, true\n        for x := range a {\n            for y := range a {\n                a[x][y] = min(a[x][y], a[x][k]+a[k][y])\n                if vis[x] &amp;&amp; vis[y] {\n                    b[i] += int64(a[x][y])\n                }\n            }\n        }\n    }\n    for _, x := range b {\n        Fprintf(out, \"%d \", x)\n    }\n}\n\nfunc min(x, y int) int {\n    if x &lt; y {\n        return x\n    } else {\n        return y\n    }\n}\n</code></pre> <pre><code>import java.io.*;\nimport java.util.*;\n\npublic class Main {\n\n    static BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n    static PrintWriter out = new PrintWriter(System.out);\n\n    public static void main(String[] args) throws IOException {\n        int n = Integer.parseInt(in.readLine());\n        int[][] a = new int[n][n];\n        for (int i = 0; i &lt; n; i++) {\n            StringTokenizer at = new StringTokenizer(in.readLine());\n            for (int j = 0; j &lt; n; j++) {\n                a[i][j] = Integer.parseInt(at.nextToken());\n            }\n        }\n        long[] b = new long[n];\n        StringTokenizer bt = new StringTokenizer(in.readLine());\n        for (int i = 0; i &lt; n; i++) {\n            b[i] = Integer.parseInt(bt.nextToken()) - 1;\n        }\n        boolean[] vis = new boolean[n];\n        for (int i = n - 1; i &gt;= 0; i--) {\n            int k = (int) b[i];\n            vis[k] = true;\n            b[i] = 0;\n            for (int x = 0; x &lt; n; x++) {\n                for (int y = 0; y &lt; n; y++) {\n                    a[x][y] = Math.min(a[x][y], a[x][k] + a[k][y]);\n                    if (vis[x] &amp;&amp; vis[y]) {\n                        b[i] += a[x][y];\n                    }\n                }\n            }\n        }\n        for (long x : b) {\n            out.printf(\"%d \", x);\n        }\n        out.flush();\n        out.close();\n        in.close();\n    }\n}\n</code></pre>"},{"location":"graph/shortest-path/#lc2642-\u6c42\u6700\u77ed\u8def\u5f84\u7684\u56fe\u7c7b","title":"LC2642. \u6c42\u6700\u77ed\u8def\u5f84\u7684\u56fe\u7c7b","text":"\u95ee\u9898\u63cf\u8ff0 <p>\u7ed9\u4f60\u4e00\u4e2a\u6709 <code>n</code> \u4e2a\u8282\u70b9\u7684 \u6709\u5411\u5e26\u6743 \u56fe\uff0c\u8282\u70b9\u7f16\u53f7\u4e3a <code>0</code> \u5230 <code>n - 1</code> \u3002 \u56fe\u4e2d\u7684\u521d\u59cb\u8fb9\u7528\u6570\u7ec4 <code>edges</code> \u8868\u793a\uff0c\u5176\u4e2d \\(edges[i] = [from_i, to_i, cost_i]\\) \u8868\u793a\u4ece \\(from_i\\) \u5230 \\(to_i\\) \u6709\u4e00\u6761\u4ee3\u4ef7\u4e3a \\(cost_i\\) \u7684\u8fb9\u3002</p> <p>\u8bf7\u4f60\u5b9e\u73b0\u4e00\u4e2a <code>Graph</code> \u7c7b\uff1a</p> <ul> <li><code>Graph(int n, int[][] edges)</code> \u521d\u59cb\u5316\u56fe\u6709 <code>n</code> \u4e2a\u8282\u70b9\uff0c\u5e76\u8f93\u5165\u521d\u59cb\u8fb9\u3002</li> <li><code>addEdge(int[] edge)</code> \u5411\u8fb9\u96c6\u4e2d\u6dfb\u52a0\u4e00\u6761\u8fb9\uff0c\u5176\u4e2d <code>edge = [from, to, cost]</code> \u3002\u6570\u636e\u4fdd\u8bc1\u6dfb\u52a0\u8fd9\u6761\u8fb9\u4e4b\u524d\u5bf9\u5e94\u7684\u4e24\u4e2a\u8282\u70b9\u4e4b\u95f4\u6ca1\u6709\u6709\u5411\u8fb9\u3002</li> <li><code>int shortestPath(int x, int y)</code> \u8fd4\u56de\u4ece\u8282\u70b9 <code>x</code> \u5230 <code>y</code> \u7684\u8def\u5f84 \u6700\u5c0f \u4ee3\u4ef7\u3002\u5982\u679c\u8def\u5f84\u4e0d\u5b58\u5728\uff0c\u8fd4\u56de <code>-1</code> \u3002\u4e00\u6761\u8def\u5f84\u7684\u4ee3\u4ef7\u662f\u8def\u5f84\u4e2d\u6240\u6709\u8fb9\u4ee3\u4ef7\u4e4b\u548c\u3002</li> </ul> \u7ea6\u675f\u6761\u4ef6 <ul> <li><code>1 \u2264 n \u2264 100</code></li> <li><code>0 \u2264 edges.length \u2264 n * (n - 1)</code></li> <li><code>edges[i].length == edge.length == 3</code></li> <li>\\(1 \u2264 cost_i, cost \u2264 1e6\\)</li> <li>\u56fe\u4e2d\u4efb\u4f55\u65f6\u5019\u90fd\u4e0d\u4f1a\u6709\u91cd\u8fb9\u548c\u81ea\u73af\u3002</li> <li>\u8c03\u7528 <code>addEdge</code> \u81f3\u591a <code>100</code> \u6b21\u3002</li> <li>\u8c03\u7528 <code>shortestPath</code> \u81f3\u591a <code>100</code> \u6b21\u3002</li> </ul> <p>\u5728 LeetCode\u4e3b\u7ad9 \u6216 \u529b\u6263\u4e2d\u6587\u793e\u533a \u67e5\u770b\u8be5\u9898\u3002</p> \u89e3\u9898\u601d\u8def <p>\u65b9\u6cd5\u4e00\uff1a\u6734\u7d20\uff08\u66b4\u529b\uff09\u7684 Dijkstra \u7b97\u6cd5</p> <p>\u65b9\u6cd5\u4e8c\uff1a\u4f18\u5148\u961f\u5217\u4f18\u5316\u7684 Dijkstra \u7b97\u6cd5</p> <p>\u65b9\u6cd5\u4e09\uff1aFloyd \u7b97\u6cd5</p> <p>\u672c\u9898\u8c03\u7528 <code>addEdge</code> \u548c <code>shortestPath</code> \u7684\u6b21\u6570\u90fd\u6bd4\u8f83\u5c11\uff0c\u4f7f\u7528 Floyd \u7b97\u6cd5\u6216\u8005 Dijkstra \u7b97\u6cd5\u90fd\u53ef\u4ee5\u3002 \u5982\u679c\u8c03\u7528 <code>shortestPath</code> \u6b21\u6570\u6bd4\u8f83\u591a\uff0c\u5219\u4f7f\u7528 Floyd \u7b97\u6cd5\u66f4\u5408\u9002\u3002</p> Go <pre><code>package main\n\nconst inf = 1 &lt;&lt; 32\n\ntype Graph [][]int\n\nfunc Constructor(n int, edges [][]int) Graph {\n    g := make(Graph, n)\n    // \u521d\u59cb\u5316\u8fb9\u6743\n    for i := range g {\n        g[i] = make([]int, n)\n        for j := range g[i] {\n            if i != j {\n                g[i][j] = inf\n            }\n        }\n    }\n    for _, e := range edges {\n        g[e[0]][e[1]] = e[2]\n    }\n    // Floyd \u7b97\u6cd5\u8ba1\u7b97\u6700\u77ed\u8def\n    for k := range g {\n        for x := range g {\n            for y := range g {\n                g[x][y] = min(g[x][y], g[x][k]+g[k][y])\n            }\n        }\n    }\n    return g\n}\n\nfunc (g Graph) AddEdge(e []int) {\n    if f, t, d := e[0], e[1], e[2]; d &lt; g[f][t] {\n        // Floyd \u7b97\u6cd5\u66f4\u65b0\u6700\u77ed\u8def\n        for x := range g {\n            for y := range g {\n                g[x][y] = min(g[x][y], g[x][f]+d+g[t][y])\n            }\n        }\n    }\n}\n\nfunc (g Graph) ShortestPath(x int, y int) int {\n    if g[x][y] == inf {\n        return -1\n    } else {\n        return g[x][y]\n    }\n}\n\nfunc min(x, y int) int {\n    if x &lt; y {\n        return x\n    } else {\n        return y\n    }\n}\n</code></pre>"},{"location":"graph/shortest-path/#dijkstra-\u7b97\u6cd5","title":"Dijkstra \u7b97\u6cd5","text":"<p>Dijkstra \u7b97\u6cd5\u9002\u5408\u7528\u6765\u6c42\u51fa\u65e0\u8d1f\u6743\u8fb9\u56fe\u4e2d\u7684\u5355\u6e90\u6700\u77ed\u8def\u5f84\u3002\u5176\u4e2d\uff1a</p> <ul> <li>\u65e0\u8d1f\u6743\u8fb9 \u8868\u793a\u56fe\u4e2d\u6240\u6709\u8fb9\u7684\u6743\u503c\u5fc5\u987b\u4e3a\u975e\u8d1f\u6570\uff1b</li> <li>\u5355\u6e90\u6700\u77ed\u8def\u5f84 \u8868\u793a Dijkstra \u7b97\u6cd5\u53ef\u4ee5\u6c42\u51fa\u4ece\u67d0\u4e00\u4e2a\u8282\u70b9\u5230\u5176\u4f59\u6240\u6709\u8282\u70b9\u7684\u6700\u77ed\u8def\u5f84\u3002</li> </ul> <p>\u8bb0 \\(V\\) \u662f\u56fe\u4e2d\u7684\u8282\u70b9\u6570\uff0c\\(E\\) \u662f\u56fe\u4e2d\u7684\u8fb9\u6570\u3002 \u6734\u7d20\uff08\u66b4\u529b\uff09\u7684 Dijkstra \u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\uff1a\\(O(V^2)\\) \uff0c\u5728 \u7a20\u5bc6\u56fe \u4e2d\u6548\u7387\u66f4\u4f18\u3002 \u4f18\u5148\u961f\u5217\u4f18\u5316\u7684 Dijkstra \u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\uff1a\\(O(E\\log E)\\) \uff0c\u5728 \u7a00\u758f\u56fe \u4e2d\u6548\u7387\u66f4\u4f18\u3002</p>"},{"location":"graph/shortest-path/#lc2642-\u6c42\u6700\u77ed\u8def\u5f84\u7684\u56fe\u7c7b_1","title":"LC2642. \u6c42\u6700\u77ed\u8def\u5f84\u7684\u56fe\u7c7b","text":"\u95ee\u9898\u63cf\u8ff0 <p>\u7ed9\u4f60\u4e00\u4e2a\u6709 <code>n</code> \u4e2a\u8282\u70b9\u7684 \u6709\u5411\u5e26\u6743 \u56fe\uff0c\u8282\u70b9\u7f16\u53f7\u4e3a <code>0</code> \u5230 <code>n - 1</code> \u3002 \u56fe\u4e2d\u7684\u521d\u59cb\u8fb9\u7528\u6570\u7ec4 <code>edges</code> \u8868\u793a\uff0c\u5176\u4e2d \\(edges[i] = [from_i, to_i, cost_i]\\) \u8868\u793a\u4ece \\(from_i\\) \u5230 \\(to_i\\) \u6709\u4e00\u6761\u4ee3\u4ef7\u4e3a \\(cost_i\\) \u7684\u8fb9\u3002</p> <p>\u8bf7\u4f60\u5b9e\u73b0\u4e00\u4e2a <code>Graph</code> \u7c7b\uff1a</p> <ul> <li><code>Graph(int n, int[][] edges)</code> \u521d\u59cb\u5316\u56fe\u6709 <code>n</code> \u4e2a\u8282\u70b9\uff0c\u5e76\u8f93\u5165\u521d\u59cb\u8fb9\u3002</li> <li><code>addEdge(int[] edge)</code> \u5411\u8fb9\u96c6\u4e2d\u6dfb\u52a0\u4e00\u6761\u8fb9\uff0c\u5176\u4e2d <code>edge = [from, to, cost]</code> \u3002\u6570\u636e\u4fdd\u8bc1\u6dfb\u52a0\u8fd9\u6761\u8fb9\u4e4b\u524d\u5bf9\u5e94\u7684\u4e24\u4e2a\u8282\u70b9\u4e4b\u95f4\u6ca1\u6709\u6709\u5411\u8fb9\u3002</li> <li><code>int shortestPath(int x, int y)</code> \u8fd4\u56de\u4ece\u8282\u70b9 <code>x</code> \u5230 <code>y</code> \u7684\u8def\u5f84 \u6700\u5c0f \u4ee3\u4ef7\u3002\u5982\u679c\u8def\u5f84\u4e0d\u5b58\u5728\uff0c\u8fd4\u56de <code>-1</code> \u3002\u4e00\u6761\u8def\u5f84\u7684\u4ee3\u4ef7\u662f\u8def\u5f84\u4e2d\u6240\u6709\u8fb9\u4ee3\u4ef7\u4e4b\u548c\u3002</li> </ul> \u7ea6\u675f\u6761\u4ef6 <ul> <li><code>1 \u2264 n \u2264 100</code></li> <li><code>0 \u2264 edges.length \u2264 n * (n - 1)</code></li> <li><code>edges[i].length == edge.length == 3</code></li> <li>\\(1 \u2264 cost_i, cost \u2264 1e6\\)</li> <li>\u56fe\u4e2d\u4efb\u4f55\u65f6\u5019\u90fd\u4e0d\u4f1a\u6709\u91cd\u8fb9\u548c\u81ea\u73af\u3002</li> <li>\u8c03\u7528 <code>addEdge</code> \u81f3\u591a <code>100</code> \u6b21\u3002</li> <li>\u8c03\u7528 <code>shortestPath</code> \u81f3\u591a <code>100</code> \u6b21\u3002</li> </ul> <p>\u5728 LeetCode\u4e3b\u7ad9 \u6216 \u529b\u6263\u4e2d\u6587\u793e\u533a \u67e5\u770b\u8be5\u9898\u3002</p> \u89e3\u9898\u601d\u8def <p>\u65b9\u6cd5\u4e00\uff1aFloyd \u7b97\u6cd5</p> \u65b9\u6cd5\u4e8c\uff1a\u6734\u7d20\uff08\u66b4\u529b\uff09\u7684 Dijkstra \u7b97\u6cd5 Go <pre><code>package main\n\nconst inf = 1 &lt;&lt; 32\n\ntype Graph [][]int\n\nfunc Constructor(n int, edges [][]int) Graph {\n    g := make(Graph, n)\n    for i := range g {\n        g[i] = make([]int, n)\n        for j := range g[i] {\n            g[i][j] = inf\n        }\n    }\n    for _, e := range edges {\n        g[e[0]][e[1]] = e[2]\n    }\n    return g\n}\n\nfunc (g Graph) AddEdge(e []int) {\n    g[e[0]][e[1]] = e[2]\n}\n\nfunc (g Graph) ShortestPath(start int, end int) int {\n    n := len(g)\n    dis := make([]int, n)\n    for i := range dis {\n        dis[i] = inf\n    }\n    dis[start] = 0\n    vis := make([]bool, n)\n    for {\n        x := -1\n        for i, b := range vis {\n            if !b &amp;&amp; (x == -1 || dis[i] &lt; dis[x]) {\n                x = i\n            }\n        }\n        if x == -1 || dis[x] == inf {\n            return -1\n        }\n        if x == end {\n            return dis[x]\n        }\n        vis[x] = true\n        for y, d := range g[x] {\n            dis[y] = min(dis[y], dis[x]+d)\n        }\n    }\n}\n\nfunc min(x, y int) int {\n    if x &lt; y {\n        return x\n    } else {\n        return y\n    }\n}\n</code></pre> \u65b9\u6cd5\u4e09\uff1a\u4f18\u5148\u961f\u5217\u4f18\u5316\u7684 Dijkstra \u7b97\u6cd5 Go <pre><code>package main\n\nimport \"container/heap\"\n\nconst inf = 1 &lt;&lt; 32\n\ntype Graph [][]int\n\nfunc Constructor(n int, edges [][]int) Graph {\n    g := make([][]int, n)\n    for _, e := range edges {\n        f, t, d := e[0], e[1], e[2]\n        g[f] = append(g[f], d&lt;&lt;shift|t)\n    }\n    return g\n}\n\nfunc (g Graph) AddEdge(e []int) {\n    f, t, d := e[0], e[1], e[2]\n    g[f] = append(g[f], d&lt;&lt;shift|t)\n}\n\nfunc (g Graph) ShortestPath(start int, end int) int {\n    n := len(g)\n    dis := make([]int, n)\n    for i := range dis {\n        dis[i] = inf\n    }\n    dis[start] = 0\n    h := hp{{start, 0}}\n    for len(h) &gt; 0 {\n        p := heap.Pop(&amp;h).(pair)\n        if f := p.o; f == end {\n            return dis[f]\n        } else if p.dis == dis[f] {\n            for _, dt := range g[f] {\n                t := dt &amp; mask\n                if d := p.dis + dt&gt;&gt;shift; d &lt; dis[t] {\n                    dis[t] = d\n                    heap.Push(&amp;h, pair{t, d})\n                }\n            }\n        }\n    }\n    return -1\n}\n\nconst shift, mask = 8, 1&lt;&lt;8 - 1\n\ntype pair struct{ o, dis int }\ntype hp []pair\n\nfunc (h hp) Len() int            { return len(h) }\nfunc (h hp) Less(i, j int) bool  { return h[i].dis &lt; h[j].dis }\nfunc (h hp) Swap(i, j int)       { h[i], h[j] = h[j], h[i] }\nfunc (h *hp) Push(x interface{}) { *h = append(*h, x.(pair)) }\nfunc (h *hp) Pop() interface{} {\n    old := *h\n    n := len(old)\n    x := old[n-1]\n    *h = old[:n-1]\n    return x\n}\n\nfunc min(x, y int) int {\n    if x &lt; y {\n        return x\n    } else {\n        return y\n    }\n}\n</code></pre>"},{"location":"graph/shortest-path/#lc2662-\u524d\u5f80\u76ee\u6807\u7684\u6700\u5c0f\u4ee3\u4ef7","title":"LC2662. \u524d\u5f80\u76ee\u6807\u7684\u6700\u5c0f\u4ee3\u4ef7","text":"\u95ee\u9898\u63cf\u8ff0 <p>\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 <code>start</code> \uff0c\u5176\u4e2d <code>start = [startX, startY]</code> \u8868\u793a\u521d\u59cb\u4f4d\u7f6e\u3002 \u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 <code>target</code> \uff0c\u5176\u4e2d <code>target = [targetX, targetY]</code> \u8868\u793a\u76ee\u6807\u4f4d\u7f6e\u3002 \u4ece\u4f4d\u7f6e <code>(x1, y1)</code> \u5230\u4efb\u4e00\u5176\u4ed6\u4f4d\u7f6e <code>(x2, y2)</code> \u7684\u4ee3\u4ef7\u662f <code>|x2 - x1| + |y2 - y1|</code> \u3002 \u7ed9\u4f60\u4e00\u4e2a\u4e8c\u7ef4\u6574\u6570\u6570\u7ec4 <code>specialRoads</code> \uff0c\u8868\u793a\u7a7a\u95f4\u4e2d\u5b58\u5728\u7684\u4e00\u4e9b\u7279\u6b8a\u8def\u5f84\u3002\u4f60\u53ef\u4ee5\u4f7f\u7528\u6bcf\u6761\u7279\u6b8a\u8def\u5f84\u4efb\u610f\u6b21\u6570\u3002 \u5176\u4e2d \\(specialRoads[i] = [x1_i, y1_i, x2_i, y2_i, cost_i]\\) \u8868\u793a\u7b2c <code>i</code> \u6761\u7279\u6b8a\u8def\u5f84\u53ef\u4ee5\u4ece \\((x1_i, y1_i)\\) \u5230 \\((x2_i, y2_i)\\) \uff0c\u4f46\u4ee3\u4ef7\u7b49\u4e8e \\(cost_i\\) \u3002 \u8fd4\u56de\u4ece <code>(startX, startY)</code> \u5230 <code>(targetX, targetY)</code> \u6240\u9700\u7684\u6700\u5c0f\u4ee3\u4ef7\u3002</p> \u7ea6\u675f\u6761\u4ef6 <ul> <li><code>1 &lt;= startX &lt;= targetX &lt;= 1e5</code></li> <li><code>1 &lt;= startY &lt;= targetY &lt;= 1e5</code></li> <li><code>1 &lt;= specialRoads.length &lt;= 200</code></li> <li>\\(startX &lt;= x1_i, x2_i &lt;= targetX\\)</li> <li>\\(startY &lt;= y1_i, y2_i &lt;= targetY\\)</li> <li>\\(1 &lt;= cost_i &lt;= 1e5\\)</li> </ul> <p>\u5728 LeetCode\u4e3b\u7ad9 \u6216 \u529b\u6263\u4e2d\u6587\u793e\u533a \u67e5\u770b\u8be5\u9898\u3002</p> \u89e3\u9898\u601d\u8def Go <pre><code>package main\n\nimport \"container/heap\"\n\nfunc minimumCost(start []int, target []int, specialRoads [][]int) int {\n    n := len(specialRoads)\n    sx, sy := start[0], start[1]\n    tx, ty := target[0], target[1]\n    dis := make([]int, n)\n    vis := make([]bool, n+1)\n    for i, r := range specialRoads {\n        x2, y2 := r[2], r[3]\n        dis[i] = x2 - sx + y2 - sy\n    }\n    ans := tx - sx + ty - sy\n    h := hp{{n&lt;&lt;shift2 | sx&lt;&lt;shift | sy, 0}}\n    for len(h) &gt; 0 {\n        p := heap.Pop(&amp;h).(pair)\n        if i, x, y := p.ixy&gt;&gt;shift2, p.ixy&gt;&gt;shift&amp;mask, p.ixy&amp;mask; !vis[i] {\n            vis[i] = true\n            ans = min(ans, p.dis+tx-x+ty-y)\n            for j, r := range specialRoads {\n                if !vis[j] {\n                    x1, y1, x2, y2, dj := r[0], r[1], r[2], r[3], r[4]\n                    if d := p.dis + abs(x-x1) + abs(y-y1) + dj; d &lt; dis[j] {\n                        dis[j] = d\n                        heap.Push(&amp;h, pair{j&lt;&lt;shift2 | x2&lt;&lt;shift | y2, d})\n                    }\n                }\n            }\n        }\n    }\n    return ans\n}\n\nconst shift, shift2, mask = 20, 40, 1&lt;&lt;20 - 1\n\ntype pair struct{ ixy, dis int }\ntype hp []pair\n\nfunc (h hp) Len() int            { return len(h) }\nfunc (h hp) Less(i, j int) bool  { return h[i].dis &lt; h[j].dis }\nfunc (h hp) Swap(i, j int)       { h[i], h[j] = h[j], h[i] }\nfunc (h *hp) Push(x interface{}) { *h = append(*h, x.(pair)) }\nfunc (h *hp) Pop() interface{} {\n    old := *h\n    n := len(old)\n    x := old[n-1]\n    *h = old[:n-1]\n    return x\n}\n\nfunc abs(x int) int {\n    if x &lt; 0 {\n        return -x\n    } else {\n        return x\n    }\n}\n\nfunc min(x, y int) int {\n    if x &lt; y {\n        return x\n    } else {\n        return y\n    }\n}\n</code></pre>"},{"location":"graph/shortest-path/#0-1-bfs\u53cc\u7aef\u961f\u5217bfs","title":"0-1 BFS\uff08\u53cc\u7aef\u961f\u5217BFS\uff09","text":"<p>0-1 BFS \u9002\u7528\u4e8e\u89e3\u51b3\u8fb9\u6743\u503c\u53ea\u6709 \\(0\\) \u548c \\(1\\)\uff08\u6216\u8005\u80fd\u591f\u8f6c\u5316\u4e3a\u8fd9\u79cd\u60c5\u51b5\uff09\u7684\u6700\u77ed\u8def\u95ee\u9898\u3002</p> <p>\u8fd9\u91cc\u6709\u4e00\u7bc7\u5f88\u8be6\u7ec6\u7684\u6559\u7a0b\u3002</p> <p>0-1 BFS \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\uff1a\\(O(E+V)\\) \uff0c\u5176\u4e2d \\(V\\) \u548c \\(E\\) \u5206\u522b\u662f\u56fe\u4e2d\u7684\u8282\u70b9\u6570\u548c\u8fb9\u6570\u3002</p>"},{"location":"graph/shortest-path/#lc1368-\u81f3\u5c11\u6709\u4e00\u6761\u6709\u6548\u8def\u5f84\u7684\u6700\u5c0f\u4ee3\u4ef7","title":"LC1368. \u81f3\u5c11\u6709\u4e00\u6761\u6709\u6548\u8def\u5f84\u7684\u6700\u5c0f\u4ee3\u4ef7","text":"\u95ee\u9898\u63cf\u8ff0 <p>\u7ed9\u4f60\u4e00\u4e2a <code>m x n (1\u2264m,n\u2264100)</code> \u7684\u7f51\u683c\u56fe <code>grid</code> \u3002 \u6bcf\u4e2a\u5355\u5143\u683c\u7684\u6570\u5b57\u8868\u793a\u5f53\u524d\u5355\u5143\u683c\u5141\u8bb8\u7684\u524d\u8fdb\u65b9\u5411\uff0c<code>1, 2, 3, 4</code> \u5206\u522b\u5bf9\u5e94\u53f3\u3001\u5de6\u3001\u4e0b\u3001\u4e0a\u56db\u4e2a\u65b9\u5411\u3002 \u6bcf\u4e2a\u5355\u5143\u683c\u7684\u6570\u5b57\u53ef\u4ee5\u4fee\u6539\u4e00\u6b21\uff0c\u4fee\u6539\u7684\u4ee3\u4ef7\u4e3a <code>1</code> \u3002 \u6c42\u4f7f\u5f97\u7f51\u683c\u56fe\u4e2d\u81f3\u5c11\u6709\u4e00\u6761\u4ece <code>(0, 0)</code> \u5230 <code>(m-1, n-1)</code> \u7684\u6709\u6548\u8def\u5f84\u7684\u6700\u5c0f\u4fee\u6539\u4ee3\u4ef7\u3002</p> <p>\u5728 LeetCode\u4e3b\u7ad9 \u6216 \u529b\u6263\u4e2d\u6587\u793e\u533a \u67e5\u770b\u8be5\u9898\u3002</p> \u89e3\u9898\u601d\u8def <p>\u6839\u636e\u9898\u610f\u5efa\u7acb\u6709\u5411\u56fe\uff0c\u6bcf\u4e2a\u5355\u5143\u683c\u4f5c\u4e3a\u4e00\u4e2a\u8282\u70b9\u3002 \u6bcf\u4e2a\u8282\u70b9\u5411\u4e0e\u5176\u76f8\u90bb\u7684\u5355\u5143\u683c\u8282\u70b9\u8fde\u51fa\u6709\u5411\u8fb9\uff0c\u5982\u679c\u65b9\u5411\u76f8\u540c\u5219\u8fb9\u6743\u4e3a <code>0</code> \uff1b\u65b9\u5411\u4e0d\u540c\u5219\u8fb9\u6743\u4e3a <code>1</code> \u3002 \u95ee\u9898\u8f6c\u5316\u4e3a\u6c42\u4ece <code>(0, 0)</code> \u5230 <code>(m-1, n-1)</code> \u7684\u6700\u77ed\u8def\u5f84\u3002</p> <p>\u65b9\u6cd5\u4e00\uff1a0-1 BFS</p> Go <pre><code>package main\n\nfunc minCost(grid [][]int) int {\n    m, n := len(grid), len(grid[0])\n    mn := m * n\n    // dp[x][y]\u8868\u793a\u4ece\u8d77\u70b9\u5230\u4f4d\u7f6e(x, y)\u7684\u6700\u5c0f\u4ee3\u4ef7\n    dp := make([][]int, m)\n    vis := make([][]bool, m)\n    for i := range dp {\n        dp[i] = make([]int, n)\n        vis[i] = make([]bool, n)\n        for j := range dp[i] {\n            dp[i][j] = mn\n        }\n    }\n    dp[0][0] = 0\n\n    q := deque{{0}}\n    for q.size() != 0 {\n        if x, y := q.remove(0); !vis[x][y] {\n            vis[x][y] = true\n            for i, d := range dirs {\n                nx, ny := x+d[0], y+d[1]\n                if 0 &lt;= nx &amp;&amp; nx &lt; m &amp;&amp; 0 &lt;= ny &amp;&amp; ny &lt; n {\n                    cost := 0\n                    if i+1 != grid[x][y] {\n                        cost = 1\n                    }\n                    if dis := dp[x][y] + cost; dis &lt; dp[nx][ny] {\n                        dp[nx][ny] = dis\n                        q.add(cost, nx, ny)\n                    }\n                }\n            }\n        }\n    }\n    return dp[m-1][n-1]\n}\n\nvar dirs = [][]int{{0, 1}, {0, -1}, {1, 0}, {-1, 0}}\n\nconst shift, mask = 8, (1 &lt;&lt; 8) - 1\n\n// \u4e24\u4e2a slice \u5934\u5bf9\u5934\u5b9e\u73b0\u53cc\u7aef\u961f\u5217\ntype deque [2][]int\n\n// size \u961f\u5217\u4e2d\u7684\u5143\u7d20\u4e2a\u6570\nfunc (q *deque) size() int { return len(q[0]) + len(q[1]) }\n\n// add \u5411\u961f\u5217\u4e2d\u6dfb\u52a0\u5750\u6807(x, y)\u3002i == 0\u5728\u961f\u9996\u6dfb\u52a0\uff1bi == 1\u5728\u961f\u5c3e\u6dfb\u52a0\nfunc (q *deque) add(i, x, y int) { q[i] = append(q[i], x&lt;&lt;shift|y) }\n\n// remove \u4ece\u961f\u5217\u4e2d\u79fb\u9664\u4e00\u4e2a\u5750\u6807(x, y)\u5e76\u8fd4\u56de\u3002i == 0\u4ece\u961f\u9996\u79fb\u9664\uff1bi == 1\u4ece\u961f\u5c3e\u79fb\u9664\nfunc (q *deque) remove(i int) (x, y int) {\n    var xy int\n    if tail := len(q[i]) - 1; tail == -1 {\n        xy, q[i^1] = q[i^1][0], q[i^1][1:]\n    } else {\n        xy, q[i] = q[i][tail], q[i][:tail]\n    }\n    return xy &gt;&gt; shift, xy &amp; mask\n}\n</code></pre> <p>\u65b9\u6cd5\u4e8c\uff1aDijkstra \u7b97\u6cd5</p> <p>Dijkstra \u7b97\u6cd5\u4e0d\u662f\u672c\u9898\u7684\u91cd\u70b9\uff0c\u8fd9\u91cc\u662f\u66f4\u9002\u5408\u4f7f\u7528Dijkstra \u7b97\u6cd5\u7684\u9898\u76ee\u3002</p> Go <pre><code>package main\n\nimport \"container/heap\"\n\nfunc minCost(grid [][]int) int {\n    m, n := len(grid), len(grid[0])\n    mn := m * n\n    dis := make([][]int, m)\n    for i := range dis {\n        dis[i] = make([]int, n)\n        for j := range dis[i] {\n            dis[i][j] = mn\n        }\n    }\n    h := hp{{}}\n    dis[0][0] = 0\n    for h.Len() &gt; 0 {\n        f := heap.Pop(&amp;h).(pair)\n        if x, y := f.x, f.y; f.dis &lt;= dis[x][y] {\n            for i, dir := range dirs {\n                nx, ny := x+dir[0], y+dir[1]\n                if 0 &lt;= nx &amp;&amp; nx &lt; m &amp;&amp; 0 &lt;= ny &amp;&amp; ny &lt; n {\n                    cost := 0\n                    if i+1 != grid[x][y] {\n                        cost = 1\n                    }\n                    if d := f.dis + cost; d &lt; dis[nx][ny] {\n                        dis[nx][ny] = d\n                        heap.Push(&amp;h, pair{nx, ny, d})\n                    }\n                }\n            }\n        }\n    }\n    return dis[m-1][n-1]\n}\n\nvar dirs = [][]int{{0, 1}, {0, -1}, {1, 0}, {-1, 0}}\n\ntype pair struct{ x, y, dis int } // \u5355\u5143\u683c(x, y)\u53ca\u5176\u4e0e\u8d77\u70b9\u7684\u8ddd\u79bb\ntype hp []pair                    // \u5806\uff08\u4f18\u5148\u961f\u5217\uff09\n\nfunc (h hp) Len() int            { return len(h) }\nfunc (h hp) Less(i, j int) bool  { return h[i].dis &lt; h[j].dis }\nfunc (h hp) Swap(i, j int)       { h[i], h[j] = h[j], h[i] }\nfunc (h *hp) Push(x interface{}) { *h = append(*h, x.(pair)) }\nfunc (h *hp) Pop() interface{} {\n    old := *h\n    n := len(old)\n    x := old[n-1]\n    *h = old[:n-1]\n    return x\n}\n</code></pre>"},{"location":"graph/shortest-path/#lc2290-\u79fb\u9664\u969c\u788d\u7269\u7684\u6700\u5c0f\u6570\u76ee","title":"LC2290. \u79fb\u9664\u969c\u788d\u7269\u7684\u6700\u5c0f\u6570\u76ee","text":"\u95ee\u9898\u63cf\u8ff0 <p>\u7ed9\u4f60\u4e00\u4e2a <code>m x n</code> <code>1\u2264m,n\u22641e5</code> \u4e14 <code>2\u2264m*n\u22641e5</code> \u7684\u7f51\u683c\u56fe <code>grid</code> \u3002\u6bcf\u4e2a\u5355\u5143\u683c\u90fd\u662f\u4e24\u4e2a\u503c\u4e4b\u4e00\uff1a</p> <ul> <li><code>0</code> \u8868\u793a\u4e00\u4e2a\u7a7a\u5355\u5143\u683c\uff1b</li> <li><code>1</code> \u8868\u793a\u4e00\u4e2a\u53ef\u4ee5\u79fb\u9664\u7684\u969c\u788d\u7269\u3002</li> </ul> <p>\u4f60\u53ef\u4ee5\u5411\u4e0a\u3001\u4e0b\u3001\u5de6\u3001\u53f3\u79fb\u52a8\uff0c\u4ece\u4e00\u4e2a\u7a7a\u5355\u5143\u683c\u79fb\u52a8\u5230\u53e6\u4e00\u4e2a\u7a7a\u5355\u5143\u683c\u3002 \u73b0\u5728\u4f60\u9700\u8981\u4ece\u5de6\u4e0a\u89d2 <code>(0, 0)</code> \u79fb\u52a8\u5230\u53f3\u4e0b\u89d2 <code>(m-1, n-1)</code> \uff0c\u8fd4\u56de\u9700\u8981\u79fb\u9664\u7684\u969c\u788d\u7269\u7684\u6700\u5c0f\u6570\u76ee\u3002 \u9898\u76ee\u4fdd\u8bc1\u5de6\u4e0a\u89d2 <code>(0, 0)</code> \u548c\u53f3\u4e0b\u89d2 <code>(m-1, n-1)</code> \u4e3a\u7a7a\u5355\u5143\u683c\u3002</p> <p>\u5728 LeetCode\u4e3b\u7ad9 \u6216 \u529b\u6263\u4e2d\u6587\u793e\u533a \u67e5\u770b\u8be5\u9898\u3002</p> \u89e3\u9898\u601d\u8def <p>\u6839\u636e\u9898\u610f\u5efa\u7acb\u6709\u5411\u56fe\uff0c\u6bcf\u4e2a\u5355\u5143\u683c\u4f5c\u4e3a\u4e00\u4e2a\u8282\u70b9\u3002 \u6bcf\u4e2a\u8282\u70b9\u5411\u4e0e\u5176\u76f8\u90bb\u7684\u5355\u5143\u683c\u8282\u70b9\u8fde\u51fa\u6709\u5411\u8fb9\uff0c\u76f8\u90bb\u5355\u5143\u683c\u7684\u503c\u5373\u4e3a\u8fb9\u6743\u3002 \u95ee\u9898\u8f6c\u5316\u4e3a\u6c42\u4ece <code>(0, 0)</code> \u5230 <code>(m-1, n-1)</code> \u7684\u6700\u77ed\u8def\u5f84\u3002</p> <p>\u65b9\u6cd5\u4e00\uff1a0-1 BFS</p> Go <pre><code>package main\n\nfunc minimumObstacles(grid [][]int) int {\n    m, n := len(grid), len(grid[0])\n    mn := m * n\n    // dp[i][j]\u8868\u793a\u5230\u8fbegrid[i][j]\u9700\u8981\u79fb\u9664\u7684\u969c\u788d\u7269\u7684\u6700\u5c0f\u6570\u76ee\uff0c\u5373\u6700\u5c0f\u4ee3\u4ef7\n    dp := make([][]int, m)\n    vis := make([][]bool, m)\n    for i := 0; i &lt; m; i++ {\n        dp[i] = make([]int, n)\n        vis[i] = make([]bool, n)\n        for j := 0; j &lt; n; j++ {\n            dp[i][j] = mn\n        }\n    }\n    dp[0][0] = 0\n\n    // 0-1 BFS\uff0c(0, 0)\u7684\u6700\u5c0f\u4ee3\u4ef7\u4e3a0\uff0c\u5165\u961f\u9996\n    q := deque{{0}}\n    for q.size() != 0 {\n        if x, y := q.remove(0); !vis[x][y] {\n            vis[x][y] = true\n            for _, delta := range dirs {\n                nx, ny := x+delta[0], y+delta[1]\n                if 0 &lt;= nx &amp;&amp; nx &lt; m &amp;&amp; 0 &lt;= ny &amp;&amp; ny &lt; n {\n                    cost := grid[nx][ny]\n                    if dis := dp[x][y] + cost; dis &lt; dp[nx][ny] {\n                        // \u66f4\u65b0\u5230\u8fbe(nx, ny)\u7684\u6700\u5c0f\u4ee3\u4ef7\n                        dp[nx][ny] = dis\n                        // \u7a7a\u683c\u4ee3\u4ef7\u4e3a0\u5165\u961f\u9996\uff0c\u969c\u788d\u4ee3\u4ef7\u4e3a1\u5165\u961f\u5c3e\uff0c\u4f18\u5148\u641c\u7d22\u4ee3\u4ef7\u5c0f\u7684\u5750\u6807\n                        q.add(cost, nx, ny)\n                    }\n                }\n            }\n        }\n    }\n    return dp[m-1][n-1]\n}\n\nvar dirs = [][]int{{-1, 0}, {0, -1}, {1, 0}, {0, 1}}\n\nconst shift, mask = 20, (1 &lt;&lt; 20) - 1\n\n// \u4e24\u4e2aslice\u5934\u5bf9\u5934\u5b9e\u73b0deque\ntype deque [2][]int\n\n// size \u961f\u5217\u4e2d\u7684\u5143\u7d20\u4e2a\u6570\nfunc (q *deque) size() int {\n    return len(q[0]) + len(q[1])\n}\n\n// add \u5411\u961f\u5217\u4e2d\u6dfb\u52a0\u5750\u6807(x, y)\u3002i == 0\u5728\u961f\u9996\u6dfb\u52a0\uff1bi == 1\u5728\u961f\u5c3e\u6dfb\u52a0\nfunc (q *deque) add(i, x, y int) {\n    q[i] = append(q[i], (x&lt;&lt;shift)|y)\n}\n\n// remove \u4ece\u961f\u5217\u4e2d\u79fb\u9664\u4e00\u4e2a\u5750\u6807(x, y)\u5e76\u8fd4\u56de\u3002i == 0\u4ece\u961f\u9996\u79fb\u9664\uff1bi == 1\u4ece\u961f\u5c3e\u79fb\u9664\nfunc (q *deque) remove(i int) (x, y int) {\n    var xy int\n    if tail := len(q[i]) - 1; tail &gt; -1 {\n        xy, q[i] = q[i][tail], q[i][:tail]\n    } else {\n        // 0^1 = 1, 1^1 = 0\n        xy, q[i^1] = q[i^1][0], q[i^1][1:]\n    }\n    return xy &gt;&gt; shift, xy &amp; mask\n}\n</code></pre> <p>\u65b9\u6cd5\u4e8c\uff1aDijkstra \u7b97\u6cd5</p> <p>Dijkstra \u7b97\u6cd5\u4e0d\u662f\u672c\u9898\u7684\u91cd\u70b9\uff0c\u8fd9\u91cc\u662f\u66f4\u9002\u5408\u4f7f\u7528Dijkstra \u7b97\u6cd5\u7684\u9898\u76ee\u3002</p> Go <pre><code>package main\n\nimport \"container/heap\"\n\nfunc minimumObstacles(grid [][]int) int {\n    m, n := len(grid), len(grid[0])\n    mn := m * n\n    dis := make([][]int, m)\n    for i := range dis {\n        dis[i] = make([]int, n)\n        for j := range dis[i] {\n            dis[i][j] = mn\n        }\n    }\n    dis[0][0] = 0\n\n    h := hp{{}}\n    for h.Len() != 0 {\n        f := heap.Pop(&amp;h).(tuple)\n        if x, y := f.x, f.y; f.dis &lt;= dis[x][y] {\n            for _, d := range dirs {\n                nx, ny := x+d[0], y+d[1]\n                if 0 &lt;= nx &amp;&amp; nx &lt; m &amp;&amp; 0 &lt;= ny &amp;&amp; ny &lt; n {\n                    if d := f.dis + grid[nx][ny]; d &lt; dis[nx][ny] {\n                        dis[nx][ny] = d\n                        heap.Push(&amp;h, tuple{nx, ny, d})\n                    }\n                }\n            }\n        }\n    }\n    return dis[m-1][n-1]\n}\n\nvar dirs = [][]int{{-1, 0}, {1, 0}, {0, -1}, {0, 1}}\n\ntype tuple struct{ x, y, dis int } // \u5355\u5143\u683c(x, y)\u53ca\u5176\u4e0e\u8d77\u70b9\u7684\u8ddd\u79bb\ntype hp []tuple                    // \u5806\uff08\u4f18\u5148\u961f\u5217\uff09\n\nfunc (h hp) Len() int            { return len(h) }\nfunc (h hp) Less(i, j int) bool  { return h[i].dis &lt; h[j].dis }\nfunc (h hp) Swap(i, j int)       { h[i], h[j] = h[j], h[i] }\nfunc (h *hp) Push(x interface{}) { *h = append(*h, x.(tuple)) }\nfunc (h *hp) Pop() interface{} {\n    old := *h\n    n := len(old)\n    x := old[n-1]\n    *h = old[:n-1]\n    return x\n}\n</code></pre>"},{"location":"graph/topo/","title":"\u62d3\u6251\u6392\u5e8f","text":""},{"location":"graph/topo/#lc2127-\u53c2\u52a0\u4f1a\u8bae\u7684\u6700\u591a\u5458\u5de5\u6570","title":"LC2127. \u53c2\u52a0\u4f1a\u8bae\u7684\u6700\u591a\u5458\u5de5\u6570","text":"\u95ee\u9898\u63cf\u8ff0 <p>\u4e00\u4e2a\u516c\u53f8\u51c6\u5907\u7ec4\u7ec7\u4e00\u573a\u4f1a\u8bae\uff0c\u9080\u8bf7\u540d\u5355\u4e0a\u6709\u00a0<code>2\u2264n\u22641e5</code>\u00a0\u4f4d\u5458\u5de5\u3002\u5458\u5de5\u7f16\u53f7\u4e3a <code>0</code>\u00a0\u5230 <code>n - 1</code>\u00a0\u3002 \u516c\u53f8\u51c6\u5907\u4e86\u4e00\u5f20 \u5706\u5f62\u00a0\u7684\u684c\u5b50\uff0c\u53ef\u4ee5\u5750\u4e0b \u4efb\u610f\u6570\u76ee\u00a0\u7684\u5458\u5de5\u3002 \u6bcf\u4f4d\u5458\u5de5\u90fd\u6709\u4e00\u4f4d \u559c\u6b22\u00a0\u7684\u5458\u5de5\uff0c\u6bcf\u4f4d\u5458\u5de5\u00a0\u5f53\u4e14\u4ec5\u5f53\u00a0\u4ed6\u88ab\u5b89\u6392\u5728\u559c\u6b22\u5458\u5de5\u7684\u65c1\u8fb9\uff0c\u4ed6\u624d\u4f1a\u53c2\u52a0\u4f1a\u8bae\u3002 \u6bcf\u4f4d\u5458\u5de5\u559c\u6b22\u7684\u5458\u5de5 \u4e0d\u4f1a\u00a0\u662f\u4ed6\u81ea\u5df1\u3002 \u7ed9\u4f60\u4e00\u4e2a\u4e0b\u6807\u4ece <code>0</code>\u00a0\u5f00\u59cb\u7684\u6574\u6570\u6570\u7ec4\u00a0<code>favorite</code>\u00a0\uff0c\u5176\u4e2d\u00a0<code>favorite[i]</code>\u00a0\u8868\u793a\u7b2c\u00a0<code>i</code>\u00a0\u4f4d\u5458\u5de5\u559c\u6b22\u7684\u5458\u5de5\u3002 \u8bf7\u4f60\u8fd4\u56de\u53c2\u52a0\u4f1a\u8bae\u7684\u00a0\u6700\u591a\u5458\u5de5\u6570\u76ee\u00a0\u3002</p> <p>\u5728 LeetCode\u4e3b\u7ad9 \u6216 \u529b\u6263\u4e2d\u6587\u793e\u533a \u67e5\u770b\u8be5\u9898\u3002</p> \u89e3\u9898\u601d\u8def Go <pre><code>package main\n\nfunc maximumInvitations(g []int) (ans int) {\n    n := len(g)\n    // \u8282\u70b9\u5165\u5ea6\n    deg := make([]int, n)\n    for _, o := range g {\n        deg[o]++\n    }\n\n    // \u62d3\u6251\u6392\u5e8f\u526a\u6389\u6240\u6709\u6811\u679d\u5e76\u8ba1\u7b97\u8282\u70b9\u6700\u5927\u6df1\u5ea6\n    var q []int\n    for o, d := range deg {\n        if d == 0 {\n            q = append(q, o)\n        }\n    }\n    maxDepth := make([]int, n)\n    for len(q) &gt; 0 {\n        o := q[0]\n        q = q[1:]\n        maxDepth[o]++ // \u6307\u5411o\u7684\u6240\u6709\u8282\u70b9\u5df2\u88ab\u526a\u6389\n        t := g[o]     // o\u6307\u5411\u7684\u8282\u70b9\n        maxDepth[t] = max(maxDepth[t], maxDepth[o])\n        if deg[t]--; deg[t] == 0 {\n            q = append(q, t)\n        }\n    }\n\n    // \u5269\u4f59\u5165\u5ea6\u4e0d\u4e3a0\u7684\u8282\u70b9\u90fd\u4f4d\u4e8e\u73af\u4e0a\n    ringSize, ring2Sum := 0, 0\n    for o, d := range deg {\n        if d != 0 {\n            for ringSize = 0; deg[o] != 0; o = g[o] {\n                ringSize++\n                deg[o] = 0\n            }\n            if ringSize == 2 {\n                ring2Sum += maxDepth[o] + maxDepth[g[o]] + 2\n            } else {\n                ans = max(ans, ringSize)\n            }\n        }\n    }\n    return max(ans, ring2Sum)\n}\n\nfunc max(x, y int) int {\n    if x &gt; y {\n        return x\n    } else {\n        return y\n    }\n}\n</code></pre>"},{"location":"graph/topo/#lc2603-\u6536\u96c6\u6811\u4e2d\u91d1\u5e01","title":"LC2603. \u6536\u96c6\u6811\u4e2d\u91d1\u5e01","text":"\u95ee\u9898\u63cf\u8ff0 <p>\u6709\u4e00\u4e2a <code>1\u2264n\u22643e4</code> \u4e2a\u8282\u70b9\u7684\u65e0\u5411\u65e0\u6839\u6811\uff0c\u8282\u70b9\u7f16\u53f7\u4ece <code>0</code> \u5230 <code>n - 1</code> \u3002 \u7ed9\u4f60\u4e00\u4e2a\u957f\u5ea6\u4e3a <code>n</code> \u7684\u6570\u7ec4 <code>coins</code> \uff0c\u5176\u4e2d <code>coins[i]</code> \u7b49\u4e8e <code>0</code> \u6216 <code>1</code> \uff0c<code>1</code> \u8868\u793a\u8282\u70b9 <code>i</code> \u5904\u6709\u4e00\u4e2a\u91d1\u5e01\u3002 \u7ed9\u4f60\u4e00\u4e2a\u957f\u5ea6\u4e3a <code>n - 1</code> \u7684\u4e8c\u7ef4\u6574\u6570\u6570\u7ec4 <code>edges</code> \uff0c\u5176\u4e2d <code>edges[i]</code> = [\\(a_i\\), \\(b_i\\)] \u8868\u793a\u6811\u4e2d\u8282\u70b9 \\(a_i\\) \u548c \\(b_i\\) \u4e4b\u95f4\u6709\u4e00\u6761\u8fb9\u3002 \u4e00\u5f00\u59cb\uff0c\u4f60\u9700\u8981\u9009\u62e9\u6811\u4e2d\u4efb\u610f\u4e00\u4e2a\u8282\u70b9\u51fa\u53d1\u3002\u4f60\u53ef\u4ee5\u6267\u884c\u4e0b\u8ff0\u64cd\u4f5c\u4efb\u610f\u6b21\uff1a</p> <ul> <li>\u6536\u96c6\u4e0e\u5f53\u524d\u8282\u70b9\u8ddd\u79bb <code>\u22642</code> \u7684\u6240\u6709\u91d1\u5e01\uff0c\u6216\u8005</li> <li>\u79fb\u52a8\u5230\u6811\u4e2d\u4e00\u4e2a\u76f8\u90bb\u8282\u70b9\u3002</li> </ul> <p>\u4f60\u9700\u8981\u6536\u96c6\u6811\u4e2d\u6240\u6709\u7684\u91d1\u5e01\uff0c\u5e76\u56de\u5230\u51fa\u53d1\u8282\u70b9\uff0c\u8bf7\u4f60\u8fd4\u56de\u6700\u5c11\u7ecf\u8fc7\u7684\u8fb9\u6570\u3002\u5982\u679c\u4f60\u591a\u6b21\u7ecf\u8fc7\u4e00\u6761\u8fb9\uff0c\u6bcf\u4e00\u6b21\u7ecf\u8fc7\u90fd\u4f1a\u7ed9\u7b54\u6848\u52a0\u4e00\u3002</p> <p>\u5728 LeetCode\u4e3b\u7ad9 \u6216 \u529b\u6263\u4e2d\u6587\u793e\u533a \u67e5\u770b\u8be5\u9898\u3002</p> \u89e3\u9898\u601d\u8def <p>\u65b9\u6cd5\u4e00\uff1a\u6362\u6839 DP</p> <p>\u65b9\u6cd5\u4e8c\uff1a\u62d3\u6251\u6392\u5e8f</p> Go <pre><code>package main\n\nfunc collectTheCoins(coins []int, edges [][]int) (ans int) {\n    n := len(coins)\n    ug := make([][]int, n)\n    degrees := make([]int, n)\n    for _, e := range edges {\n        x, y := e[0], e[1]\n        ug[x] = append(ug[x], y)\n        ug[y] = append(ug[y], x)\n        degrees[x]++\n        degrees[y]++\n    }\n\n    // \u7b2c\u4e00\u904d\u62d3\u6251\u6392\u5e8f\u526a\u6389\u6ca1\u6709\u91d1\u5e01\u7684\u5b50\u6811\n    q := make([]int, 0, n)\n    for x, degree := range degrees {\n        if degree == 1 &amp;&amp; coins[x] == 0 {\n            q = append(q, x)\n            degrees[x] = 0 // \u526a\u6389\u6ca1\u6709\u91d1\u5e01\u7684\u53f6\u5b50\u8282\u70b9\n        }\n    }\n    for len(q) != 0 {\n        x := q[0]\n        q = q[1:]\n        for _, y := range ug[x] {\n            if degrees[y]--; degrees[y] == 1 &amp;&amp; coins[y] == 0 {\n                q = append(q, y)\n                degrees[y] = 0 // \u526a\u6389\u6ca1\u6709\u91d1\u5e01\u7684\u53f6\u5b50\u8282\u70b9\n            }\n        }\n    }\n\n    // \u7b2c\u4e8c\u904d\u62d3\u6251\u6392\u5e8f\u526a\u6389\u6700\u5916\u9762\u4e24\u5c42\n    for x, degree := range degrees {\n        if degree == 1 {\n            q = append(q, x)\n            degrees[x] = 0 // \u526a\u6389\u6700\u5916\u5c42\n        }\n    }\n\n    if len(q) &lt;= 1 {\n        return // \u526a\u679d\uff0c\u6811\u4e2d\u6700\u591a\u5269\u4f591\u4e2a\u8282\u70b9\uff0c\u76f4\u63a5\u6536\u96c6\n    }\n\n    // \u6ce8\uff1a\u4ec5\u526a\u6389\u6700\u5916\u9762\u4e24\u5c42\u7684\u5199\u6cd5\u53ef\u4ee5\u66f4\u7b80\u5355\uff0c\u6b64\u5199\u6cd5\u9002\u7528\u4e8e\u526a\u6389\u6700\u5916\u9762\u591a\u5c42\u7684\u60c5\u51b5\n    var tmp []int\n    for i := 1; i &lt; 2 &amp;&amp; len(q) &gt; 0; i++ {\n        tmp, q = q, nil\n        for _, x := range tmp {\n            for _, y := range ug[x] {\n                if degrees[y]--; degrees[y] == 1 {\n                    q = append(q, y)\n                    degrees[y] = 0 // \u526a\u6389\u7b2ci+1\u5c42\n                }\n            }\n        }\n    }\n\n    // \u7edf\u8ba1\u7b54\u6848\n    for _, e := range edges {\n        if degrees[e[0]] &gt; 0 &amp;&amp; degrees[e[1]] &gt; 0 {\n            ans += 2\n        }\n    }\n    return\n}\n</code></pre>"},{"location":"graph/tree/diameter/","title":"\u6811\u7684\u76f4\u5f84","text":""},{"location":"graph/tree/diameter/#lc1617-\u7edf\u8ba1\u5b50\u6811\u4e2d\u57ce\u5e02\u95f4\u6700\u5927\u8ddd\u79bb","title":"LC1617. \u7edf\u8ba1\u5b50\u6811\u4e2d\u57ce\u5e02\u95f4\u6700\u5927\u8ddd\u79bb","text":"\u95ee\u9898\u63cf\u8ff0 <p>\u7ed9\u4f60 \\(n(2\u2264n\u226415)\\) \u4e2a\u57ce\u5e02\uff0c\u7f16\u53f7\u4ece \\(1\\) \u5230 \\(n\\) \u3002 \u7ed9\u4f60\u4e00\u4e2a\u957f\u5ea6\u4e3a \\(n-1\\) \u7684\u6570\u7ec4 \\(edges\\) \uff0c\u5176\u4e2d \\(edges[i]=[u_i,v_i]\\) \u8868\u793a\u57ce\u5e02 \\(u_i\\) \u548c \\(v_i\\) \u4e4b\u95f4\u6709\u4e00\u6761\u53cc\u5411\u8fb9\u3002 \u9898\u76ee\u4fdd\u8bc1\u6240\u6709\u57ce\u5e02\u5f62\u6210\u4e00\u68f5\u6811\u3002 \u8bf7\u4f60\u8fd4\u56de\u4e00\u4e2a\u5927\u5c0f\u4e3a \\(n-1\\) \u7684\u6570\u7ec4\uff0c\u5176\u4e2d\u7b2c \\(d\\) \u4e2a\u5143\u7d20\uff08\u4ece \\(1\\) \u5f00\u59cb\uff09\u662f\u57ce\u5e02\u95f4\u6700\u5927\u8ddd\u79bb\u6070\u597d\u7b49\u4e8e \\(d\\) \u7684\u5b50\u6811\u6570\u76ee\u3002</p> <p>\u5728 LeetCode\u4e3b\u7ad9 \u6216 \u529b\u6263\u4e2d\u6587\u793e\u533a \u67e5\u770b\u8be5\u9898\u3002</p> \u89e3\u9898\u601d\u8def \u65b9\u6cd5\u4e00\uff1a\u679a\u4e3e\u5b50\u6811 + \u6811\u5f62DP <p>\u679a\u4e3e\u57ce\u5e02\u5b50\u96c6\uff0c\u68c0\u67e5\u662f\u5426\u662f\u6709\u6548\u5b50\u6811\uff0c\u5982\u679c\u6709\u6548\uff0c\u5219\u901a\u8fc7\u6811\u5f62DP\u8ba1\u7b97\u5b50\u6811\u7684\u76f4\u5f84\u3002</p> Go <pre><code>package main\n\nimport \"math/bits\"\n\nfunc countSubgraphsForEachDiameter(n int, edges [][]int) []int {\n    ug := make([][]int, n)\n    for _, e := range edges {\n        u, v := e[0]-1, e[1]-1\n        ug[u] = append(ug[u], v)\n        ug[v] = append(ug[v], u)\n    }\n    ans := make([]int, n-1)\n    // \u72b6\u6001\u538b\u7f29\u679a\u4e3e\u57ce\u5e02\u5b50\u96c6\n    for s := 1&lt;&lt;n - 1; s != 0; s-- {\n        if bits.OnesCount16(uint16(s)) != 1 { // \u81f3\u5c11\u9700\u8981\u4e24\u4e2a\u8282\u70b9\n            mask, d := s, 0\n            var dfs func(x, fa int) int\n            dfs = func(x, fa int) int {\n                mask ^= 1 &lt;&lt; x\n                var f, s int // \u6700\u5927\u5b50\u6811\u6df1\u5ea6\u548c\u6b21\u5927\u5b50\u6811\u6df1\u5ea6\n                for _, y := range ug[x] {\n                    if y != fa &amp;&amp; mask&gt;&gt;y&amp;1 == 1 {\n                        if yf := dfs(y, x) + 1; yf &gt; f {\n                            f, s = yf, f\n                        } else if yf &gt; s {\n                            s = yf\n                        }\n                    }\n                }\n                d = max(d, f+s)\n                return f // \u8fd4\u56de\u6700\u5927\u5b50\u6811\u6df1\u5ea6\n            }\n            start := bits.Len16(uint16(s)) - 1\n            if dfs(start, -1); mask == 0 { // \u5224\u65ad\u5b50\u6811s\u662f\u5426\u6709\u6548\n                ans[d-1]++\n            }\n        }\n    }\n    return ans\n}\n\nfunc max(x, y int) int {\n    if x &gt; y {\n        return x\n    } else {\n        return y\n    }\n}\n</code></pre> \u65b9\u6cd5\u4e8c\uff1a\u679a\u4e3e\u5b50\u6811 + \u4e24\u6b21DFS <p>\u679a\u4e3e\u57ce\u5e02\u5b50\u96c6\uff0c\u68c0\u67e5\u662f\u5426\u662f\u6709\u6548\u5b50\u6811\uff0c\u5982\u679c\u6709\u6548\uff0c\u5219\u901a\u8fc7\u4e24\u6b21DFS\u8ba1\u7b97\u5b50\u6811\u7684\u76f4\u5f84\u3002</p> Go <pre><code>package main\n\nimport \"math/bits\"\n\nfunc countSubgraphsForEachDiameter(n int, edges [][]int) []int {\n    ug := make([][]int, n)\n    for _, e := range edges {\n        u, v := e[0]-1, e[1]-1\n        ug[u] = append(ug[u], v)\n        ug[v] = append(ug[v], u)\n    }\n    ans := make([]int, n-1)\n    // \u72b6\u6001\u538b\u7f29\u679a\u4e3e\u57ce\u5e02\u5b50\u96c6\n    for s := 1&lt;&lt;n - 1; s != 0; s-- {\n        if bits.OnesCount16(uint16(s)) != 1 { // \u81f3\u5c11\u9700\u8981\u4e24\u4e2a\u8282\u70b9\n            max, o, vis := 0, -1, 0\n            var dfs func(x, fa, depth int)\n            dfs = func(x, fa, depth int) {\n                vis |= 1 &lt;&lt; x\n                if depth &gt; max {\n                    max, o = depth, x\n                }\n                for _, y := range ug[x] {\n                    if y != fa &amp;&amp; s&gt;&gt;y&amp;1 == 1 {\n                        dfs(y, x, depth+1)\n                    }\n                }\n            }\n            // \u7b2c\u4e00\u904dDFS\u627e\u5230\u4e0estart\u8282\u70b9\u8ddd\u79bb\u6700\u8fdc\u7684\u8282\u70b9\n            start := bits.Len16(uint16(s)) - 1\n            if dfs(start, -1, 0); vis == s { // \u5224\u65ad\u5b50\u6811s\u662f\u5426\u6709\u6548\n                max = 0\n                dfs(o, -1, 0) // \u7b2c\u4e8c\u904dDFS\u627e\u5230\u4e0eo\u8282\u70b9\u8ddd\u79bb\u6700\u8fdc\u7684\u8282\u70b9\uff0c\u4e24\u8282\u70b9\u8ddd\u79bb\u5373\u4e3a\u5b50\u6811\u7684\u76f4\u5f84\n                ans[max-1]++\n            }\n        }\n    }\n    return ans\n}\n</code></pre> \u65b9\u6cd5\u4e09\uff1a\u679a\u4e3e\u76f4\u5f84\u7aef\u70b9 <p>\u679a\u4e3e\u76f4\u5f84\u4e24\u7aef\u70b9\uff0c\u8ba1\u7b97\u4ee5\u8fd9\u4e24\u4e2a\u7aef\u70b9\u4f5c\u4e3a\u76f4\u5f84\u7684\u5b50\u6811\u4e2a\u6570\uff0c\u6ce8\u610f\u53bb\u91cd\u5904\u7406\u3002</p> Go <pre><code>package main\n\nfunc countSubgraphsForEachDiameter(n int, edges [][]int) []int {\n    ug := make([][]int, n)\n    for _, e := range edges {\n        u, v := e[0]-1, e[1]-1\n        ug[u] = append(ug[u], v)\n        ug[v] = append(ug[v], u)\n    }\n\n    // dis[i][j]\u8868\u793a\u8282\u70b9i\u548cj\u7684\u8ddd\u79bb\n    dis := make([][]int, n)\n    for i := range dis {\n        dis[i] = make([]int, n)\n        // \u4ee5\u8282\u70b9i\u4e3a\u6839\u8ba1\u7b97\u6bcf\u4e2a\u8282\u70b9\u7684\u6df1\u5ea6\uff0c\u5373\u4e0e\u8282\u70b9i\u7684\u8ddd\u79bb\n        var dfs func(x, fa int)\n        dfs = func(x, fa int) {\n            for _, y := range ug[x] {\n                if y != fa {\n                    dis[i][y] = dis[i][x] + 1 // \u81ea\u9876\u5411\u4e0b\n                    dfs(y, x)\n                }\n            }\n        }\n        dfs(i, -1)\n    }\n\n    ans := make([]int, n-1)\n    for i, di := range dis {\n        for j := i + 1; j &lt; n; j++ {\n            d := di[j]\n            dj := dis[j]\n            var dfs func(x, fa int) int\n            dfs = func(x, fa int) int {\n                // \u9009\u62e9x\n                cnt := 1\n                for _, y := range ug[x] {\n                    if y != fa &amp;&amp;\n                        (di[y] &lt; d || (di[y] == d &amp;&amp; y &gt; j)) &amp;&amp;\n                        (dj[y] &lt; d || (dj[y] == d &amp;&amp; y &gt; i)) { // \u53ef\u4ee5\u9009\u62e9\u8282\u70b9y\n                        cnt *= dfs(y, x) // \u6bcf\u9897\u5b50\u6811\u76f8\u4e92\u72ec\u7acb\uff0c\u4f7f\u7528\u4e58\u6cd5\u539f\u7406\n                    }\n                }\n                if di[x]+dj[x] &gt; d { // \u8282\u70b9x\u975e\u5fc5\u9009\n                    cnt++ // \u4e0d\u9009\u62e9x\n                }\n                return cnt\n            }\n            ans[d-1] += dfs(i, -1)\n        }\n    }\n    return ans\n}\n</code></pre>"},{"location":"intro/format/","title":"\u683c\u5f0f\u8bf4\u660e","text":""},{"location":"intro/format/#\u7b97\u6cd5\u5206\u7c7b","title":"\u7b97\u6cd5\u5206\u7c7b","text":"<p>\u6bcf\u4e2a\u7b97\u6cd5\u5206\u7c7b\u4f1a\u7ed9\u51fa\u4f7f\u7528\u8be5\u7b97\u6cd5\u7684\u9898\u76ee\u3002</p> <p>\u9898\u76ee\u5c3d\u53ef\u80fd\u6309\u7167\u7531\u7b80\u5230\u7e41\u3001\u7531\u5355\u4e00\u7b97\u6cd5\u5230\u7efc\u5408\u5e94\u7528\u7684\u987a\u5e8f\u7ed9\u51fa\u3002</p>"},{"location":"intro/format/#\u7b97\u6cd5\u9898\u76ee","title":"\u7b97\u6cd5\u9898\u76ee","text":"<p>\u9898\u76ee\u6807\u9898\u5982\u679c\u4ee5 <code>[T]</code> \u5f00\u5934\uff0c\u8868\u793a\u8fd9\u9053\u9898\u76ee\u662f\u8be5\u7b97\u6cd5\u7684\u6a21\u677f\u9898\u3002</p> <p>\u6bcf\u9053\u9898\u76ee\u4f1a\u7ed9\u51fa\u4ee5\u4e0b\u4fe1\u606f\uff1a</p> <ol> <li>\u9ed8\u8ba4\u5c55\u5f00\u7684\u9898\u76ee\u63cf\u8ff0\u548c\u9898\u76ee\u6765\u6e90\uff1b</li> <li>\u9ed8\u8ba4\u6536\u8d77\u7684\u89e3\u9898\u601d\u8def\u548c\u4ee3\u7801\u5b9e\u73b0\u3002</li> </ol> <p>\u6574\u4f53\u6548\u679c\u5982\u4e0b\uff1a</p> \u95ee\u9898\u63cf\u8ff0 <p>\u8fd9\u91cc\u662f\u95ee\u9898\u63cf\u8ff0\u3002</p> <p>\u5728 XX-OJ \u67e5\u770b\u8be5\u9898\u3002</p> \u89e3\u9898\u601d\u8def <p>\u8fd9\u91cc\u662f\u89e3\u9898\u601d\u8def\u3002</p> GoJava <pre><code>package main\n\nimport \"fmt\"\n\nfunc main() {\n    fmt.Println(\"Algorithm in Action!\")\n}\n</code></pre> <pre><code>public class Main {\n\n    public static void main(String[] args) {\n        System.out.println(\"Algorithm in Action!\");\n    }\n}\n</code></pre>"},{"location":"math/binary-set/","title":"\u4e8c\u8fdb\u5236\u96c6\u5408\u64cd\u4f5c","text":""},{"location":"math/binary-set/#\u5b50\u96c6\u679a\u4e3e","title":"\u5b50\u96c6\u679a\u4e3e","text":""},{"location":"math/binary-set/#lc982-\u6309\u4f4d\u4e0e\u4e3a\u96f6\u7684\u4e09\u5143\u7ec4","title":"LC982. \u6309\u4f4d\u4e0e\u4e3a\u96f6\u7684\u4e09\u5143\u7ec4","text":"\u95ee\u9898\u63cf\u8ff0 <p>\u6574\u6570\u6570\u7ec4 \\(nums(0\u2264nums[i]&lt;2^{16})\\) \u957f\u5ea6\u4e3a \\(n(1\u2264n\u22641000)\\) \uff0c\u8fd4\u56de\u5176\u4e2d\u6309\u4f4d\u4e0e\u4e3a\u96f6\u7684\u4e09\u5143\u7ec4\u6570\u76ee\u3002 \u5373\u6ee1\u8db3 \\(0 \u2264 i,j,k &lt; n\\) \u4e14 \\(nums[i]\\ \\&amp;\\ nums[j]\\ \\&amp;\\ nums[k] == 0\\) \u7684\u4e09\u5143\u7ec4 \\((i, j, k)\\) \u7684\u6570\u76ee\u3002</p> <p>\u5728 LeetCode\u4e3b\u7ad9 \u6216 \u529b\u6263\u4e2d\u6587\u793e\u533a \u67e5\u770b\u8be5\u9898\u3002</p> \u89e3\u9898\u601d\u8def <p>\u6700\u76f4\u63a5\u7684\u65b9\u6cd5\u5c31\u662f\u66b4\u529b\u679a\u4e3e\u4e09\u5143\u7ec4\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\uff1a\\(O(n^3)\\) \uff0c\u80af\u5b9a\u4f1a\u8d85\u65f6\u3002 \u7b80\u5355\u4f18\u5316\u4e00\u4e0b\uff0c\u4ee4 \\(x = nums[i], y = nums[j], z = nums[k], a = x\\ \\&amp;\\ y\\)\uff0c\u9884\u5904\u7406\u6bcf\u4e2a \\(a\\) \u7684\u6570\u91cf\u518d\u679a\u4e3e \\(a\\) \u548c \\(z\\) \u3002</p> GoJava <pre><code>package main\n\nfunc countTriplets(nums []int) (ans int) {\n    cnt := [1 &lt;&lt; 16]int{}\n    for _, x := range nums {\n        for _, y := range nums {\n            cnt[x&amp;y]++\n        }\n    }\n    for a, c := range cnt {\n        for _, z := range nums {\n            if a&amp;z == 0 {\n                ans += c\n            }\n        }\n    }\n    return\n}\n</code></pre> <pre><code>class Solution {\n    public int countTriplets(int[] nums) {\n        int[] cnt = new int[1 &lt;&lt; 16];\n        for (int x : nums) {\n            for (int y : nums) {\n                cnt[x &amp; y]++;\n            }\n        }\n        int ans = 0;\n        for (int a = 0; a &lt; 1 &lt;&lt; 16; a++) {\n            for (int z : nums) {\n                if ((a &amp; z) == 0) {\n                    ans += cnt[a];\n                }\n            }\n        }\n        return ans;\n    }\n}\n</code></pre> <p>\u65f6\u95f4\u590d\u6742\u5ea6\uff1a\\(O(n^2+2^{16}*n)\\) \uff0c\u4ecd\u7136\u4f1a\u8d85\u65f6\uff0c\u9700\u8981\u8fdb\u4e00\u6b65\u4f18\u5316\u3002</p> <p>\u628a\u4e8c\u8fdb\u5236\u770b\u505a\u7531\u975e0\u4f4d\u7ec4\u6210\u7684\u96c6\u5408\uff0c\u90a3\u4e48\u6309\u4f4d\u4e0e\u4e3a0\uff0c\u5c31\u76f8\u5f53\u4e8e\u4e24\u4e2a\u6570\u7684\u4e8c\u8fdb\u5236\u96c6\u5408\u6ca1\u6709\u4ea4\u96c6\u3002 \u4ee4 \\(c = x\\ \\oplus\\) <code>0xffff</code>\uff0c\u5219 \\(c\\) \u7684\u6240\u6709\u5b50\u96c6\u4e0e \\(x\\) \u90fd\u4e0d\u5b58\u5728\u4ea4\u96c6\u3002 \u56e0\u6b64\uff0c\u53ea\u9700\u8981\u679a\u4e3e \\(c\\) \u7684\u6240\u6709\u5b50\u96c6\u5373\u53ef\u3002</p> <p>\u5b50\u96c6\u679a\u4e3e\u6280\u5de7</p> <p>\u5982\u4f55\u9ad8\u6548\u679a\u4e3e \\(c\\) \u7684\u5b50\u96c6 \\(s\\) \u5462\uff1f \u901a\u8fc7 \\(s = (s-1)\\ \\&amp;\\ c\\) \u53ef\u4ee5\u6309\u9012\u51cf\u987a\u5e8f\u9ad8\u6548\u679a\u4e3e \\(c\\) \u7684\u5b50\u96c6\u3002 \u6ce8\uff1a\u8fd9\u4e2a\u4e8c\u8fdb\u5236\u5b50\u96c6\u679a\u4e3e\u6280\u5de7\u7ecf\u5e38\u7528\u4e8e\u5b50\u96c6\u72b6\u538bDP\u4e2d\u3002</p> GoJava <pre><code>package main\n\nfunc countTriplets(nums []int) (ans int) {\n    n := len(nums)\n    cnt := [1 &lt;&lt; 16]int{}\n    for _, x := range nums {\n        for _, y := range nums {\n            cnt[x&amp;y]++\n        }\n    }\n    for _, x := range nums {\n        if x == 0 {\n            ans += n * n\n        } else {\n            x ^= 0xffff // \u53d6\u8865\u96c6\n            for s := x; s != 0; s = (s - 1) &amp; x {\n                ans += cnt[s]\n            }\n            ans += cnt[0] // \u7a7a\u96c6\u4e5f\u9700\u8981\u7edf\u8ba1\n        }\n    }\n    return\n}\n</code></pre> <pre><code>class Solution {\n    public int countTriplets(int[] nums) {\n        int[] cnt = new int[1 &lt;&lt; 16];\n        for (int x : nums) {\n            for (int y : nums) {\n                cnt[x &amp; y]++;\n            }\n        }\n        int ans = 0;\n        for (int x : nums) {\n            x ^= 0xffff;\n            for (int s = x; s != 0; s = (s - 1) &amp; x) {\n                ans += cnt[s];\n            }\n            ans += cnt[0];\n        }\n        return ans;\n    }\n}\n</code></pre> <p>\u4e5f\u53ef\u4ee5\u5148\u9884\u5904\u7406\u6bcf\u4e2a\u6570\u5b57\u7684\u8865\u96c6\u7684\u5b50\u96c6\u7684\u51fa\u73b0\u6b21\u6570\uff0c\u518d\u7d2f\u52a0 \\(cnt[x\\&amp;y]\\) \u3002</p> GoJava <pre><code>package main\n\nfunc countTriplets(nums []int) (ans int) {\n    n := len(nums)\n    cnt := [1 &lt;&lt; 16]int{n}\n    for _, x := range nums {\n        x ^= 0xffff\n        for s := x; s != 0; s = (s - 1) &amp; x {\n            cnt[s]++\n        }\n    }\n    for _, x := range nums {\n        for _, y := range nums {\n            ans += cnt[x&amp;y]\n        }\n    }\n    return\n}\n</code></pre> <pre><code>class Solution {\n    public int countTriplets(int[] nums) {\n        int[] cnt = new int[1 &lt;&lt; 16];\n        cnt[0] = nums.length;\n        for (int x : nums) {\n            x ^= 0xffff;\n            for (int s = x; s != 0; s = (s - 1) &amp; x) {\n                cnt[s]++;\n            }\n        }\n        int ans = 0;\n        for (int x : nums) {\n            for (int y : nums) {\n                ans += cnt[x &amp; y];\n            }\n        }\n        return ans;\n    }\n}\n</code></pre> <p>\u8fdb\u4e00\u6b65\u4f18\u5316\uff1a\u6839\u636e \\(nums\\) \u6570\u7ec4\u786e\u5b9a \\(cnt\\) \u7684\u6700\u5c0f\u957f\u5ea6\u3002</p> GoJava <pre><code>package main\n\nfunc countTriplets(nums []int) (ans int) {\n    m := 1\n    for _, x := range nums {\n        for ; m &lt;= x; m &lt;&lt;= 1 {\n        }\n    }\n    cnt := make([]int, m)\n    cnt[0] = len(nums)\n    mask := m - 1\n    for _, x := range nums {\n        x ^= mask\n        for s := x; s != 0; s = (s - 1) &amp; x {\n            cnt[s]++\n        }\n    }\n    for _, x := range nums {\n        for _, y := range nums {\n            ans += cnt[x&amp;y]\n        }\n    }\n    return\n}\n</code></pre> <pre><code>class Solution {\n    public int countTriplets(int[] nums) {\n        int m = 1;\n        for (int x : nums) {\n            for (; m &lt;= x; m &lt;&lt;= 1) {\n            }\n        }\n        int[] cnt = new int[m];\n        cnt[0] = nums.length;\n        int mask = m - 1;\n        for (int x : nums) {\n            x ^= mask;\n            for (int s = x; s != 0; s = (s - 1) &amp; x) {\n                cnt[s]++;\n            }\n        }\n        int ans = 0;\n        for (int x : nums) {\n            for (int y : nums) {\n                ans += cnt[x &amp; y];\n            }\n        }\n        return ans;\n    }\n}\n</code></pre>"},{"location":"math/bit/","title":"\u4f4d\u8fd0\u7b97","text":""},{"location":"math/bit/#lc2568-\u6700\u5c0f\u65e0\u6cd5\u5f97\u5230\u7684\u6216\u503c","title":"LC2568. \u6700\u5c0f\u65e0\u6cd5\u5f97\u5230\u7684\u6216\u503c","text":"\u95ee\u9898\u63cf\u8ff0 <p>\u7ed9\u4f60\u4e00\u4e2a\u957f\u5ea6\u4e3a <code>1\u2264n\u22641e5</code> \uff0c\u4e0b\u6807\u4ece <code>0</code>\u00a0\u5f00\u59cb\u7684\u6574\u6570\u6570\u7ec4\u00a0<code>nums</code>\u00a0\uff0c<code>1\u2264nums[i]\u22641e9</code> \u3002 \u5982\u679c\u5b58\u5728\u4e00\u4e9b\u6574\u6570\u6ee1\u8db3\u00a0\\(0 &lt;= i_1 &lt; i_2 &lt; \\dots &lt; i_k &lt; n\\)\u00a0\uff0c\u5f97\u5230\u00a0\\(nums[i_1] | nums[i_2] | ... | nums[i_k] = x\\)\u00a0\uff0c\u90a3\u4e48\u6211\u4eec\u8bf4\u00a0<code>x</code>\u00a0\u662f\u00a0\u53ef\u8868\u8fbe\u7684 \u3002\u6362\u8a00\u4e4b\uff0c\u5982\u679c\u4e00\u4e2a\u6574\u6570\u80fd\u7531\u00a0<code>nums</code>\u00a0\u7684\u67d0\u4e2a\u5b50\u5e8f\u5217\u7684\u6216\u8fd0\u7b97\u5f97\u5230\uff0c\u90a3\u4e48\u5b83\u5c31\u662f\u53ef\u8868\u8fbe\u7684\u3002 \u8bf7\u4f60\u8fd4\u56de <code>nums</code>\u00a0\u4e0d\u53ef\u8868\u8fbe\u7684 \u6700\u5c0f\u975e\u96f6\u6574\u6570\u00a0\u3002</p> <p>\u5728 LeetCode\u4e3b\u7ad9 \u6216 \u529b\u6263\u4e2d\u6587\u793e\u533a \u67e5\u770b\u8be5\u9898\u3002</p> \u89e3\u9898\u601d\u8def <p>\u5982\u679c <code>x</code> \u4e0d\u80fd\u8868\u8fbe\uff0c\u5219 <code>x</code> \u7684\u4e8c\u8fdb\u5236\u4e00\u5b9a\u6709\u4e00\u4e2a <code>1</code> \u4e0d\u80fd\u8868\u8fbe\u3002</p> Go <pre><code>package main\n\nfunc minImpossibleOR(nums []int) int {\n    or := 0\n    for _, x := range nums {\n        if x&amp;(x-1) == 0 {\n            or |= x\n        }\n    }\n    or = ^or // ~x = -(x+1)\n    return or &amp; -or\n}\n</code></pre>"},{"location":"math/bit/#cf1469e-a-bit-similar","title":"CF1469E. A Bit Similar","text":"\u95ee\u9898\u63cf\u8ff0 <p>\u8f93\u5165 <code>T(0\u2264T\u22641e4)</code> \u8868\u793a <code>T</code> \u7ec4\u6570\u636e\u3002\u6240\u6709\u6570\u636e\u7684 <code>n</code> \u4e4b\u548c <code>\u22641e6</code>\u3002 \u6bcf\u7ec4\u6570\u636e\u7b2c\u4e00\u884c\u8f93\u5165 <code>n k(1\u2264k\u2264n\u22641e6)</code> \u4e24\u4e2a\u6574\u6570\uff0c\u7b2c\u4e8c\u884c\u8f93\u5165\u957f\u4e3a <code>n</code> \u7684 01 \u5b57\u7b26\u4e32 <code>s</code> \u3002 \u5b9a\u4e49\u4e24\u4e2a\u957f\u4e3a <code>k</code> \u7684\u5b57\u7b26\u4e32 <code>x</code> \u548c <code>y</code> \u4e00\u70b9\u70b9\u76f8\u540c\uff1a\u5b58\u5728\u67d0\u4e2a\u4e0b\u6807 <code>i</code> \uff0c\u4f7f\u5f97 <code>x[i] = y[i]</code> \u3002 \u4f60\u9700\u8981\u627e\u5230\u4e00\u4e2a\u957f\u4e3a <code>k</code> \u7684\u5b57\u5178\u5e8f\u6700\u5c0f\u7684 01 \u4e32 <code>t</code> \uff0c\u4f7f\u5f97 <code>t</code> \u4e0e <code>s</code> \u7684\u6bcf\u4e2a\u957f\u4e3a <code>k</code> \u7684\u5b50\u4e32\u90fd \u4e00\u70b9\u70b9\u76f8\u540c\u3002 \u5982\u679c\u4e0d\u5b58\u5728\u8fd9\u6837\u7684 <code>t</code> \uff0c\u8f93\u51fa <code>NO</code> \uff1b\u5426\u5219\u7b2c\u4e00\u884c\u8f93\u51fa <code>YES</code> \uff0c\u7b2c\u4e8c\u884c\u8f93\u51fa <code>t</code> \u3002</p> <p>\u5728 Codeforces \u6216 \u6d1b\u8c37 \u67e5\u770b\u8be5\u9898\u3002</p> \u89e3\u9898\u601d\u8def <p>\u5b9a\u4e49 <code>~t</code> \u4e3a <code>t</code> \u53d6\u53cd\u540e\u7684\u5b57\u7b26\u4e32\u3002\u53ea\u8981 <code>~t</code> \u4e0d\u5728 <code>s</code> \u4e2d\uff0c<code>t</code> \u5c31\u662f\u5408\u6cd5\u7684\u7b54\u6848\u3002 \u539f\u56e0\uff1a<code>s</code> \u7684\u6bcf\u4e2a\u957f\u4e3a <code>k</code> \u7684\u5b50\u4e32\u90fd\u4e0e <code>~t</code> \u81f3\u5c11\u6709\u4e00\u4e2a\u5b57\u7b26\u4e0d\u76f8\u540c\uff0c\u4e5f\u5373\u662f\u4e0e <code>t</code> \u81f3\u5c11\u6709\u4e00\u4e2a\u5b57\u7b26\u76f8\u540c\u3002</p> <p>\u5b57\u7b26\u4e32 <code>s</code> \u4e2d\u957f\u4e3a <code>k</code> \u7684\u5b50\u4e32\u6709 <code>n-k+1</code> \u4e2a\u3002 \u8bb0 <code>n-k+1</code> \u7684\u6709\u6548\u4e8c\u8fdb\u5236\u957f\u5ea6\u4e3a <code>m</code>\uff0c\u5219\u957f\u4e3a <code>m</code> \u7684\u4e0d\u540c 01 \u4e32\u6709\u8d85\u8fc7 <code>n-k+1</code> \u4e2a\u3002</p> <p>\u5c06 <code>t</code> \u5206\u6210\u5de6\u53f3\u4e24\u90e8\u5206\uff1a\\(t = t_l + t_r\\)\uff0c\u5176\u4e2d \\(t_r\\) \u7684\u957f\u5ea6\u4e3a \\(r = min(k, m)\\) \uff0c\u5219 \\(t_l\\) \u7684\u957f\u5ea6\u4e3a \\(l = k - r\\) \u3002 \u7531\u4e8e\u9700\u8981\u627e\u5230\u5b57\u5178\u5e8f\u6700\u5c0f\u7684 <code>t</code> \uff0c\u76f4\u63a5\u5c06 \\(t_l\\) \u5168\u90e8\u7f6e\u4e3a <code>0</code> \u3002 \u5c06 <code>s</code> \u4e2d\u6bcf\u4e2a\u957f\u4e3a <code>k</code> \u7684\u5b50\u4e32 <code>h</code> \u4e5f\u5206\u6210\u957f\u5ea6\u5206\u522b\u4e3a \\(l\\) \u548c \\(r\\) \u7684\u4e24\u90e8\u5206\uff1a\\(h = h_l + h_r\\)\u3002 \u5982\u679c \\(h_l\\) \u5168\u4e3a 1 \uff0c\u5219 ~\\(t_r\\) \u4e0d\u80fd\u4e0e \\(h_r\\) \u76f8\u540c\uff0c\u5426\u5219\uff0c<code>s</code> \u5305\u542b <code>~t</code> \uff0c<code>t</code> \u975e\u6cd5\u3002 \u7edf\u8ba1\u6240\u6709 \\(h_l\\) \u5168\u4e3a 1 \u7684 \\(h_r\\) \uff0c\u5373\u4e3a\u6240\u6709\u4e0d\u5408\u6cd5\u7684 ~\\(t_r\\) \u3002 \u7531\u4e8e <code>r &lt; 20</code> \uff0c\u76f4\u63a5\u901a\u8fc7\u6574\u6570\u4f4d\u8fd0\u7b97\u5904\u7406\u5b58\u5728\u7684 \\(h_r\\) \uff0c\u5e76\u4f7f\u7528\u6570\u7ec4\u8bb0\u5f55\u3002 \u4ece\u5927\u5230\u5c0f\u679a\u4e3e\uff0c\u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u5b58\u5728\u7684 \\(h_r\\) \uff0c\u5373\u4e3a\u5b57\u5178\u5e8f\u6700\u5927\u7684\u5408\u6cd5 ~\\(t_r\\) \uff0c\u53d6\u53cd\u5373\u4e3a\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u5408\u6cd5 \\(t_r\\) \u3002</p> GoJava <pre><code>package main\n\nimport (\n    \"bufio\"\n    . \"fmt\"\n    \"math/bits\"\n    \"os\"\n)\n\nfunc main() {\n    in := bufio.NewReader(os.Stdin)\n    out := bufio.NewWriter(os.Stdout)\n    defer out.Flush()\n\n    var s string\n    var T, n, k int\n    for Fscan(in, &amp;T); T &gt; 0; T-- {\n        Fscan(in, &amp;n, &amp;k, &amp;s)\n        r := k\n        if m := bits.Len32(uint32(n - k + 1)); m &lt; k {\n            r = m\n        }\n        l := k - r\n        mask := 1&lt;&lt;r - 1\n        has := make([]bool, 1&lt;&lt;r)\n        var l1, rt int\n        for _, b := range s[:l] {\n            l1 += int(b &amp; 1)\n        }\n        for _, b := range s[l:k] {\n            rt = rt&lt;&lt;1 | int(b&amp;1)\n        }\n        has[rt] = l1 == l\n        for i, b := range s[k:] {\n            l1 += int(s[i+l]&amp;1) - int(s[i]&amp;1)\n            rt = (rt&lt;&lt;1 | int(b&amp;1)) &amp; mask\n            if l1 == l {\n                has[rt] = true\n            }\n        }\n        rt = mask\n        for ; rt != -1 &amp;&amp; has[rt]; rt-- {\n        }\n        if rt == -1 {\n            Fprintln(out, \"NO\")\n        } else {\n            Fprintf(out, \"YES\\n%0*b\\n\", k, rt^mask)\n        }\n    }\n}\n</code></pre> <pre><code>import java.io.*;\nimport java.util.*;\n\npublic class Main {\n\n    static BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n    static PrintWriter out = new PrintWriter(System.out);\n\n    public static void main(String[] args) throws IOException {\n        int T = Integer.parseInt(in.readLine());\n        while (T-- &gt; 0) {\n            StringTokenizer nk = new StringTokenizer(in.readLine());\n            int n = Integer.parseInt(nk.nextToken());\n            int k = Integer.parseInt(nk.nextToken());\n            char[] s = in.readLine().toCharArray();\n            int r = Math.min(k, Integer.toBinaryString(n - k + 1).length());\n            int l = k - r;\n            int mask = (1 &lt;&lt; r) - 1;\n            boolean[] has = new boolean[1 &lt;&lt; r];\n            int i = 0, l1 = 0, rt = 0;\n            for (; i &lt; l; i++) {\n                l1 += s[i] &amp; 1;\n            }\n            for (; i &lt; k; i++) {\n                rt = (rt &lt;&lt; 1) | (s[i] &amp; 1);\n            }\n            has[rt] = l1 == l;\n            for (; i &lt; n; i++) {\n                l1 += (s[i - r] &amp; 1) - (s[i - k] &amp; 1);\n                rt = ((rt &lt;&lt; 1) | (s[i] &amp; 1)) &amp; mask;\n                if (l1 == l) {\n                    has[rt] = true;\n                }\n            }\n            rt = mask;\n            for (; rt != -1 &amp;&amp; has[rt]; rt--) {\n            }\n            if (rt == -1) {\n                out.println(\"NO\");\n            } else {\n                rt ^= mask;\n                String ans = Integer.toBinaryString(rt);\n                out.println(\"YES\");\n                for (i = k - ans.length(); i != 0; i--) {\n                    out.print(0);\n                }\n                out.println(ans);\n            }\n        }\n        out.flush();\n        out.close();\n        in.close();\n    }\n}\n</code></pre>"},{"location":"string/palindrome/","title":"\u56de\u6587\u5b57\u7b26\u4e32","text":""},{"location":"string/palindrome/#lc1616-\u5206\u5272\u4e24\u4e2a\u5b57\u7b26\u4e32\u5f97\u5230\u56de\u6587\u4e32","title":"LC1616. \u5206\u5272\u4e24\u4e2a\u5b57\u7b26\u4e32\u5f97\u5230\u56de\u6587\u4e32","text":"\u95ee\u9898\u63cf\u8ff0 <p>\u7ed9\u4f60\u4e24\u4e2a\u957f\u5ea6\u5747\u4e3a <code>n(1\u2264n\u22641e5)</code> \u7684\u5b57\u7b26\u4e32 <code>a</code> \u548c <code>b</code> \u3002 \u8bf7\u5224\u65ad\u662f\u5426\u5b58\u5728\u4e0b\u6807 <code>0\u2264i\u2264n</code> \u4f7f\u5f97 <code>a[:i]+b[i:]</code> \u6216 <code>b[:i]+a[i:]</code> \u6784\u6210\u56de\u6587\u5b57\u7b26\u4e32\u3002</p> <p>\u5728 LeetCode\u4e3b\u7ad9 \u6216 \u529b\u6263\u4e2d\u6587\u793e\u533a \u67e5\u770b\u8be5\u9898\u3002</p> \u89e3\u9898\u601d\u8def <p>\u4e2d\u5fc3\u6269\u5c55\u6cd5</p> Go <pre><code>package main\n\nfunc checkPalindromeFormation(a string, b string) bool {\n    n := len(a)\n    check := func(s, t string) bool {\n        l, r := (n-1)&gt;&gt;1, n&gt;&gt;1\n        for ; r &lt; n &amp;&amp; s[l] == s[r]; r++ {\n            l--\n        }\n        if r == n {\n            return true // s\u56de\u6587\n        } else {\n            checkLR := func(pref, suff string) bool {\n                i, j := l, r\n                for ; j &lt; n &amp;&amp; pref[i] == suff[j]; j++ {\n                    i--\n                }\n                return j == n\n            }\n            // s[:r]+t[r:]\u6784\u6210\u56de\u6587 || t[:l+1]+s[l+1:]\u6784\u6210\u56de\u6587\n            return checkLR(s, t) || checkLR(t, s)\n        }\n    }\n    return check(a, b) || check(b, a)\n}\n</code></pre>"},{"location":"string/split/","title":"\u5b57\u7b26\u4e32\u5206\u5272","text":""},{"location":"string/split/#cf1624e-masha-forgetful","title":"CF1624E. Masha-forgetful","text":"\u95ee\u9898\u63cf\u8ff0 <p>\u7b2c\u4e00\u884c\u8f93\u5165 \\(t(1\u2264t\u22641e4)\\) \u8868\u793a \\(t\\) \u7ec4\u6570\u636e\u3002\u6240\u6709\u6570\u636e\u7684 \\(n \\times m\\) \u4e4b\u548c \\(\u22641e6\\)\u3002 \u6bcf\u7ec4\u6570\u636e\u7b2c\u4e00\u884c\u8f93\u5165 \\(n\\) \u548c \\(m\\) \u4e24\u4e2a\u6574\u6570\uff0c\\((1\u2264n,m\u22641e3)\\) \u3002 \u63a5\u4e0b\u6765 \\(n\\) \u884c\u6bcf\u884c\u8f93\u5165\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5f62\u6210\u4e00\u4e2a\u5927\u5c0f\u4e3a \\(n\\) \u7684\u5b57\u7b26\u4e32\u6570\u7ec4 \\(a\\) \u3002 \u7136\u540e\u518d\u8f93\u5165\u4e00\u4e2a\u5b57\u7b26\u4e32 \\(s\\) \u3002\u6240\u6709\u5b57\u7b26\u4e32\u957f\u5ea6\u5747\u4e3a \\(m\\) \uff0c\u4ec5\u5305\u542b <code>'0'</code>~<code>'9'</code>\u3002</p> <p>\u4f60\u9700\u8981\u5c06 \\(s\\) \u5212\u5206\u6210\u82e5\u5e72\u4e2a\u957f\u5ea6\u81f3\u5c11\u4e3a \\(2\\) \u7684\u5b50\u4e32\uff0c\u4e14\u6bcf\u4e2a\u5b50\u4e32\u90fd\u662f\u67d0\u4e2a \\(a[i]\\) \u7684\u5b50\u4e32\uff08\u4e0d\u540c\u5b50\u4e32\u5bf9\u5e94\u7684 \\(a[i]\\) \u53ef\u4ee5\u4e0d\u540c\uff09\u3002 \u5982\u679c\u65e0\u6cd5\u5212\u5206\uff0c\u8f93\u51fa \\(-1\\) \uff1b\u5426\u5219\u8f93\u51fa\u5212\u5206\u51fa\u7684\u5b50\u4e32\u4e2a\u6570 \\(k\\) \uff0c\u7136\u540e\u8f93\u51fa \\(k\\) \u884c\uff0c\u6bcf\u884c\u4e09\u4e2a\u6570\u5b57 \\(l\\ r\\ i\\) \uff0c\u8868\u793a\u8fd9\u4e2a\u5b50\u4e32\u7b49\u4e8e \\(a[i]\\) \u7684\u5b50\u4e32 \\([l,r]\\)\u3002\u6ce8\u610f \\(l\\ r\\ i\\) \u7684\u4e0b\u6807\u5747\u4ece \\(1\\) \u5f00\u59cb\u3002\u6ce8\u610f\u8f93\u51fa\u7684 \\(k\\) \u884c\u8981\u4e0e\u5212\u5206\u7684\u987a\u5e8f\u76f8\u540c\u3002 \u5982\u679c\u6709\u591a\u79cd\u5212\u5206\u65b9\u6848\uff0c\u8f93\u51fa\u4efb\u610f\u4e00\u79cd\u3002</p> <p>\u5728 Codeforces \u6216 \u6d1b\u8c37 \u67e5\u770b\u8be5\u9898\u3002</p> \u89e3\u9898\u601d\u8def <p>\u9884\u5904\u7406\u5b57\u7b26\u4e32\u6570\u7ec4 \\(a\\) \u4e2d\u6240\u6709\u957f\u4e3a 2 \u548c 3 \u7684\u5b50\u4e32\u53ca\u5176\u4f4d\u7f6e\u3002 \u7ebf\u6027 DP \u5224\u65ad\u5b57\u7b26\u4e32 \\(s\\) \u662f\u5426\u53ef\u4ee5\u5212\u5206\uff0c\u5982\u679c\u53ef\u4ee5\u5212\u5206\uff0c\u6839\u636e\u72b6\u6001\u8f6c\u79fb\u60c5\u51b5\u8ba1\u7b97\u5212\u5206\u65b9\u6848\u3002</p> GoJava <pre><code>package main\n\nimport (\n    \"bufio\"\n    . \"fmt\"\n    \"os\"\n)\n\nfunc main() {\n    in := bufio.NewReader(os.Stdin)\n    out := bufio.NewWriter(os.Stdout)\n    defer out.Flush()\n\n    var s string\n    var T, n, m int\n    for Fscan(in, &amp;T); T &gt; 0; T-- {\n        Fscan(in, &amp;n, &amp;m)\n        a := make([]string, n)\n        for i := range a {\n            Fscan(in, &amp;a[i])\n        }\n        Fscan(in, &amp;s)\n\n        fi2 := func(t string, i int) int { return int(t[i]&amp;15)*10 + int(t[i+1]&amp;15) }\n        fi3 := func(t string, i int) int { return int(t[i]&amp;15)*100 + int(t[i+1]&amp;15)*10 + int(t[i+2]&amp;15) }\n        fs2 := func(i int) int { return fi2(s, i) }\n        fs3 := func(i int) int { return fi3(s, i) }\n\n        // \u9884\u5904\u7406a\u4e2d\u6240\u6709\u957f\u5ea6\u4e3a2\u548c3\u7684\u5b50\u4e32\u7684\u4f4d\u7f6e\n        f2 := make([][3]int, 100)\n        f3 := make([][3]int, 1000)\n        for i, t := range a {\n            if m &gt; 1 {\n                f2[fi2(t, m-2)] = [3]int{m - 1, m, i + 1}\n            }\n            for j := m - 3; j &gt;= 0; j-- {\n                f2[fi2(t, j)] = [3]int{j + 1, j + 2, i + 1}\n                f3[fi3(t, j)] = [3]int{j + 1, j + 3, i + 1}\n            }\n        }\n\n        // f[i]\u8868\u793as[i:]\u662f\u5426\u53ef\u4ee5\u5212\u5206\n        f := make([]bool, m+1)\n        f[m] = true\n        if m &gt; 1 {\n            f[m-2] = f2[fs2(m-2)][0] != 0\n        }\n        for i := m - 3; i &gt;= 0; i-- {\n            f[i] = (f[i+2] &amp;&amp; f2[fs2(i)][0] != 0) || (f[i+3] &amp;&amp; f3[fs3(i)][0] != 0)\n        }\n\n        if !f[0] {\n            Fprintln(out, -1)\n        } else {\n            var arr [][3]int\n            for i := 0; i != m; {\n                if x := fs2(i); f2[x][0] != 0 &amp;&amp; f[i+2] {\n                    arr = append(arr, f2[x])\n                    i += 2\n                } else {\n                    arr = append(arr, f3[fs3(i)])\n                    i += 3\n                }\n            }\n            Fprintln(out, len(arr))\n            for _, i := range arr {\n                Fprintln(out, i[0], i[1], i[2])\n            }\n        }\n    }\n}\n</code></pre> <pre><code>import java.io.*;\nimport java.util.*;\n\npublic class Main {\n\n    static BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n    static PrintWriter out = new PrintWriter(System.out);\n\n    public static void main(String[] args) throws Exception {\n        int T = Integer.parseInt(in.readLine());\n        for (; T &gt; 0; T--) {\n            in.readLine(); // \u7a7a\u884c\n            StringTokenizer nm = new StringTokenizer(in.readLine());\n            int n = Integer.parseInt(nm.nextToken());\n            int m = Integer.parseInt(nm.nextToken());\n            char[][] a = new char[n][m];\n            for (int i = 0; i &lt; n; i++) {\n                a[i] = in.readLine().toCharArray();\n            }\n            char[] s = in.readLine().toCharArray();\n\n            // \u9884\u5904\u7406a\u4e2d\u6240\u6709\u957f\u5ea6\u4e3a2\u548c3\u7684\u5b50\u4e32\u7684\u4f4d\u7f6e\n            int[][] f2 = new int[100][3];\n            int[][] f3 = new int[1000][3];\n            for (int i = n-1; i &gt;= 0; i--) {\n                if (m &gt; 1) {\n                    f2[fi2(a[i], m - 2)] = new int[] { m - 1, m, i + 1 };\n                }\n                for (int j = m - 3; j &gt;= 0; j--) {\n                    f2[fi2(a[i], j)] = new int[] { j + 1, j + 2, i + 1 };\n                    f3[fi3(a[i], j)] = new int[] { j + 1, j + 3, i + 1 };\n                }\n            }\n\n            // f[i]\u8868\u793as[i:]\u662f\u5426\u53ef\u4ee5\u5212\u5206\n            boolean[] f = new boolean[m + 1];\n            f[m] = true;\n            if (m &gt; 1) {\n                f[m - 2] = f2[fi2(s, m - 2)][0] != 0;\n            }\n            for (int i = m - 3; i &gt;= 0; i--) {\n                f[i] = (f[i + 2] &amp;&amp; f2[fi2(s, i)][0] != 0) || (f[i + 3] &amp;&amp; f3[fi3(s, i)][0] != 0);\n            }\n\n            if (!f[0]) {\n                out.println(-1);\n            } else {\n                int idx = 0;\n                int[][] arr = new int[m &gt;&gt; 1][3];\n                for (int i = 0; i &lt; m;) {\n                    int x = fi2(s, i);\n                    if (f[i + 2] &amp;&amp; f2[x][0] != 0) {\n                        arr[idx++] = f2[x];\n                        i += 2;\n                    } else {\n                        arr[idx++] = f3[fi3(s, i)];\n                        i += 3;\n                    }\n                }\n                out.println(idx);\n                for (int i = 0; i &lt; idx; i++) {\n                    out.printf(\"%d %d %d%n\", arr[i][0], arr[i][1], arr[i][2]);\n                }\n            }\n        }\n        out.flush();\n        out.close();\n        in.close();\n    }\n\n    public static int fi2(char[] s, int i) {\n        return 10 * (s[i] &amp; 15) + (s[i + 1] &amp; 15);\n    }\n\n    public static int fi3(char[] s, int i) {\n        return 100 * (s[i] &amp; 15) + 10 * (s[i + 1] &amp; 15) + (s[i + 2] &amp; 15);\n    }\n}\n</code></pre>"},{"location":"string/suffix-array/","title":"\u540e\u7f00\u6570\u7ec4","text":""},{"location":"string/suffix-array/#lc1163-\u5b57\u5178\u5e8f\u6700\u5927\u7684\u5b50\u4e32","title":"LC1163. \u5b57\u5178\u5e8f\u6700\u5927\u7684\u5b50\u4e32","text":"\u95ee\u9898\u63cf\u8ff0 <p>\u7ed9\u4f60\u4e00\u4e2a\u957f\u5ea6\u4e3a <code>n(1\u2264n\u22644e5)</code> \u4e14\u4ec5\u542b\u6709\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\u7684\u5b57\u7b26\u4e32 <code>s</code> \uff0c\u627e\u51fa\u5b83\u7684\u6240\u6709\u5b50\u4e32\u5e76\u6309\u5b57\u5178\u5e8f\u6392\u5217\uff0c\u8fd4\u56de\u6392\u5728\u6700\u540e\u7684\u90a3\u4e2a\u5b50\u4e32\u3002</p> <p>\u5728 LeetCode\u4e3b\u7ad9 \u6216 \u529b\u6263\u4e2d\u6587\u793e\u533a \u67e5\u770b\u8be5\u9898\u3002</p> \u89e3\u9898\u601d\u8def <p>\u65b9\u6cd5\u4e00\uff1a\u53cc\u6307\u9488</p> Go <pre><code>package main\n\nfunc lastSubstring(s string) string {\n    n := len(s)\n    i, j, k := 0, 1, 0\n    for {\n        for k = 0; j+k &lt; n &amp;&amp; s[i+k] == s[j+k]; k++ {\n        }\n        if j+k == n {\n            return s[i:]\n        } else if s[i+k] &lt; s[j+k] {\n            i, j = j, max(j+1, i+k+1)\n        } else {\n            j = j + k + 1\n        }\n    }\n}\n\nfunc max(x, y int) int {\n    if x &gt; y {\n        return x\n    } else {\n        return y\n    }\n}\n</code></pre> <p>\u65b9\u6cd5\u4e8c\uff1aZ\u51fd\u6570\uff08\u6269\u5c55KMP\uff09</p> Go <pre><code>package main\n\nfunc lastSubstring(s string) string {\n    j := 0\n    for i, c := range s {\n        if byte(c) &gt; s[j] {\n            j = i\n        }\n    }\n    s = s[j:]\n    n := len(s)\n    z := make([]int, n)\n    z[0] = n\n    for i, l, r := 1, 0, 0; i &lt; n; i++ {\n        z[i] = max(0, min(z[i-l], r-i+1))\n        for ; i+z[i] &lt; n &amp;&amp; s[z[i]] == s[i+z[i]]; z[i]++ {\n        }\n        if j = i + z[i] - 1; j &gt; r {\n            l, r = i, j\n        }\n        if z[i] &gt; 0 &amp;&amp; i+z[i] &lt; n &amp;&amp; s[i+z[i]] &gt; s[z[i]] {\n            s = s[i:]\n            n = len(s)\n            i, l, r = 1, 0, 0\n        }\n    }\n    return s\n}\n\nfunc min(x, y int) int {\n    if x &lt; y {\n        return x\n    } else {\n        return y\n    }\n}\n\nfunc max(x, y int) int {\n    if x &gt; y {\n        return x\n    } else {\n        return y\n    }\n}\n</code></pre>"}]}